<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Adb Command</title>
    <url>/2021/10/24/Android-Adb-Command/</url>
    <content><![CDATA[<p>安卓小技巧</p>
<span id="more"></span>
<h1 id="recovery-模式下使用adb">recovery 模式下使用adb</h1>
<p>首先在电脑中找到<code>adbkey.pub</code>文件，我的默认地址是<code>.android</code>,通过一些手段移入安卓设备的一个分区<code>/data/misc/adb/</code>的<code>adb_keys</code>文件中，下面是push的的方法，当然也可以用第三方<code>rec</code>直接导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys</span><br></pre></td></tr></table></figure>
<p>wifi连接adb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect ip:5555</span><br></pre></td></tr></table></figure>
<p>断开连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb disconnect ip:5555</span><br></pre></td></tr></table></figure>
<h1 id="备份文件">备份文件</h1>
<p>备份文件的方法主要用<code>adb pull</code>，这里以<code>tim</code>为例，可以这样做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /data/data/com.tencent.tim ./tim</span><br></pre></td></tr></table></figure>
<p>切记，备份时最好用linux操作系统，Windows总是会有一些莫名的错误,备份安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /data/app/  ./app</span><br></pre></td></tr></table></figure>
<p>备份<code>sdcard</code>的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull ./sdcard/Android/data/com.tencent.tim ./com.tencent.tim </span><br></pre></td></tr></table></figure>
<p>使用脚本备份文件,下载下面的<a
href="https://ninglang.lanzoui.com/iHmmuvpiygj">脚本</a>，将备份的文件导入电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /storage/emulated/0/back/ ./back</span><br></pre></td></tr></table></figure>
<p><a
href="https://picturnl.oss-cn-shanghai.aliyuncs.com/contacts.csv">联系人备份</a></p>
<h1 id="恢复app">恢复App</h1>
<p>微信等软件不支持降级，可以先用下面命令将数据传入（需要在安装magisk之后）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ./tim /data/com.tencent.tim </span><br></pre></td></tr></table></figure>
<p>然后使用下面的语句对应用进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb install ./tim.apk</span><br></pre></td></tr></table></figure>
<p>登录时可能会报错，这时可以采用<code>TitaniumBackup</code>对这个软件备份，卸载整个软件，数据，用<code>TitaniumBackup</code>恢复应用程序</p>
<p>卸载app但保留数据和缓存文件：</p>
<p><code>adb shell pm uninstall -k 包名</code></p>
<h2 id="恢复data的app">恢复data的app</h2>
<p>首先安装apk，打开，然后用push将data push到手机中去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push ./mm/* /data/data/com.tencent.mm</span><br></pre></td></tr></table></figure>
<p>微信降级</p>
<p>首先，将<code>data</code>
push之后，应该可以看到最新版本的微信的聊天记录是<code>data</code>里面的,然后，使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall -k com.tencent.mm</span><br></pre></td></tr></table></figure>
<p>重新启动手机</p>
<p>然后使用adb安装软件（微信）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb install weixing.apk</span><br></pre></td></tr></table></figure>
<p>可以完成无需登录的降级</p>
<h2 id="钛备份恢复文件">钛备份恢复文件</h2>
<p>之前之所以没有用钛备份，是考虑到钛备份没有一些很必要的功能，例如，我的微信的语音、以及图片，都没有办法备份，现在，只需要开启钛备份中设置的<code>preferences-&gt;backup app external data-&gt;enabled(always)</code>.就可以，这事，就会备份语音，而且，在微信等软件的高版本的情况下，可以直接使用钛备份使用恢复历史版本仅<code>APP</code>即可。</p>
<h1 id="输入内核">输入内核</h1>
<p>首先，将内核文件<code>*.zip</code>移动到手机中，然后用在用<code>twrp</code>对它进行刷入，直接刷入即可</p>
<h1 id="adb-su">adb su</h1>
<p>adb su由于某些原因打不开，这时候要强制打开使用这个<a
href="https://github.com/evdenis/adb_root">链接</a>中release中的zip,然后用面具刷入，即可</p>
<p>然后使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br></pre></td></tr></table></figure>
<p>即可完成整个提权，文件读写权限</p>
<h1 id="magisk">Magisk</h1>
<ol type="1">
<li>先下载<code>HttpCanary</code>，<a
href="https://ninglang.lanzoup.com/iOlriyzokud">点击下载</a>,再用这个命令对证书进行移动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -f /data/misc/user/0/cacerts-added/12abc345.0 <span class="variable">$MODDIR</span>/system/etc/security/cacerts</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>禁止某个ip（magisk20.3）:下载<a
href="">ipforbidden</a>模块，刷入，即可</li>
</ol>
<h1 id="开机模式下软件操作">开机模式下软件操作</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure>
<p>可以加上查询字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages | grep <span class="string">&#x27;miui&#x27;</span></span><br></pre></td></tr></table></figure>
<p>获取<code>root</code>权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure>
<p>保留数据卸载,此方法可用于微信降级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb  uninstall -k com.tencent.tim</span><br></pre></td></tr></table></figure>
<p>安装apk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb  install  com.tencent.tim</span><br></pre></td></tr></table></figure>
<h1 id="安卓分区">安卓分区</h1>
<ul>
<li><p>system</p>
<p>这个分区无所谓，每次刷机刷的就是这个</p></li>
<li><p>data</p>
<p>这个分区就是软件数据放的地方，小心格式化</p></li>
<li><p>persist</p>
<p>储存账户密码，如果这个分区损坏，会出现储存读取错误，使用官方的线刷包中的persist即可以恢复。</p></li>
<li><p>vendor</p></li>
<li><p>recovery</p>
<p>这个是在fastboot模式下刷入的分区</p></li>
<li><p>boot</p></li>
<li><p>cache</p>
<p>这个分区只是具有记录功能，擦除不影响使用，不会影响任何数据</p></li>
<li><p>misc</p>
<p>这个分区是放硬件配置信息的，USB，adb</p></li>
<li><p>sdcard</p>
<p>这个分区就是存储卡分区，没什么特别的</p></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>C&amp;&amp;C++问题总汇(1)</title>
    <url>/2021/09/20/C&amp;&amp;C++%E9%97%AE%E9%A2%98%E6%80%BB%E6%B1%87(1)/</url>
    <content><![CDATA[<p>C&amp;&amp;C++问题总汇🙄</p>
<span id="more"></span>
<h1 id="二维数组">二维数组</h1>
<p>定义一个二维数组如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125; &#125;;</span><br></pre></td></tr></table></figure>
<p>如果采用一个指针去指向这个数组，可以这么做:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>]=a; <span class="comment">//4代表了一行有多少个元素</span></span><br></pre></td></tr></table></figure>
<p>其中<code>*p</code>要加括号，因为不加括号就是指针数组,而且但是，这时候的<code>*p</code>（p指针指向的数据不在是一个<code>int</code>的数，而是一个数组，代表的是第i行的所有元素）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(*p);</span><br><span class="line">Output: <span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>那么访问这个二维数组的指针方法是:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[i][j]=*(*(p+i)+j);</span><br></pre></td></tr></table></figure>
<p>当然，下面这种方式也对(和一维数组的指针一样)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[i][j]=p[i][j];</span><br></pre></td></tr></table></figure>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/Y7D20b8621AY6CYryYagUED1.jpg" alt="Y7D20b8621AY6CYryYagUED1" style="zoom: 33%;" /></p>
<ul>
<li>指针数组是这样子的吗？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *strs[<span class="number">3</span>] =&#123;<span class="string">&quot;chinese&quot;</span>,<span class="string">&quot;zhonguo&quot;</span> &#125; ;<span class="comment">//3代表两个string元素，一个&#x27;\0&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里使用的就是指针数组,所以这里是3（数组中元素的个数+1），而上面的那个是4数组个每个元素的下一级个数。</p>
<h2 id="二维数组赋值的问题">二维数组赋值的问题</h2>
<ul>
<li>二维数组有两个维度，当然可以按照一个一个去赋值，但那样毕竟太慢，所以有没有更好的赋值方法呢？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b1[][<span class="number">2</span>]=&#123;&#123;q[<span class="number">0</span>],q[<span class="number">1</span>]&#125;,&#123;q[<span class="number">3</span>],q[<span class="number">4</span>]&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>这是我现在使用的方法，并不是十分的好，希望有所改进</p>
<ul>
<li>友元函数访问私有成员问题</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//习题5-18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//报错，a[2][2]是私有成员，不可在operator中访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		List(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k ,<span class="keyword">int</span> m)&#123;</span><br><span class="line">			a[<span class="number">0</span>][<span class="number">0</span>]=i,a[<span class="number">0</span>][<span class="number">1</span>]=j,a[<span class="number">1</span>][<span class="number">0</span>]=k,a[<span class="number">1</span>][<span class="number">1</span>]=m;</span><br><span class="line">		&#125;</span><br><span class="line">		List(<span class="keyword">int</span> (*p)[<span class="number">2</span>])&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					a[i][j]=p[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		List()&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">operator</span>+(List &amp;a,List &amp;b);</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">operator</span>-(List &amp;a,List &amp;b);</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[<span class="number">0</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[<span class="number">1</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[<span class="number">1</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">List <span class="keyword">operator</span>+(List a,List b)&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					c[i][j]=a.a[i][j]+b.a[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> List(c);</span><br><span class="line">&#125;</span><br><span class="line">List <span class="keyword">operator</span>-(List &amp;a,List &amp;b)&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					c[i][j]=a.a[i][j]-b.a[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> List(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">List <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> q[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> b1[][<span class="number">2</span>]=&#123;&#123;q[<span class="number">0</span>],q[<span class="number">1</span>]&#125;,&#123;q[<span class="number">3</span>],q[<span class="number">4</span>]&#125;&#125;;</span><br><span class="line">	<span class="function">List <span class="title">b</span><span class="params">(b1)</span></span>;</span><br><span class="line">	List c;</span><br><span class="line">	c = a+b;</span><br><span class="line">	c.disp();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指针的指针">指针的指针</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> **p;</span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">int</span> **p; <span class="comment">//定义一个指针的指针</span></span><br><span class="line"><span class="keyword">int</span> *q;	<span class="comment">//定义一个int型的指针</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">q = a;	<span class="comment">//q指向a</span></span><br><span class="line">p =&amp;q; <span class="comment">//p指向q</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(*p+<span class="number">1</span>)); <span class="comment">//所以*p展现了q，*（*p）为q展现自己储存的地址的内容</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>所以说，这个<code>int</code>有用吗？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*((<span class="keyword">int</span> *)a+n*i+j);  </span><br></pre></td></tr></table></figure>
<ul>
<li>函数的分号问题</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;;   <span class="comment">//这个分号是否有必要？</span></span><br></pre></td></tr></table></figure>
<ul>
<li>答：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为什么Base和Derived的虚函数地址一样呢 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Derived d;</span><br><span class="line">	<span class="keyword">if</span> (d.Base::_vptr==d._vptr)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//显示yes</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>问：Base中的虚函数和Derived的虚函数的地址为什么是一样的呢</p></li>
<li><p>答：</p></li>
</ul>
<p>虚表指针指向了一个虚表，虚表中存放着类中的虚函数。如果类中存在虚函数，那么构造对象的时候，就会生一个虚表指针指向虚表，虚表中存放虚函数。所以，要注意的一-点，
在类的构造函数中不要调用虚函数，这是一一个危险的动作，因为很可能它还未
初始化完毕。</p>
<ul>
<li>问：动态联编和静态联编，可以访问派生类函数</li>
<li>答：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;1,2,3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;4,5,6&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A *ptr;</span><br><span class="line">    B a1;</span><br><span class="line">    ptr =&amp;a1;</span><br><span class="line">    ptr-&gt;<span class="built_in">print1</span>();   <span class="comment">//can&#x27;t called</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>问：不能调用派生类函数</li>
<li>答：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; nihao!&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Base d1, *bp;</span><br><span class="line">	Derived d2;</span><br><span class="line">	bp=&amp;d2;</span><br><span class="line">	bp-&gt;func4();   <span class="comment">//这里直接调用了Base里面的func4()，这个算重载吗？ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>问：这个可以算重载嘛？，结果值为第一个</li>
<li>答:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Length</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> meter;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Length(<span class="keyword">int</span> m)&#123;</span><br><span class="line">			meter = m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (<span class="number">1</span>*meter/<span class="number">1000</span>);   <span class="comment">//这个地方一定要使用1.0,否者强制转化会导致结果出错 </span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">Length <span class="title">a</span><span class="params">(<span class="number">1500</span>)</span></span>;</span><br><span class="line">	<span class="keyword">double</span> m =<span class="keyword">float</span>(a);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;m=&quot;</span>&lt;&lt;m&lt;&lt;<span class="string">&quot;km&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：这里<code>Length</code>返回值只能是1.0，不能是1，否者将会不准确。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>C &amp;&amp; C++ (1)</title>
    <url>/2021/09/03/C_C++/</url>
    <content><![CDATA[<p>describe some differences between c and c++,(Function Union and
Quote)</p>
<span id="more"></span>
<h1 id="function">Function</h1>
<ul>
<li><p>Function declaration</p>
<p>if Function declaration's parameter is empty of
<code>void</code>,This two declaration in c++ are same :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f();				<span class="comment">//This function don&#x27;t carray any parameters</span></span><br><span class="line">f(<span class="keyword">void</span>);			<span class="comment">//This function don&#x27;t carray any parameters</span></span><br></pre></td></tr></table></figure>
<p>but they are different in c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f(<span class="keyword">void</span>);			<span class="comment">//This function don&#x27;t carray any parameters</span></span><br><span class="line">f();				<span class="comment">//Don&#x27;t give the information of parameters ,It have chance to carrary 						//paramters</span></span><br></pre></td></tr></table></figure></li>
<li><p>Macro definition</p>
<p>Macro definition may cause some error that we can't expect ,for
example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> doub(x) x*2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; doubled is &quot;</span>&lt;&lt;doub(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1+2 doubled is &quot;</spa                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ><br><span class="line"><span class="comment">//注意尾结点,不要让其指向空</span></span><br><span class="line"><span class="keyword">if</span>(first-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    rear=first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure>
<h2 id="应用举例">应用举例</h2>
<ol type="1">
<li>两栈共享空间</li>
</ol>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220430231223168.png" alt="image-20220430231223168" style="zoom: 80%;" /></p>
<h3 id="括号匹配问题">括号匹配问题</h3>
<p>使用栈来匹配括号,查看代码是否是多了括号或者少了括号</p>
<p>算法:Match(str)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果判断为左括号,进栈</span></span><br><span class="line">    <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        top++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断为右括号,出栈</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果栈中有括号或者使用了更多的括号,返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="表达式求值">表达式求值</h3>
<p>设运算符有<code>+,-,*,/,#</code>,其中#号是界定符,求出给的表达式的结果:假设给的表达式为
<span class="math display">\[
3\times 3+(6/5+7)*4-9
\]</span></p>
<p>​
一个表达式的输出一共有两种情况,一种是数字,一种是符号,我们假设有两个栈,一个是符号栈,一个是数据栈,首先要判断进来的这个是不是一个符号,其次他的优先级是否高于现在栈中栈顶元素的符号,如果高于,那么这个时候我们让它进栈,如果不高于,那么,我们让栈中栈顶元素出栈,,对数据进行运算,直到其优先级小于入栈符号的优先级,然后新的符号压入栈中.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SymbolStack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;!SymbolStack.<span class="built_in">isempty</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    str=str_[i];</span><br><span class="line">    <span class="comment">//进入栈之后判断一下它是否是符号</span></span><br><span class="line">    <span class="comment">//是不是优先级较高的</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">IssSymbol</span>(str)&amp;&amp;!<span class="built_in">IsPriority</span>(str))</span><br><span class="line">    &#123;</span><br><span class="line">        a=NumberStack.<span class="built_in">pop</span>();</span><br><span class="line">        b=NumberStack.<span class="built_in">pop</span>();</span><br><span class="line">        NumberStack.<span class="built_in">push</span>(<span class="built_in">Calculate</span>(b,a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是符号,而且优先级高,则入栈</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IssSymbol</span>(str)&amp;&amp;<span class="built_in">IsPriority</span>(str))</span><br><span class="line">    &#123;</span><br><span class="line">        SymbolStack.<span class="built_in">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是数字,则让其进入数字栈</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        NumberStack.<span class="built_in">push</span>(str.<span class="built_in">toInt</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归">递归</h2>
<p>递归的主要组成部分</p>
<ul>
<li>基础情况</li>
<li>递归部分</li>
</ul>
<h3 id="汉诺塔求解">汉诺塔求解</h3>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220501195358429.png" alt="image-20220501195358429" style="zoom:80%;" /></p>
<p>解决方法:</p>
<p>:one:
首先假设样本数量比较小,例如只有一个盘子的时候,那么我们需要做的是:<code>A---&gt;C</code></p>
<p>如果是两个盘子:第一步:将上面的盘子移到B,将A的盘子移到C,再把B上面的移动到C:<code>A---&gt;B</code>,<code>A---&gt;c</code>,<code>B---&gt;c</code></p>
<p>如果是三个盘子:第一步,想办法把A上面2个盘子移到到B,再把A上的移动到C,最后想办法把B上的移动到C:<code>A(2)---&gt;B</code>,<code>A---&gt;C</code>,<code>B(2)---&gt;C</code></p>
<p>:two:现在考虑更加朴实的情况:n个盘子:则算法的思路为:<code>A(n-1)---&gt;B</code>,<code>A---&gt;C</code>,<code>B---&gt;C</code></p>
<p>:three:
好!现在算上想清楚了,基础条件:n=1:直接移动,如果n!=1的时候,就借助B,再移动到C</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Move函数:A通过借助B移动到C</span></span><br><span class="line"><span class="built_in">Move</span>(A,B,C,n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;A&lt;&lt;<span class="string">&#x27;---&gt;&#x27;</span>&lt;&lt;C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将A上面的n-1个盘子通过A移动到B</span></span><br><span class="line">		<span class="built_in">Move</span>(A,C,B,n<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将A的最底下的盘子一次移到C</span></span><br><span class="line">        <span class="built_in">Move</span>(A,B,C,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将B上所有的盘子想方法移动到C</span></span><br><span class="line">        <span class="built_in">Move</span>(B,A,C,n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="n皇后问题">N皇后问题</h3>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>遗传算法</title>
    <url>/2022/02/20/yichuan/</url>
    <content><![CDATA[<p>遗传算法的初步了解</p>
<span id="more"></span>
<p>以<code>TSP</code>问题为例,遗传算法的流程图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/191819382245126.gif" alt="img" style="zoom: 33%;" /></p>
<p>首先创建最初种群</p>
<p>配置环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">as</span> conf</span><br><span class="line"><span class="keyword">from</span> ga <span class="keyword">import</span> Ga</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">config = conf.get_config()</span><br></pre></td></tr></table></figure>
<p>计算适应度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dist_mat</span>(<span class="params">input_list</span>):</span></span><br><span class="line">    n = config.city_num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input_list&quot;</span>,input_list)</span><br><span class="line">    dist_mat = np.zeros([n, n])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            d = input_list[i, :] - input_list[j, :]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;d&quot;</span>,d)</span><br><span class="line">            <span class="comment"># 计算点积</span></span><br><span class="line">            dist_mat[i, j] = np.dot(d, d)</span><br><span class="line">            dist_mat[j, i] = dist_mat[i, j]</span><br><span class="line">    <span class="keyword">return</span> dist_mat</span><br></pre></td></tr></table></figure>
<p>创建最初种群</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 城市坐标</span></span><br><span class="line">city_pos_list = np.random.rand(config.city_num, config.pos_dimension)</span><br><span class="line"><span class="comment"># 城市距离矩阵</span></span><br><span class="line">city_dist_mat = build_dist_mat(city_pos_list)</span><br></pre></td></tr></table></figure>
<p>基因配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gene_len = config.city_num  <span class="comment">#基因长度，就是城市的数量</span></span><br><span class="line">individual_num = config.individual_num <span class="comment">#每次个体的数量</span></span><br><span class="line">gen_num = config.gen_num <span class="comment">#遗传代数</span></span><br><span class="line">mutate_prob = config.mutate_prob <span class="comment">#突变率</span></span><br></pre></td></tr></table></figure>
<p>数组深拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_list</span>(<span class="params">old_arr: [<span class="built_in">int</span>]</span>):</span></span><br><span class="line">    new_arr = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> old_arr:</span><br><span class="line">        new_arr.append(element)</span><br><span class="line">    <span class="keyword">return</span> new_arr</span><br></pre></td></tr></table></figure>
<p>种群中的一个个体,一个个体就是TSP的一个路线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, genes=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># 随机生成序列</span></span><br><span class="line">        <span class="keyword">if</span> genes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            genes = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gene_len)]<span class="comment">#如果是初代，那么路线则为默认12345</span></span><br><span class="line">            random.shuffle(genes)<span class="comment">#然后打乱路线</span></span><br><span class="line">        self.genes = genes</span><br><span class="line">        self.fitness = self.evaluate_fitness()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">evaluate_fitness</span>(<span class="params">self</span>):</span>  <span class="comment">#计算路线的长度</span></span><br><span class="line">        <span class="comment"># 计算个体适应度</span></span><br><span class="line">        fitness = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gene_len - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 起始城市和目标城市</span></span><br><span class="line">            from_idx = self.genes[i]</span><br><span class="line">            to_idx = self.genes[i + <span class="number">1</span>]</span><br><span class="line">            fitness += city_dist_mat[from_idx, to_idx]</span><br><span class="line">        <span class="comment"># 连接首尾</span></span><br><span class="line">        fitness += city_dist_mat[self.genes[-<span class="number">1</span>], self.genes[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> fitness</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>GA算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ga</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_</span>):</span></span><br><span class="line">        <span class="keyword">global</span> city_dist_mat</span><br><span class="line">        city_dist_mat = input_</span><br><span class="line">        self.best = <span class="literal">None</span>  <span class="comment"># 每一代的最佳个体</span></span><br><span class="line">        self.individual_list = []  <span class="comment"># 每一代的个体列表</span></span><br><span class="line">        self.result_list = []  <span class="comment"># 每一代对应的解</span></span><br><span class="line">        self.fitness_list = []  <span class="comment"># 每一代对应的适应度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cross</span>(<span class="params">self</span>):</span>  <span class="comment">#交叉</span></span><br><span class="line">        new_gen = []	<span class="comment">#新一代</span></span><br><span class="line">        random.shuffle(self.individual_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, individual_num - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 父代基因</span></span><br><span class="line">            genes1 = copy_list(self.individual_list[i].genes)</span><br><span class="line">            genes2 = copy_list(self.individual_list[i + <span class="number">1</span>].genes)</span><br><span class="line">            index1 = random.randint(<span class="number">0</span>, gene_len - <span class="number">2</span>)</span><br><span class="line">            index2 = random.randint(index1, gene_len - <span class="number">1</span>)</span><br><span class="line">            pos1_recorder = &#123;value: idx <span class="keyword">for</span> idx, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(genes1)&#125;</span><br><span class="line">            pos2_recorder = &#123;value: idx <span class="keyword">for</span> idx, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(genes2)&#125;</span><br><span class="line">            <span class="comment">#键是原来的数，值是该数在数组的位置</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment"># 交叉</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index1, index2):</span><br><span class="line">                value1, value2 = genes1[j], genes2[j] <span class="comment">#取出j位置的该值</span></span><br><span class="line">                pos1, pos2 = pos1_recorder[value2], pos2_recorder[value1]<span class="comment">#取出相反该值的位置</span></span><br><span class="line">                <span class="comment">#两个基因交换</span></span><br><span class="line">                genes1[j], genes1[pos1] = genes1[pos1], genes1[j]</span><br><span class="line">                genes2[j], genes2[pos2] = genes2[pos2], genes2[j]</span><br><span class="line">                pos1_recorder[value1], pos1_recorder[value2] = pos1, j</span><br><span class="line">                pos2_recorder[value1], pos2_recorder[value2] = j, pos2</span><br><span class="line">            new_gen.append(Individual(genes1))</span><br><span class="line">            new_gen.append(Individual(genes2))</span><br><span class="line">        <span class="keyword">return</span> new_gen</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutate</span>(<span class="params">self, new_gen</span>):</span>   <span class="comment">#变异</span></span><br><span class="line">        <span class="keyword">for</span> individual <span class="keyword">in</span> new_gen:</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; mutate_prob:</span><br><span class="line">                <span class="comment"># 翻转切片</span></span><br><span class="line">                old_genes = copy_list(individual.genes)</span><br><span class="line">                index1 = random.randint(<span class="number">0</span>, gene_len - <span class="number">2</span>)</span><br><span class="line">                index2 = random.randint(index1, gene_len - <span class="number">1</span>)</span><br><span class="line">                genes_mutate = old_genes[index1:index2]</span><br><span class="line">                genes_mutate.reverse()</span><br><span class="line">                individual.genes = old_genes[:index1] + genes_mutate + old_genes[index2:]</span><br><span class="line">        <span class="comment"># 两代合并</span></span><br><span class="line">        self.individual_list += new_gen</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">self</span>):</span>    <span class="comment">#选择</span></span><br><span class="line">        <span class="comment"># 锦标赛</span></span><br><span class="line">        group_num = <span class="number">10</span>  <span class="comment"># 小组数</span></span><br><span class="line">        group_size = <span class="number">10</span>  <span class="comment"># 每小组人数</span></span><br><span class="line">        group_winner = individual_num // group_num  <span class="comment"># 每小组获胜人数</span></span><br><span class="line">        winners = []  <span class="comment"># 锦标赛结果</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(group_num):</span><br><span class="line">            group = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(group_size):</span><br><span class="line">                <span class="comment"># 随机组成小组</span></span><br><span class="line">                player = random.choice(self.individual_list)</span><br><span class="line">                player = Individual(player.genes)</span><br><span class="line">                group.append(player)</span><br><span class="line">            group = Ga.rank(group)</span><br><span class="line">            <span class="comment"># 取出获胜者</span></span><br><span class="line">            winners += group[:group_winner]</span><br><span class="line">        self.individual_list = winners</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rank</span>(<span class="params">group</span>):</span></span><br><span class="line">        <span class="comment"># 冒泡排序</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(group)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(group) - i):</span><br><span class="line">                <span class="keyword">if</span> group[j].fitness &gt; group[j + <span class="number">1</span>].fitness:</span><br><span class="line">                    group[j], group[j + <span class="number">1</span>] = group[j + <span class="number">1</span>], group[j]</span><br><span class="line">        <span class="keyword">return</span> group</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_gen</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 交叉</span></span><br><span class="line">        new_gen = self.cross()</span><br><span class="line">        <span class="comment"># 变异</span></span><br><span class="line">        self.mutate(new_gen)</span><br><span class="line">        <span class="comment"># 选择</span></span><br><span class="line">        self.select()</span><br><span class="line">        <span class="comment"># 获得这一代的结果</span></span><br><span class="line">        <span class="keyword">for</span> individual <span class="keyword">in</span> self.individual_list:</span><br><span class="line">            <span class="keyword">if</span> individual.fitness &lt; self.best.fitness:</span><br><span class="line">                self.best = individual</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初代种群</span></span><br><span class="line">        self.individual_list = [Individual() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(individual_num)] <span class="comment">#初始化初代种群</span></span><br><span class="line">        <span class="comment">#individual里面genes只有数字的数组</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        self.best = self.individual_list[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gen_num):</span><br><span class="line">            self.next_gen()</span><br><span class="line">            <span class="comment"># 连接首尾</span></span><br><span class="line">            result = copy_list(self.best.genes)</span><br><span class="line">            result.append(result[<span class="number">0</span>])</span><br><span class="line">            self.result_list.append(result)</span><br><span class="line">            self.fitness_list.append(self.best.fitness)</span><br><span class="line">        <span class="keyword">return</span> self.result_list, self.fitness_list</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>时间预测模型</title>
    <url>/2022/02/20/%E6%97%B6%E9%97%B4%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>美赛的一种预测模型</p>
<span id="more"></span>
<p>基于时间序列模型对黄金和比特币的预测</p>
<p>黄金和比特币这一类的产品，一般来说，是自身会随着时间发生变化的产品，而时间序列的预测，主要适用于自身的发展趋势会随着自己的情况发展变化，于是，我们这个时候可以使用时间预测模型对该种情况进行预测，</p>
<p>这个时候我们可以着手判断产品随着时间变化的自我相关问题,根据查阅各样文献,可以得到,最常用的方法还是ARMA的方式。,这种方法比较适用于小规模单变量的预测，如股票的走势。</p>
<h2 id="ar模型">AR模型</h2>
<p>AR模型是一种自回归模型,简称它表述的是随机变量与前P期的多元线性回归。说明了随机变量<span
class="math inline">\(x_{t}\)</span>主要受前<span
class="math inline">\(p\)</span>期序列的影响。我们可以通过这种方式。将黄金和比特币的前几期作为自变量。然后将该天的黄金和比特币的售价作为因变量。通过AR模型。我们可以计算出前<span
class="math inline">\(p\)</span>期的<span
class="math inline">\(x_t\)</span>之间的相关性。如果<span
class="math inline">\(x_t\)</span>主要受过去P阶序列的影响，那么相关系数corre将会更接近一。这个时候我们就认为。当天的售价受前P期的影响。</p>
<h2 id="ma模型">MA模型</h2>
<p>​ MA模型主要研究的是<span
class="math inline">\(x_t\)</span>的取值与前Q期的随机扰动有关,认为是<span
class="math inline">\(x_t\)</span>主要受过去Q期的干扰项的影响，所以对于MA模型</p>
<h2
id="arma模型autoregressive-moving-average-model">ARMA模型（<strong>A</strong>uto<strong>r</strong>egressive
<strong>m</strong>oving <strong>a</strong>verage model）</h2>
<p>ARMA
模型，主要是结合AR模型自回归问题，也结合MA模型的平行移动的问题，一方面体现了时间的延续性，另一方面，又有自身变动的规律，假设影响因素为<span
class="math inline">\(x_1,x_2,x_3....,x_k\)</span>,由自回归分析可得
<span class="math display">\[
Y_{t}=\beta_{1} x_{1}+\beta_{2} x_{2}+\cdots+\beta_{p} x_{p}+Z
\]</span> 其中Y是预测对象的观测值，<span
class="math inline">\(Z\)</span>为误差项 <span class="math display">\[
Y_{t}=\beta_{1} Y_{t-1}+\beta_{2} Y_{t-2}+\cdots+\beta_{p} Y_{t-p}+Z_{t}
\]</span> 误差的表达方式为 <span class="math display">\[
Z_{t}=\epsilon_{t}+\alpha_{1} \epsilon_{t-1}+\alpha_{2}
\epsilon_{t-2}+\cdots+\alpha_{q} \epsilon_{t-q}
\]</span> 我们最终获得ARMA模型的表达式是 <span class="math display">\[
Y_{t}=\beta_{0}+\beta_{1} Y_{t-1}+\beta_{2} Y_{t-2}+\cdots+\beta_{p}
Y_{t-p}+\epsilon_{t}+\alpha_{1} \epsilon_{t-1}+\alpha_{2}
\epsilon_{t-2}+\cdots+\alpha_{q} \epsilon_{t-q}
\]</span></p>
<h2 id="黄金股票预测">黄金股票预测</h2>
<p>要想建立ARMA模型，首先，需要判断已有数据是否遵循时间序列数据的特点，第一步，判断数据是否具有稳定，而判断的标准，其一、要求经由样本时间序列所得到的拟合曲线在未来的一段期间内仍能顺着现有的形态“惯性″地延续下去，其二、平稳性要求序列的均值和方差不发生明显变化，只有满足这两个条件，这个数据才能被认为可以使用时间序列模型进行预测。</p>
<h3 id="arima">ARIMA</h3>
<p>当原来的数据不具有明显的平衡性的时候，我们可以利用原数据的差分运算之后结果的稳定，利用研究差分运算之后数据来进行构建时间序列的模型，即ARIMA，它是ARMA的扩展,其模型可以表示为
<span class="math display">\[
\left(1-\sum_{i=1}^{p} \phi_{i} L^{i}\right)(1-L)^{d}
X_{t}=\left(1+\sum_{i=1}^{q} \theta_{i} L^{i}\right) \varepsilon_{t}
\]</span> 其中<span class="math inline">\(d \in Z ,
d&gt;0\)</span>,记作ARMA(P,D,Q)</p>
<p>在确定使用哪一种方式之前，我们做出了原数据，一阶差分，二阶差分的图像，如图所示（其中为比特币的处理图像）</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download.png" alt="各阶差分图" style="zoom:50%;" /></p>
<p>可以明显看出，一阶差分的稳定性和二阶差分的稳定要远远大于原始数据的稳定性，所以，这时我们可以选择一阶差分或者是二阶差分，遵循所给的最低标准，我们可以将阶数设置为1，即<span
class="math inline">\(d_{diff}=1\)</span>，即<span
class="math inline">\(d_{diff} \neq 0\)</span></p>
<p>接下来，利用自相关模型MA来研究MA模型受前q期相关的参数q，通过Python的
statsmodels.tsa.stattools 研究一阶差分的自相关阶数和偏相关阶数，如图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (1).png" alt="download (1)" style="zoom:50%;" /></p>
<p>图中淡蓝色的阴影区域，表示阶数的置信区间，通过观察，对于自相关而言q=1,2,3,4,5都有可能，p=1,2,3,4也都有可能，显然，仅通过图像观察并不是十分的直观，于是，我们来计算对于不同的q和p的情况下，计算模型的相关系数</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (2).png" alt="download (2)" style="zoom:50%;" /></p>
<p>可以看出当Lag=3的时候，相关系数<span
class="math inline">\(corr\)</span>最大，结合上图这是我们断定<span
class="math inline">\(q\)</span>=3,<span
class="math inline">\(p\)</span>=2即构建ARMA模型的三个参数 <span
class="math display">\[
(P,D,Q):(2,1,3)
\]</span>
使用Python的sm库中的ARIMA来预测模型，可以得到模型，并且选用其中的七天作为训练集，然后对第八天、九天、十天做出预测</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (4).png" alt="预测图" style="zoom:50%;" /></p>
<p>最后，对模型进行残差分析，可以得到残差图，如图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (3).png" alt="download (3)"  /></p>
<p>可以看出，我们研究的模型线性关系较好，说明模型预测具有较好的准确性.</p>
]]></content>
      <categories>
        <category>Math Model</category>
      </categories>
  </entry>
  <entry>
    <title>近代史实践总结</title>
    <url>/2022/01/03/%E8%BF%91%E4%BB%A3%E5%8F%B2%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>🙄</p>
<span id="more"></span>
<center>
先来看看整个效果吧😜
</center>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=892959467&bvid=BV1nP4y1E7PM&cid=476772115&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>

<center>
一些小细节
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/jindaishi.png" /></p>
<center>
看国焘春风得意🤣
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220226072.png" /></p>
<center>
贺龙和代英胜利在握😏
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220435471.png" /></p>
<center>
哈哈，都不知道在笑什么😆
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220539122.png" /></p>
<center>
小伙伴们都被吓傻啦😅
</center>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/23.gif" /></div><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/1-min-1641220427188.gif" /></div></div></div>
<center>
集体照组合🤣
</center>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223711885.png" /></div><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223633199.png" /></div></div></div>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223731093.png" /></p>
<p>非常感谢那段时光大家的努力，我们的努力终究也会得到回报😊</p>
]]></content>
      <categories>
        <category>思想觉悟</category>
      </categories>
  </entry>
  <entry>
    <title>Cpp复习</title>
    <url>/2021/12/06/Cpp%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>cpp问题总结</p>
<span id="more"></span>
<h2 id="c基础">C基础</h2>
<p>程序形式：程序=过程+调用</p>
<p>I&gt;自顶向下、逐步求精：</p>
<p>I&gt;模化：</p>
<p>II&gt;语句结构化</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20211205182046698.png"
alt="image-20211205182046698" />
<figcaption aria-hidden="true">image-20211205182046698</figcaption>
</figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> a(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">int</span> a=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单的I/O格式控制</span></span><br><span class="line">setw(<span class="number">5</span>)<span class="comment">//设置域宽</span></span><br></pre></td></tr></table></figure>
<p>swith分支的判断都是<code>char</code>或者<code>int</code></p>
<p>1、数组名是一个常量，不能被赋值</p>
<p>2、二维数组初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//部分初始化化</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">6</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//列出全部初始值时，第1维下标个数可以省略 </span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>数组中<code>a[]</code>,a作为数组名，不能进行<code>a++</code>,但是指针<code>p=a+10</code>是可以的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(--n)<span class="comment">//先自减，再判断n==0</span></span><br><span class="line"><span class="keyword">while</span>(n--)<span class="comment">//先判断n==0，再自减</span></span><br></pre></td></tr></table></figure>
<p>C语言中的变量声明必须集中的在前面，而不能放在函数执行的过程之中，需要我们特别注意</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i=<span class="number">10</span>;<span class="comment">//这是不允许的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>带有默认参数的函数，默认参数需要放在后面</p>
<h2 id="面向对象概述">面向对象概述</h2>
<p>1、什么是面向对象？</p>
<p>程序=对象+消息</p>
<p>2、什么是对象，对象与类的关系是什么？</p>
<p>在面向对象程序设计中，对象是描述其属性的数据以及对这些数据施加的一组操作封装在一起构成的统一体。在C++中每个对象都是由数据和操作代码（通常用函数来实现）</p>
<p>在面向对象程序设计中，“类”就是具有相同的数据和相同的操作（函数）的一组对象的集合，也就是说，类是对具有相同数据结构和相同操作的一类对象的描述。</p>
<p>两部分组成的,类和对象是抽象与具体的关系，类是多个对象综合抽象的结果，对象是类的具体实例</p>
<p>3、什么是消息？</p>
<p>一个对象向另一个对象发出的请求称为消息</p>
<p>消息有三个性质:</p>
<p>(1)同一个对象可以接收不同形式的多个消息,作出不同的响应;</p>
<p>(2)相同形式的消息可以传递给不同的对象,所作出的响应可以是不同的;</p>
<p>(3)对消息的响应并不是必需的,对象可以响应消息,也可以不响应。</p>
<p>4、什么是抽象与封装？</p>
<p>抽象是将有关事物的共性归纳，集中的过程，是对现实世界的简洁表达方式，抽象包括两个方面，数据抽象和代码抽象。</p>
<p>封装是把某个事物包围起来，使外界不知道该事物的具体内容，将数据和实现操作的代码集中放在对象的内部，尽可能屏蔽对象的内部细节</p>
<p>5、什么是继承？</p>
<p>继承所表达是类之间的相关关系，这一关系使得某类对象可以继承另外一类对象的特征和能力</p>
<p>6、派生类和父类（继承）有什么特征？</p>
<p>(1)类间具有共享特征(包括数据和操作代码的共享);</p>
<p>(2)类间具有差别或新增部分(包括非共享的数据和操作代码);</p>
<p>(3)类间具有层次结构。</p>
<p>7、什么是单继承、多继承</p>
<p>单继承是指每个派生只是继承了一个基类的特征</p>
<p>多继承是指多个基类派生出一个派生类的继承关系</p>
<p>8、什么是多态？ 不同的对象受到同样消息执行不同操作，有两种多态</p>
<ul>
<li>函数重载，运算符重载（编译时的多态）</li>
<li>虚函数（运行时的多态）</li>
</ul>
<p>9、面向对象的优点是什么？</p>
<p>(1)可提高程序的重用性;(继承、模板)</p>
<p>(2)可控制程序的复杂性;</p>
<p>(3)可改善程序的可维护性;</p>
<p>(4)能够更好地支持大型程序设计;</p>
<p>(5)增强了计算机处理信息的范围;</p>
<p>(6)能很好地适应新的硬件环境。</p>
<h2 id="cpp概述">cpp概述</h2>
<p>1、简述cpp的特点？</p>
<ul>
<li>cpp是c的超集，cpp保持了与c的兼容，使得众多c的函数库和代码不经修改可以直接用于cpp中</li>
<li>C++是一个更好的C,它保持了C的简洁、高效和接近汇编语言等特点,并对C的功能作了不少扩充。用C++编写的程序比C更安全,可读性更好,代码结构更为合理，C++的编译系统能够检查出更多的类型错误。</li>
<li>用C++编写的程序质量高,从开发时间、费用到形成的软件的可重用性、可扩充性、可维护性和可靠性等方面有了很大的提高,使得大中型的程序开发变得更加容易。</li>
<li>增加了面向对象的机制，支持几乎所有面向对象的特征其中包括：抽象与封装、继承、多态、模板</li>
<li>cpp既可以用于面向过程的结构化程序设计，也可以用于面向对象程序设计</li>
</ul>
<p>2、这个注释是否可用（cpp中嵌入c的注释）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this is my first note/*way to my home*/</span></span><br></pre></td></tr></table></figure>
<p>可以</p>
<p>3、这个程序是否能编译？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//int sum(int a,int b);</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;sum(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能，因为没有函数原型声明</p>
<p>4、这两个函数是否等价</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b,<span class="keyword">char</span> * C)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">fun</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">float</span>,<span class="keyword">char</span>* )</span></span></span><br></pre></td></tr></table></figure>
<p>不等价，必须包含参数名</p>
<p>5、常指针和常量指针</p>
<p>常指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> * <span class="keyword">const</span> name=<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">name[<span class="number">3</span>]=<span class="string">&#x27;q&#x27;</span>;<span class="comment">//正确</span></span><br><span class="line">name=<span class="string">&quot;yu&quot;</span>;<span class="comment">//不正确</span></span><br></pre></td></tr></table></figure>
<p>常量指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * name =<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">name[<span class="number">3</span>] =<span class="string">&#x27;q&#x27;</span> ; <span class="comment">//不正确</span></span><br><span class="line">name=<span class="string">&quot;yu&quot;</span>;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<p>6、内联函数不是可以包含各种语句，其中例如<code>for</code>和<code>switch</code>都不行，内联函数在第一调用前必须有完整的定义，如果没有，也需要声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">box</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> )</span></span>;</span><br></pre></td></tr></table></figure>
<p>7、</p>
<ul>
<li>引用的对象不能是数组，不能创建引用的引用</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp; a=b; <span class="comment">//引用的引用是不允许的</span></span><br><span class="line">a=&amp;b;</span><br><span class="line">c=&amp;b;  <span class="comment">//这种引用传递是可以的</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组使用<code>new</code>创建数组也不能直接初始化，但是基本数据类型可以，例如</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">//初始化int指针为10</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//初始化长度为40的数组</span></span><br></pre></td></tr></table></figure>
<p>8、函数重载不能根据其返回的数据类型来判断，而是参数的个数，参数的数据类型（形参表不一样）</p>
<p>9、用<code>new</code>创建对象时也需要调用构造函数,删除时可以使用<code>delete []name</code>,并且一个指针也只能调用一次<code>delete</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用 new 创建时调用构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	A()&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;construct&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A *p=<span class="keyword">new</span> A;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>delete</code>是会释放内存的，但是不会让指针变量消失，也就是，它还可以指向别的地址</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">p=a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h2 id="类与对象">类与对象</h2>
<p>1、类默认的私有成员属性让整个cpp中的类比结构体更安全（数据隐藏），<font color='red'>但是结构体默认是公有的</font></p>
<ul>
<li><font color='red'>不能在类声明中给数据成员赋初值</font></li>
<li>在声明类的同时定义的对象是一种全局对象，它的生存期直到整个程序运行结束</li>
<li>声明了一个类便声明了一种类型，<font color='red'>这时没有给它分配存储空间</font></li>
</ul>
<p>2、类外定义成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Point::s</span><span class="params">()</span><span class="comment">//定义内联函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::b</span><span class="params">()</span><span class="comment">//定义普通函数</span></span></span><br></pre></td></tr></table></figure>
<p>3、定义对象的<font color='red'>三种方式</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;a,b,c;<span class="comment">//方式一</span></span><br><span class="line"></span><br><span class="line">Point a,b,c;<span class="comment">//方式二</span></span><br><span class="line">Complex *p =<span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//无名对象</span></span><br></pre></td></tr></table></figure>
<p>4、指针访问对象成员的<font color='red'>两种方式</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ptr-&gt;a;</span><br><span class="line">(*ptr).a;<span class="comment">//这种容易忘记</span></span><br></pre></td></tr></table></figure>
<p>5、构造函数和析构函数（构造函数在类外定义时一定要记得加类名，<font color='red'>无需返回值</font>）</p>
<p>功能：为对象分配存储空间，为对象收回存储空间</p>
<ul>
<li>构造函数：<font color='red'>名字与类名同名，参数任意，不能有返回值，可以类外定义,构造函数不能手动调用</font></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a b;</span><br><span class="line">    b.a();<span class="comment">//错误，不能主动调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>析构函数：</li>
</ul>
<p>6、对象初始化</p>
<p>在定义对象时，对数据成员赋初值，称为对象的初始化。在定义对象时，如果某一数据成员没有被赋值，则它的值是不可预知的。对象是一个实体，在使用对象时，它的<font color='red'>每一个数据成员都应该有确定的值</font>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="keyword">double</span> real;</span><br><span class="line">    	<span class="keyword">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex c1=&#123;<span class="number">1.1</span>,<span class="number">2.2</span>&#125;	<span class="comment">//这种初始化一定要注意了，有私有成员时不行,只有公有成员可以	</span></span><br></pre></td></tr></table></figure>
<p>7、成员初始化列表对数据成员初始化</p>
<p><font color='red'>必须使用该方法的两类数据</font>，一是常量<code>const</code>，二是引用<code>&amp;</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex(<span class="keyword">double</span> x,<span class="keyword">double</span> y):real(x),imag(y)&#123;&#125;;<span class="comment">//构造函数后面操作</span></span><br></pre></td></tr></table></figure>
<p>数据成员是按照它们在类中<font color='red'>声明的顺序</font>进行初始化的，与它们<font color='red'>在成员初始化列表中列出的顺序无关</font>。</p>
<p><font color='red'>注意：如果参量是数组，则一定不能使用初始化表对其进行初始化</font></p>
<p>8、无参构造函数对象的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex a;	<span class="comment">//正确</span></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">()</span></span>;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>9、带默认参数的构造函数</p>
<p>（1）<font color='red'>如果构造函数在类的声明外定义，那么默认参数应该在类内声明构造函数原型时指定（默认参数只能放在后面）</font>，而不能在类外构造函数定义时指定。</p>
<p>（2）<font color='red'>在一个类中定义了全部是默认参数的构造函数后，不能再定义重载构造函数</font>。例如在一个类中有以下构造函数的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> imag=<span class="number">0</span>);</span><br><span class="line">Complex(<span class="keyword">double</span> r);</span><br></pre></td></tr></table></figure>
<p>10、析构函数（<font color='red'>如果函数传参是对象引用，则不会调用析构，如果是对象，则会调用,但返回值有需要另外分析</font>）</p>
<p>（1）析构函数不返回任何值。在定义析构函数时，是不能说明它的类型的，甚至说明为<font color='red'>void类型也不行</font>。</p>
<p>（2）析构函数没有参数，因此它不能被重载。一个类可以有多个构造函数，但是只能有一个析构函数。</p>
<p>new出来的空间需要在析构函数中<code>delete</code>释放,针对类中的指针变量，</p>
<p>（3）使用<code>new</code>生成的对象<code>delete</code>时也需要调用析构函数</p>
<p>11、对象数组</p>
<ul>
<li>对象数组的赋值</li>
</ul>
<p>（1）创建多大的对象数组，就要调用构造函数多少次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>....;</span></span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//构造函数调用四次（单个参数才可以）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a中有空构造函数时,下面也可以</span></span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>];</span><br><span class="line">    c[<span class="number">1</span>]=a(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）对象数组的赋值可以使用多类构造函数赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    a();</span><br><span class="line">    a(<span class="keyword">int</span> i);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;<span class="comment">//多类构造函数，一个是a().一个是a(int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）定义数组时实参的个数不能超过数组元素的个数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）多参数构造函数对象数组的赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;a(<span class="number">1</span>,<span class="number">2</span>),a(<span class="number">2</span>,<span class="number">3</span>),a(<span class="number">3</span>,<span class="number">4</span>),a(<span class="number">3</span>,<span class="number">5</span>)&#125;;<span class="comment">//多参数的唯一赋值赋值方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）对象指针访问对象数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a *p,c[<span class="number">4</span>]..;</span><br><span class="line">    p=c;</span><br><span class="line">    p[<span class="number">0</span>]-&gt;show();</span><br><span class="line">    p++;<span class="comment">//c[1]</span></span><br><span class="line">    p-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>对象的赋值和复制</p></li>
<li><p>拷贝复制函数（<font color='red'>这个函数没有返回值</font>）</p></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(p1)</span><span class="comment">//使用拷贝复制函数构建p2,方式一</span></span></span><br><span class="line"><span class="function">Point p2</span>=p1 <span class="comment">//使用拷贝复制函数构建p2，方式二</span></span><br></pre></td></tr></table></figure>
<p>（1）与构造函数同名</p>
<p>（2）只有一个参数，参数类型是自身引用</p>
<p>（3）每个类有会有拷贝构造函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义拷贝复制函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    Point(<span class="keyword">const</span> Point &amp;p)&#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用拷贝构造函数的情况（<font color='red'>如果是在派生类中，会调用<code>base</code>析构函数，不一定调用<code>base</code>构造函数（除了自定义了拷贝构造函数外</font>））</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    B(<span class="keyword">const</span> B&amp;)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">B b1;<span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>;  <span class="comment">//这里b2的产生会调用A的构造</span></span><br><span class="line"><span class="comment">//默认拷贝构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="comment">// B(const B&amp;)&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">B b1;<span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>; <span class="comment">//这里b2的产生不会调用构造</span></span><br></pre></td></tr></table></figure>
<p>（1）用一个对象初始化一个对象</p>
<p>（2）<font color='red'>函数的形参是对象</font></p>
<p>（3）<font color='red'>函数的返回值是对象</font></p>
<p>这个返回值时对象的情况，实际上还调用了<font color='red'>赋值函数</font></p>
<p>静态成员（属于类，而不是对象）</p>
<p>静态数据成员（在类函数里可以直接访问,无需加上类名）<font color='red'>需要作用域初始化</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;<span class="comment">//类内声明</span></span><br><span class="line"><span class="comment">//初始化时需要int放在前面</span></span><br><span class="line"><span class="keyword">int</span> A::a=<span class="number">0</span>;<span class="comment">//main函数之前初始化,不用static前缀//需要作用域</span></span><br><span class="line">A::a; <span class="comment">//类访问方式</span></span><br><span class="line">A b;</span><br><span class="line">b.a;<span class="comment">//对象访问方式</span></span><br><span class="line">p-&gt;a;<span class="comment">//指针访问方式</span></span><br></pre></td></tr></table></figure>
<p>静态函数成员</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="comment">//访问方式同数据成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A::f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;<span class="comment">//不用static前缀</span></span><br></pre></td></tr></table></figure>
<p>静态函数成员没有<code>this</code>指针,这是它和其它函数最大的区别，一般来说，<font color='red'>不访问非静态成员</font>，如果访问，则也是需要通过对象的引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dis</span><span class="params">(A &amp;w)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::dis</span><span class="params">(A &amp;w)</span></span>&#123;....&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拷贝构造函数的调用关系">拷贝构造函数的调用关系</h3>
<ul>
<li>当子类的拷贝构造函数没有自定义的时候，拷贝时默认会调用父类的拷贝构造函数（无论父类构造是否自定义）</li>
<li>当子类的拷贝构造函数自定义之后，拷贝时默认调用父类的构造函数，这时父类的数据成员达不到复制的目的，需要显式调用父类拷贝构造函数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	B()&#123;&#125;;</span><br><span class="line">    	B(<span class="keyword">const</span> B &amp;ob):A(ob)&#123;...&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="友元">友元</h3>
<p>为什么要使用友元函数</p>
<p>（1）友元函数通过直接访问对象的私有成员，提高了程序运行的效率。</p>
<p>（2）在某些情况，如运算符被重载时，需要用到友元函数。</p>
<p>（3）一个函数可以是多个类的友元函数。当一个函数需要访问多个类时，友元函数非常有用</p>
<p>（1）友元关系是单向的，不具有交换性。若类X是类Y的友元，类Y是否是X的友元，要看在类中是否有相应的声明。</p>
<p>（2）友元关系也不具有传递性。若类X是类Y的友元，类Y是类z的友元，不定类X是类Z的友元。</p>
<h4 id="普通友元函数">普通友元函数</h4>
<p>（1）<font color='red'>友元一定不是当前类的成员函数</font></p>
<p>（2）只需要在声明的时候前面加上<code>friend</code>,可以定义在类的内部，也可以定义在类的外部</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">si</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">si</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//声明在类内，定义在类外，不是成员函数</span></span><br></pre></td></tr></table></figure>
<p>友元在访问的时候，必须传入<font color='red'>对象指针或者对象</font>的引用来进行访问</p>
<h4 id="友元函数是其它类的成员函数">友元函数是其它类的成员函数</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span><span class="comment">//这个很必要</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">si</span><span class="params">(Girl &amp;)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Boy::si</span><span class="params">(Girl &amp;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）一定要先定义友元函数所在的那个类，在定义声明为友元的那个类，需要提前声明类是存在的</p>
<h4 id="友元类">友元类</h4>
<p>（1）<font color='red'>友元类（友元函数所在的类）</font>必须在最开始定义，在其它类里面声明<code>friend 类名</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>&#123;</span></span><br><span class="line">    print(Girl &amp;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> (class) Boy; <span class="comment">//class 可以有，可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要互相声明为友元，则需要在上面的类中加上声明下面的类为友元即可，声明友元类后，<font color='red'>友元内的成员函数不能够在类内定义，只能类外定义</font>.</p>
<h4 id="类的组合">类的组合</h4>
<p>在一个类中有其它类对象的变量</p>
<p>初始化的方法:初始化化表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    A(<span class="keyword">int</span> b1,<span class="keyword">int</span> c1):b(b1),c(c1)&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造顺序只与其在类中定义的顺序有关，与其在初始化表中的顺序无关，析构相反,<font color='red'>先调用A-&gt;调用B-&gt;调用c-&gt;执行A的函数体</font></p>
<h4 id="常类型">常类型</h4>
<ul>
<li>常引用</li>
</ul>
<p><code>const 类型 &amp; 引用名</code>作为形参</p>
<ul>
<li>常对象</li>
</ul>
<p><code>const 类名 对象名（参数表）</code>,或者<code>类名 const 对象名(参数表)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A <span class="keyword">const</span> a;</span><br><span class="line">a.changevalue();<span class="comment">//报错，常对象的数据成员不允许变更</span></span><br><span class="line">a.dis();<span class="comment">//常对象成员不可以调用普通函数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常函数</li>
</ul>
<p><code>返回类型 函数名（参数表）const</code>;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dis</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> A::dis <span class="title">const</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color='red'>常对象只能调用常函数，不能调用普通函数，但是常函数可以被任意调用</font>，常函数可以调用对象的数据成员，但是不能该对象的数据成员，可以改变参数表传进来的形式参数</p>
<p>【3.1】类声明的一般格式是什么？</p>
<p>【解】类声明的一般格式如下：class类名 private：私有数据成员和成员函数
public公有数据成员和成员函数
其中：class是声明类的关键字，类名是要声明的类的名字；后面的花括号表示类声明的范围；最后的分号表示类声明结束
除了 private和 public之外，类中的成员还可以用另一个关键字
protected来说明。这时类声明的格式可写成：</p>
<p>类名</p>
<p>[private:]私有数据成员和成员函数</p>
<p>public：公有数据成员和成员函数</p>
<p>protected：保护数据成员和成员函数</p>
<p>被
protected说明的数据成员和成员函数称为保护成员。保护成员可以由本类的成员函数访问，也可以由本类的派生类的成员函数访问，而类外的任何访问都是非法的，即它是半隐蔽的。</p>
<p>【3.2】构造函数和析构函数的主要作用是什么？它们各有什么特性？</p>
<p>【解】构造函数是一种特殊的成员函数，它主要用于为<font color='red'>对象分配空间，进行初始化</font>。构造函数的名字必须与类名相同，而不能由用户任意命名。<font color='red'>它可以有任意类型的参数，但不能具有返回值类型</font>。它<font color='red'>不需要用户来调用，而是在建立对象时自动执行</font>。</p>
<p>构造函数具有一些特性：</p>
<p>（1）构造函数的名字必须与类名相同，否则编译程序将把它当作一般的成员函数来处理。</p>
<p>（2）构造函数没有返回值，在定义构造函数时，是不能说明它的类型的，甚至说明为void类型也不行。</p>
<p>//（3）构造函数的函数体可写在类体内，也可写在类体外。</p>
<p>//（4）构造函数的作用主要是用来对对象进行初始化，用户根据初始化的要求设计函数体和函数参数。在构造函数的函数体中不仅可以对数据成员赋初值，而且可以包含其他语句，但是，为了保持构造函数的功能清晰，一般不提倡在构造函数中加入与初始化无关的内容。</p>
<p>（5）构造函数<font color='red'>一般声明为公有成员</font>，但它不需要也不能像其他成员函数那样被显式地调用，它是在定义对象的同时被自动调用的，而且只执行一次。</p>
<p>（6）在实际应用中，通常需要给每个类定义构造函数。如果没有给类定义构造函数，则编译系统自动地生成一个默认构造函数。</p>
<p>析构函数也是一种特殊的成员函数。它执行与构造函数相反的操作，<font color='red'>通常用于执行些清理任务，如释放分配给对象的内存空间等</font>。析构函数有以下一些特点：</p>
<p>（1）析构函数名与类名相同，但它前面必须加一个波浪号（~）。</p>
<p>（2）<font color='red'>析构函数不返回任何值</font>。在定义析构函数时，是不能说明它的类型的，甚至说明为void类型也不行。</p>
<p>（3）<font color='red'>析构函数没有参数，因此它不能被重载</font>。<font color='red'>一个类可以有多个构造函数，但是只能有一个析构函数</font>。</p>
<p>（4）<font color='red'>撤销对象时，编译系统会自动地调用析构函数</font>。</p>
<p>【3.3】什么是对象数组？</p>
<p>【解】所谓对象数组是指每一<font color='red'>数组元素都是对象的数组</font>，也就是说，若一个类有若干个对象，我们把这一系列的对象用一个数组来存放。对象数组的元素是对象，<font color='red'>不仅具有数据成员，而且还有函数成员</font>。</p>
<p>【3.4】什么是this指针？它的主要作用是什么？</p>
<p>【解】C++为成员函数提供了一个名字为this的指针，这个<font color='red'>指针称为自引用指针</font>。每当创建一个对象时，系统就把this指针初始化为指向该对象，即this指针的值是<font color='red'>当前被调用的成员函数所在的对象的起始地址</font>。每当调用一<font color='red'>个成员函数</font>时，系统就自动把<font color='red'>this指针作为一个隐含的参数传给该函数</font>。不同的<font color='red'>对象调用同一个成员函数</font>时，C++编译器将根据成员函数的<font color='red'>this指针所指向的对象来确定应该引用哪一个对象的数据成员</font></p>
<p>【3.5】友元函数有什么作用？</p>
<p>【解】<font color='red'>友元函数不是当前类的成员函数，而是独立于当前类的外部函数</font>，<font color='red'>但它可以访问该类所有的成员</font>font&gt;，包括私有成员、保护成员和公有成员。<font color='red'>当一个函数需要访问多个类时，友元函数非常有用</font>，普通的成员函数只能访问其所属的类，但是多个类的友元函数能够访问相应的所有类的数据。此外，<font color='red'>在某些情况，例如运算符被重载时，需要用到友元函数</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Point p1=p2;<span class="comment">//调用拷贝构造</span></span><br><span class="line">p3=p2  <span class="comment">//调用默认赋值</span></span><br></pre></td></tr></table></figure>
<p>杂项：</p>
<p>（1）不能在类声明中给数据成员赋值，但是可以通过构造函数等</p>
<p>（2）静态成员函数可以在类内或类外定义，但是静态成员只能在类内定义</p>
<p>（3）友元函数既可以在类内定义，也可以在类外定义</p>
<p>（4）<font color='red'>一定要记住，如果函数中使用了对象，那么在函数结束时一定会调用<strong>析构函数</strong>，作为函数参数时不调用构造函数，而是调用拷贝构造函数</font></p>
<p>（5）下面这种情况调用默认赋值函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A a1,a2;</span><br><span class="line">a1=a2 <span class="comment">//这时候是不调用拷贝构造函数的！！！</span></span><br></pre></td></tr></table></figure>
<p>（6）<font color='red'>数组传参的本质是地址，也就是说，只能用指针进行接收</font>，若是字符串，则可以这样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">90</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(b,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="派生与继承">派生与继承</h2>
<p>（1）派生类不继承基类的构造函数和析构函数</p>
<p>（2）调整基类的成员属性</p>
<ul>
<li><p>三种继承方式</p>
<p>访问声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    A::print <span class="comment">//记住，这里不用括号，不带返回类型，不带变量</span></span><br><span class="line">    A::a;<span class="comment">//调整成员数据，形式一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调整只能对应调整，即<font color='red'>基类中的公有-&gt;子类中的公有；基类中的保护-&gt;子类中的保护，私有成员不能调整(始终不可访问)</font>,对所有的基类重载函数都起作用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    	<span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">int</span> x3</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A::x1;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    	A::x2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记住下面着这个例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,B&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><font color='red'>其中对A是公有继承，对B是私有继承。</font></p></li>
<li><p>同名成员（重定义）</p>
<p>（1）函数重定义（可以直接调整函数原来的属性）</p>
<p>要求：<font color='red'>函数名一样，<del>参数表一样</del>（参数可以不一样，这时候会直接隐藏父类的函数）：覆盖
，
如果不一样，则就是重载</font>覆盖不代表原来的函数没有了，它其实还是存在的，只是这时访问要加上作用域</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>;</span></span><br><span class="line">Y::m&#123;</span><br><span class="line">    f();<span class="comment">//访问y中的f（）</span></span><br><span class="line">    X::f();<span class="comment">//访问x中的f（）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）数据成员重写（<font color='red'>这种方式可以被直接无视父类中成员的权限，直接提升权限</font>）</p></li>
</ul>
<p>（3）基类中的私有成员。无论哪种继承方式，基类中的私有成员不允许派生类继承，即在派生类中是不可直接访问的。但是私有继承时，原来的<code>public \ protected</code>都是可以被内部访问的</p>
<p>（4）基类中的私有成员既不能被派生类的对象访问，也不能被派生类的成员函数访问，只能<font color='red'>被基类自己的成员函数（公有或者protected）访问</font>。</p>
<p>（5）通常情况下，当创建派生类对象时，首先执行基类的构造函数，随后再执行派生类的构造函数；当撤销派生类对象时，则先执行派生类的析构函数，随后再执行基类的析构函数。</p>
<p>（6）<font color='red'>当基类含有带参构造函数时，派生类必须定义构造函数给基类构造函数传参</font>.再多文件编程时，需要在类的内部写上函数声明（不包括哪些参数表），在类的外部写上调用基类构造函数，以及列表初始化等参数。</p>
<p>（7）指针定义的无名继承对象，如果是子类指针，则会调用子类、父类的析构函数，但是如果指针是父类指针，则在回收时会调用父类析构函数，并且，一旦定义了指针，一定是要有delete释放，即使main函数结束，指针变量依然不会释放。</p>
<p>派生类中的构造函数的调用顺序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B是A的子类</span></span><br><span class="line">B():A(...),a1(..),a2(..)&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用基类构造函数</li>
<li>调用内嵌对象的构造函数</li>
<li>执行B的函数体</li>
<li><font color='red'>析构顺序相反</font></li>
</ul>
<p>对象成员的构造函数调用顺序是他们在派生类中的声明顺序，析构相反</p>
<h4 id="多重继承">多重继承</h4>
<p>形式:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">protected</span> B</span><br><span class="line">&#123;</span><br><span class="line">    ....<span class="comment">//先调用A的构造，再调用B的构造</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>构造函数的调用顺序与声明时的顺序有关，析构相反</p>
<h4 id="虚基类">虚基类</h4>
<p>（1）如果在<font color='red'>虚基类中定义有带形参的构造函数</font>，并且没有定义默认形式的构造函数，则整个继承结构中，<font color='red'>所有直接或间接的派生类都必须在构造函数的成员初始化表中列出对虚
基类构造函数的调用（不是虚基类不用调用。只用管自己的上一级）</font>，以初始化在虚基类中定义的数据成员。</p>
<p>（2）建立一个对象时，如果这个对象中含有从虚基类继承来的成员，<font color='red'>则虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的（构造函数只执行一次，普通继承调用多次）</font>。该派生类的其他基类
对虚基类构造函数的调用都自动被忽略。</p>
<p>（3）若同一层次中同时包含虚基类和非虚基类<font color='red'>，应先调用虚基类的构造函数，再调用非
虚基类的构造函数，最后调用派生类构造函数</font>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>:</span><span class="keyword">public</span> Y <span class="keyword">virtual</span> <span class="keyword">public</span> Z&#123;&#125;;</span><br><span class="line"><span class="comment">//先调用z，然后y，然后x</span></span><br></pre></td></tr></table></figure>
<p>（4）对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p>
<p>（5）对于非虚基类，构造函数的执行顺序仍是先左后右，自上而下。</p>
<p>（6）若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造</p>
<h4 id="兼容赋值">兼容赋值</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Base b;</span><br><span class="line">Derieve d;</span><br><span class="line">b=d;<span class="comment">//只能访问b具有的成员</span></span><br><span class="line">Base &amp;b=d;</span><br><span class="line">base *p=&amp;d;</span><br></pre></td></tr></table></figure>
<p>指向基类的指针只能指向他的<font color='red'>公有派生类</font>的对象，而不能指向他的私有和保护派生对象。</p>
<p>【4.3】保护成员有哪些特性？保护成员以公有方式或私有方式被继承后的访问特性
如何？</p>
<p>【解】当类的继承方式为公有继承时，基类中的所有保护成员在派生类中仍以保护成
员的身份出现，在派生类内可以访问这些成员，但派生类外部不能访问它们，而在下一层派
生类内可以访问它们。</p>
<p>当类的继承方式为私有继承时，基类中的所有保护成员在派生类中都以私有成员的身
份出现，在派生类内可以访问这些成员，但派生类外部不能访问它们。</p>
<p>【4.7】在类的派生中为何要引人虚基类？虚基类构造函数的调用顺序是如何规定的？</p>
<p>【解】当引用派生类的成员时，首先在派生类自身的作用域中寻找这个成员，如果没有
找到，则到它的基类中寻找。如果一个派生类是从多个基类派生出来的，而这些基类又有一
个共同的基类，则在这个派生类中访问这个共同的基类中的成员时，可能会产生二义性。为
了解决这种二义性，C++引入了虚基类的概念。
虚基类的初始化与一般的多继承的初始化在语法上是一样的，但构造函数的调用顺序不同。在使用虚基类机制时应该注意以下几点：</p>
<p>（1）如果在虚基类中定义有<font color='red'>带形参的构造函</font>数，并且没有定义默认形式的构造函数，则
整个继承结构中，所有直<font color='red'>接或间接的派生类都必须在构造函数的成员初始化表中列出对虚
基类构造函数的调用</font>，以初始化在虚基类中定义的数据成员。</p>
<p>（2）建立一个对象时，如果这个对象中含有从虚基类继承来的成员，则虚基类的成员是
由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。该派生类的其他基类
对虚基类构造函数的调用都自动被忽略。</p>
<p>（3）若同一层次中同时包含虚基类和非虚基类，应先调用虚基类的构造函数，再调用非
虚基类的构造函数，最后调用派生类构造函数。</p>
<p>（4）对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p>
<p>（5）对于非虚基类，构造函数的执行顺序仍是先左后右，自上而下。</p>
<p>（6）若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造
函数。</p>
<h2 id="多态">多态</h2>
<p>1、运算符重载(<font color='red'>所有的运算符重载都有返回值（除了转化构造函数外，一般为对象，但是=和[]返回的值对象的引用），一般都需要传入对象的引用，双目运算符函数的提供者是左边，单目运算符提供者默认是右边</font>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">....</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex a,Complex b)</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	total1=com1+com2;	<span class="comment">//调用方式1</span></span><br><span class="line">	total2=<span class="keyword">operator</span>+(com1,com2);	<span class="comment">//调用方式2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能重载的运算符有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.*</span><br><span class="line">::</span><br><span class="line"><span class="keyword">sizeof</span></span><br><span class="line">?:</span><br></pre></td></tr></table></figure>
<p>C++不允许自己定义新的运算符，例如<code>**</code>不能重载，也不能定义，因为C++中无法通过这个进行乘方运算</p>
<ul>
<li>重载运算符不能改变操作数的个数（+）</li>
<li>重载不能改变优先级（+，<span
class="math inline">\(\times\)</span>）</li>
<li>重载不能改变结合特性</li>
<li>重载的参数至少一个是<u>类对象</u>（类引用），<u>不能全部是标准数据类型</u></li>
<li>=不用重载，除非类中有动态分配内存的指针成员</li>
</ul>
<h3 id="友元运算符函数重载">友元运算符函数重载</h3>
<ul>
<li>友元函数可以是不属于任何类的非成员函数，也可以是其他类的成员函数（一定不是自己的成员函数）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元运算符重载</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> 函数类型 <span class="keyword">operator</span>运算符(形参表);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">函数类型 <span class="keyword">operator</span>运算符（形参表）	<span class="comment">//无需加上类名</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在重载单目运算符，特别是++和--的时候，一定要记得使用<u>对象引用</u>，因为对象类型将无法改变它自身</li>
<li>有些的运算符不能定义为友元重载函数如<code>= 、[] 、()</code>，他们只能定为。。。</li>
</ul>
<h3 id="成员运算符重载">成员运算符重载</h3>
<ul>
<li>双目运算符：参数表为一个操作数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试访问权限</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">....</span><br><span class="line">		x <span class="keyword">operator</span>*(x ob);</span><br><span class="line">&#125;;</span><br><span class="line">x x::<span class="keyword">operator</span>*(x ob)</span><br><span class="line">&#123;</span><br><span class="line">	real=real*ob.real;</span><br><span class="line">	imag=imag*ob.imag;<span class="comment">//可以直接访问ob.imag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，即使<code>*</code>做为x的成员函数，但是<u>它还是可以访问同类型的ob的数据</u>，不存在权限不足的情况。实际调用左边对象的成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用方式</span></span><br><span class="line">a.<span class="keyword">operator</span>@(b)</span><br><span class="line">a@b</span><br></pre></td></tr></table></figure>
<ul>
<li>单目运算符：参数表为空,这是<u>适用于前缀</u></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">coord</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    coord <span class="keyword">operator</span>++()</span><br><span class="line">&#125;;</span><br><span class="line">coord coord::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    ++x;</span><br><span class="line">    ++y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>单目运算符：参数为<code>int</code>,适用于后缀</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ob.<span class="keyword">operator</span>++(<span class="keyword">int</span>)	<span class="comment">//成员函数重载</span></span><br><span class="line"><span class="keyword">operator</span>(x &amp;ob,<span class="keyword">int</span>) <span class="comment">//友元函数重载，一定要是引用</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前后缀对比</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">x <span class="keyword">operator</span>++();</span><br><span class="line"><span class="keyword">friend</span> x <span class="keyword">operator</span>++();</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">x <span class="keyword">operator</span>++(<span class="keyword">int</span>);	<span class="comment">//无需参数名，只需写类型</span></span><br><span class="line"><span class="keyword">friend</span> x <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line"><span class="comment">//定义区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">x x::<span class="keyword">operator</span>++()&#123;&#125;</span><br><span class="line">x <span class="keyword">operator</span>++()&#123;&#125;</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">x x::<span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;&#125;</span><br><span class="line">x <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//调用区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">ob.<span class="keyword">operator</span>++();<span class="comment">//显式调用，成员函数</span></span><br><span class="line"><span class="keyword">operator</span>++(ob);<span class="comment">//显示调用，友元函数</span></span><br><span class="line">++ob;	<span class="comment">//隐式调用:友元重载和成员函数重载一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">ob.<span class="keyword">operator</span>++(<span class="number">0</span>);<span class="comment">//显式调用，成员函数</span></span><br><span class="line"><span class="keyword">operator</span>++(ob,<span class="number">0</span>);<span class="comment">//显示调用，友元函数</span></span><br><span class="line">ob++;	<span class="comment">//隐式调用:友元重载和成员函数重载一样</span></span><br></pre></td></tr></table></figure>
<p>前缀<code>++x</code>是先自加，在进行下一步运算，<code>x=0,z=x++*4</code>,则最终<code>z=0</code>.</p>
<p>双目运算符一般可以被重载为友元运算符重载函数或成员运算符重载函数，但有一种情况，必须使用友元函数
例如，如果将一个复数与一个整数相加，可用成员运算符函数重载“+”运算符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex A::<span class="keyword">operator</span>+ (<span class="keyword">int</span> a)</span><br><span class="line">&#123; <span class="keyword">return</span> Complex(real+a ,imag);</span><br><span class="line">&#125;<span class="comment">// obj+100可以 100+obj不可以</span></span><br></pre></td></tr></table></figure>
<p>但是通过声明友元即可以解决这个问题，声明两个友元函数即可，即如果操作数希望有隐私类型转化，必须使用友元函数重载。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+（comp1 ex com，inta）/运算符+的左侧是类对象</span><br><span class="line">&#123;<span class="keyword">return</span> Complex（com.real+ a,com.imag）&#125;<span class="comment">//右侧是整数</span></span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+（inta，Complex com）<span class="comment">//运算符+的左侧是整数</span></span><br><span class="line">&#123;<span class="keyword">return</span> Complex（a+ com.real,com.imag）&#125;<span class="comment">//右侧是类对象</span></span><br></pre></td></tr></table></figure>
<ul>
<li>指针悬挂问题</li>
</ul>
<p>当使用自带的<code>=</code>的时候，指针赋值容易出现问题，那是因为，在使用析构函数进行回收内存的时候，会导致原来指针的空间被回收，<u><code>=</code>只能定义为成员函数</u></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">char</span> *ptr;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	~a()&#123;</span><br><span class="line">           <span class="keyword">delete</span> ptr;		<span class="comment">//如果这里没有delete，则这一块空间不会被回收，即使是该对象已经消亡</span></span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">a <span class="title">a1</span><span class="params">(..)</span>,<span class="title">a2</span><span class="params">(..)</span></span>;</span><br><span class="line">    a2=a1;	<span class="comment">//a2.ptr=a1.ptr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;	<span class="comment">//a2先消失，a1后消失，一定要记住</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何解决,使用成员函数重载（深层赋值）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">String &amp;String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ptr;<span class="comment">//释放空间，但是没有删除变量</span></span><br><span class="line">	ptr=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(x.ptr)+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(ptr,x.ptr);</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><u>下标运算符只能定义为成员函数</u></li>
</ul>
<h3 id="类型转化">类型转化</h3>
<ul>
<li>转化构造函数（<u>只能是类内构造函数</u>）,<font color='red'>没有说明返回类型</font></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">  a()&#123;&#125;;</span><br><span class="line">  a(<span class="keyword">double</span> r)&#123;	<span class="comment">//要转化的类型，转化构造函数</span></span><br><span class="line">      x=r,y=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>（1）转化构造函数只有一个参数，作用是将一个其他类型的数据转换成它所在类的对象</p>
<p>（2）转换构造函数不仅可以将一个系统预定义的标准类型数据转换成类的对象，也可以将另一个类的对象转换成转换构造函数所在的类对象。</p>
<ul>
<li>类型转化函数（<u>只能是类的成员函数</u>）<font color='red'>没有返回类型，只有<code>operator</code>关键字，无需参数表，但一定有<code>return</code>,记住了</font></li>
</ul>
<p>将类对象转化为另一类数据-&gt;类转化为其它数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span><span class="comment">//目标类型</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> real;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        ....</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span>(com) <span class="comment">//调用方式，注意这个和一般函数调用的区别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）类型转换函数<u>只能定义为一个类的成员函数而不能定义为类的友元函数</u>。类型转换函数也可以在类体中声明函数原型，而将函数体定义在类的外部</p>
<p>（2）类型转换函数既没有参数，也不能在函数名前面指定函数类型</p>
<p>（3）类型函数中必须有<font color='red'>
<strong>return</strong></font>语句，即必须送回目标类型的数据作为函数的返回值。</p>
<p>（4）一个类可以定义多个类型转换函数。C++编译器将根据类型转换函数名自动地选择一个合适的类型转换函数予以调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型转化隐式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    Complex(<span class="keyword">int</span> i);</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">a2</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span>,a3</span>;</span><br><span class="line">    a3=a1+a2;<span class="comment">//先调用类型转化函数，在调用转化构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="虚函数">虚函数</h3>
<p>虚函数是重载的另一种表现形式。这是一种动态的重载方式，它提供了一种更为灵活的运行时的多态性机制。属于动态联编</p>
<p>原来，在C++中规定：<u>基类的对象指针</u>可以指向它的公有派生的对象，但是当其指向公有派生类对象时，它<u><font color='red'>只能访问派生类中从基类继承来的成员</font></u>，而<u>不能访问公有派生类中定义的成</u>员。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    print1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>:</span><span class="keyword">public</span> a&#123;</span><br><span class="line">    print2()</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p=&amp;b;</span><br><span class="line">    p-&gt;print1();<span class="comment">//正确</span></span><br><span class="line">    p-&gt;print2();<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过基类的<font color='red'>指针</font>或者<font color='red'>引用</font>来访问同名函数，在派生类中重新定义时，其函数原型，包括函数类型、函数名、参数个数、参数类型的顺序，都必须与基类中的原型完全相同。不一样的话将直接调用基类的虚函数</p>
<p>（1）若在基类中，只声明虚函数原型（需加上
virtual），而在类外定义虚函数时，则不必再加 virtual</p>
<p>（2）<code>virtual</code>可写可不写，在子类中</p>
<p>（3）如果虚函数没有被重新定义，则自接继承父类虚函数</p>
<p>（3）虚函数<font color='red'>必须是类的成员函数</font>，<font color='red'>不能是友元函数</font>，不能是静态函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用调用虚函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>：<span class="title">public</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a &amp;qq=b;</span><br><span class="line">    a.print();<span class="comment">//具有虚函数的特点，调用class b的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>虚析构函数</li>
</ul>
<p>不能声明虚构造函数，但是可以声明虚析构函数，若是按照上面的a，b两个类</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    b obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//即调用先调用b的析构，在调用a的析构</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p;</span><br><span class="line">    p=<span class="keyword">new</span> b;</span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//只调用a的析构，不调用b的析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用虚析构函数，则可以达到先调用b的析构，再调用a的析构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a&#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~a()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p;</span><br><span class="line">    p=<span class="keyword">new</span> b;</span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//先调用b的析构，在调用a的析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虚函数是函数重载的另一种形式，但它不同于一般的函数重载。</p>
<p>普通的函数重载：其函数的参数或参数类型必须有所不同，函数的返回类型也可以不同。</p>
<p>虚函数：要求函数名、<font color='red'>返回类型</font>、参数个数、参数的类型和顺序与基类中的虚函数原型完全相同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ab</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">class b:<span class="keyword">public</span> a</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ab</span><span class="params">()</span><span class="comment">//普通函数重载，相当于函数重写</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>纯虚函数与抽象类</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>（1）不能建立抽象类对象，只能作为基类</p>
<p>（2）可以定义指针，指向子类，<font color='red'>不能作为参数类型，函数返回类型</font></p>
<h3 id="问题">问题</h3>
<p>1、什么是动态联编和静态联编？</p>
<p>​
静态联编是指<font color='red'>系统在编译时就决定如何实现某一动作</font>。静态联编要求在程序编译时就知道调用函数的全部信息，因此，这种联编类型的<font color='red'>函数调用速度很快。效率高</font>是静态联编的主要优点。
​
动态联编是指<font color='red'>系统在运行时动态实现某一动作</font>。采用这种联编方式，一直要到程序运行时才能确定调用哪个函数。动态联编的主要优点是：<font color='red'>提供了更好的灵活性、问题抽象性和程序易维护性</font>。</p>
<p>2、编译时的多态性与运行时的多态性有什么区别？它们的实现方法有什么不同？</p>
<p>【解】<font color='red'>静态联编支持的多态性称为编译时多态性</font>，也称静态多态性。在C++中，<font color='red'>编译时多态性是通过函数重载（包括运算符重载）和模板实现的</font>。利用函数重载机制，在调用同名的函数时，编译系统可根据实参的具体情况确立所要调用的是哪个函数</p>
<p>​
<font color='red'>动态联编所支持的多态性称为运行时多态性</font>，也称动态多态性。在C++中，运行时<font color='red'>多态性是通过虚函数</font>来实现的。</p>
<p>3、简述运算符重载的规则。</p>
<p>【解】C++语言对运算符重载制定了以下一些规则：</p>
<p>（1）C++中绝大部分的运算符允许重载，不能重载的运算符只有少数几个。</p>
<p>（2）C++语言中只能对已有的C++运算符进行重载，不允许用户自己定义新的运算符。</p>
<p>（3）运算符重载是针对新类型数据的实际需要，对原有运算符进行适当的改造完成的。一般来讲，重载的功能应当与原有的功能相类似（如用“+”实现加法，用“-”实现减法）</p>
<p>（4）重载不能改变运算符的操作对象（即操作数）的个数。</p>
<p>（5）重载不能改变运算符原有的优先级。</p>
<p>（6）重载不能改变运算符原有的结合特性。</p>
<p>（7）运算符重载函数的<font color='red'>参数至少应有一个是类对象</font>（或类对象的引用）。</p>
<p>（8）运算符重载函数可以是普通函数，也可以是类的成员函数，还可以是类的友元函数。</p>
<p>（9）一般而言，用于类对象的运算符必须重载，但是赋值运算符“=”例外，不必用户进行重载。但在某些情况下，例如数据成员中包含指向动态分配内存的指针成员时，使用系统提供的对象赋值运算符函数就不能满足程序的要求，在赋值时可能出现错误。在这种情况下，就需要用户自己编写赋值运算符重载函数。</p>
<p>【5.4】友元运算符重载函数和成员运算符重载函数有什么不同</p>
<p>【解】友元运算符重载函数和成员运算符重载函数的不同有以下几点：
（1）对双目运算符而言，成员运算符重载函数参数表中含有一个参数，而友元运算符重载函数参数表中含有两个参数；对单目运算符而言，成员运算符重载函数参数表中没有参数，而友元运算符重载函数参数表中含有一个参数
（2）双目运算符一般可以被重载为友元运算符重载函数或成员运算符重载函数，但有些情况，必须使用友元运算符重载函数，例如一个常数与一个对象相加。有的运算符（如=等）只能使用成员运算符重载函数</p>
<p>（3）成员运算符函数和友元运算符函数都可以用习惯方式调用，也可以用它们专用的方式调用。</p>
<p>【5.5】什么是虚函数？虚函数与函数重载有哪些相同点与不同点？</p>
<p>【解】虚函数就是在基类中被关键字
virtual说明，并在派生类中重新定义的函数。虚函数的作用是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数。</p>
<p>​
在一个派生类中重新定义基类的虚函数是函数重载的另一种形式，但它不同于一般的函数重载。当普通的函数重载时，其函数的参数或参数类型必须有所不同，函数的返回类型也可以不同。但是，当重载一个虚函数时，也就是说在派生类中重新定义虚函数时，要求函数名、返回类型、参数个数、参数的类型和顺序与基类中的虚函数原型完全相同。如果仅仅返回类型不同，其余均相同，系统会给出错误信息；若仅仅函数名相同，而参数的个数、类型或顺序不同，系统将它作为普通的函数重载，这时虚函数的特性将丢失</p>
<p>【5.6】什么是纯虚函数？什么是抽象类？</p>
<p>【解】纯虚函数是一个在基类中说明的虚函数，它在该基类中没有定义，但要求在它的派生类中定义自己的版本，或重新说明为纯虚函数。</p>
<p>​
声明纯虚函数的一般形式如下：<code>virtual 函数类型 函数名（参数表）=0</code>；纯虚函数的作用是在基类中为其派生类保留一个函数的名字，以便派生类根据需要对它进行重新定义。纯虚函数没有函数体，它最后面的“=0”并不表示函数的返回值为0，而只起形式上的作用，告诉编译系统“这是纯虚函数”。纯虚函数不具备函数的功能，不能被调用。</p>
<ul>
<li>当父类的构造函数为空时，可以不用在子类构造中调用父类构造函数，实际上系统会默认调用。</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>今日校园</title>
    <url>/2021/01/22/todaycomplus/</url>
    <content><![CDATA[<p>讨厌签到？动个歪脑筋吧😂</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>​
总的来说，我已经是第二次疫情在家了，本人的记性一直都不太好，去年寒假的时候，每天还有一位热心的姐姐每天打电话问候我，我到现在都十分感谢那位给我打了一个寒假+一个学期电话的姐姐，但是现在，由于姐姐不能再继续提醒我了，但是这个记性依然还是很烂呀，而且我们学校每天需要填写的信息都是一样的，没办法，只能在网上搜索了一下教程，终于找到了一个与之相关的GitHub项目——<a
href="https://github.com/ZimoLoveShuang/auto-submit">auto-submit</a></p>
<!-- more -->
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122211835.png" /></p>
<p>从上传的时间来看，这个项目已经有了大半年了，而且有400
star，毫不犹豫选择这个，这篇文章将会分为两个目的来给大家介绍，一个是小白上手，另一部分则是分享我整个的经历</p>
<h2 id="小白上手">小白上手</h2>
<p>​ 首先注册搜索并注册腾讯云</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213427.png" /></p>
<p>然后进入云函数</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213505.png" /></p>
<p>进入函数服务并且新建建云函数，自定义并且选择python 3.6</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213924.png" /></p>
<p>鼠标继续往下滑，将这里执行超时改成60s</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122214259.png" /></p>
<p>完成即可，如法炮制，新建一个层，随便输入一个名称，提交方法为默认（本地上传zip）并且将<a
href="https://ninglang.lanzous.com/i6nL3kpg1kh">dependency</a>
(点击即可下载)，添加 python3.6 的运行环境</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215107.png" /></p>
<p>找到刚才的函数服务，进入刚刚创建的创建函数，清空其中的代码并且将下面的代码复制到其中并且保存</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215436.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug模式</span></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取yml配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getYmlConfig</span>(<span class="params">yaml_file=<span class="string">&#x27;config.yml&#x27;</span></span>):</span></span><br><span class="line">    file = <span class="built_in">open</span>(yaml_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    file_data = file.read()</span><br><span class="line">    file.close()</span><br><span class="line">    config = yaml.load(file_data, Loader=yaml.FullLoader)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">config = getYmlConfig(yaml_file=<span class="string">&#x27;config.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取今日校园api</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">        url=<span class="string">&#x27;https://static.campushoy.com/apicache/tenantListSort&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">        new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br><span class="line">            <span class="comment">#print(one)</span></span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                params = &#123;</span><br><span class="line">                    <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                res = requests.get(url=<span class="string">&#x27;https://mobile.campushoy.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                                   verify=<span class="keyword">not</span> debug)</span><br><span class="line">                data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">                idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">                ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                    parse = urlparse(ampUrl)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">                ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                    parse = urlparse(ampUrl2)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前utc时间，并格式化为北京时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTimeStr</span>():</span></span><br><span class="line">    utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line">    bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line">    <span class="keyword">return</span> bj_dt.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出调试信息，并及时刷新缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(getTimeStr() + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(content))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆并返回session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSession</span>(<span class="params">user, loginUrl</span>):</span></span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;login_url&#x27;</span>: loginUrl,</span><br><span class="line">        <span class="comment"># 保证学工号和密码正确下面两项就不需要配置</span></span><br><span class="line">        <span class="string">&#x27;needcaptcha_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;captcha_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: user[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cookies = &#123;&#125;</span><br><span class="line">    <span class="comment"># 借助上一个项目开放出来的登陆API，模拟登陆</span></span><br><span class="line">    res = requests.post(config[<span class="string">&#x27;login&#x27;</span>][<span class="string">&#x27;api&#x27;</span>], params, verify=<span class="keyword">not</span> debug)</span><br><span class="line">    cookieStr = <span class="built_in">str</span>(res.json()[<span class="string">&#x27;cookies&#x27;</span>])</span><br><span class="line">    log(cookieStr)</span><br><span class="line">    <span class="keyword">if</span> cookieStr == <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">        log(res.json())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析cookie</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> cookieStr.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">        name, value = line.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        cookies[name] = value</span><br><span class="line">    session = requests.session()</span><br><span class="line">    session.cookies = requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询表单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryForm</span>(<span class="params">session, apis</span>):</span></span><br><span class="line">    host = apis[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 4.4.4; OPPO R11 Plus Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Safari/537.36 yiban/8.1.11 cpdaily/8.1.11 wisedu/8.1.11&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,en-US;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    queryCollectWidUrl = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/queryCollectorProcessingList&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&#x27;pageNumber&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = session.post(queryCollectWidUrl, headers=headers,</span><br><span class="line">                       data=json.dumps(params), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    collectWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;wid&#x27;</span>]</span><br><span class="line">    formWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;formWid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    detailCollector = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/detailCollector&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=detailCollector, headers=headers,</span><br><span class="line">                       data=json.dumps(&#123;<span class="string">&quot;collectorWid&quot;</span>: collectWid&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    schoolTaskWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;collector&#x27;</span>][<span class="string">&#x27;schoolTaskWid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    getFormFields = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/getFormFields&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=getFormFields, headers=headers, data=json.dumps(</span><br><span class="line">        &#123;<span class="string">&quot;pageSize&quot;</span>: <span class="number">100</span>, <span class="string">&quot;pageNumber&quot;</span>: <span class="number">1</span>, <span class="string">&quot;formWid&quot;</span>: formWid, <span class="string">&quot;collectorWid&quot;</span>: collectWid&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line"></span><br><span class="line">    form = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;collectWid&#x27;</span>: collectWid, <span class="string">&#x27;formWid&#x27;</span>: formWid, <span class="string">&#x27;schoolTaskWid&#x27;</span>: schoolTaskWid, <span class="string">&#x27;form&#x27;</span>: form&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写form</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillForm</span>(<span class="params">session, form, host</span>):</span></span><br><span class="line">    sort = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> formItem <span class="keyword">in</span> form[:]:</span><br><span class="line">        <span class="comment"># 只处理必填项</span></span><br><span class="line">        <span class="keyword">if</span> formItem[<span class="string">&#x27;isRequired&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            default = config[<span class="string">&#x27;cpdaily&#x27;</span>][<span class="string">&#x27;defaults&#x27;</span>][sort - <span class="number">1</span>][<span class="string">&#x27;default&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;title&#x27;</span>] != default[<span class="string">&#x27;title&#x27;</span>]:</span><br><span class="line">                log(<span class="string">&#x27;第%d个默认配置不正确，请检查&#x27;</span> % sort)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 文本直接赋值</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">1</span> <span class="keyword">or</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">5</span>:</span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = default[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">            <span class="comment"># 单选框需要删掉多余的选项</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 填充默认值</span></span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = default[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">                fieldItems = formItem[<span class="string">&#x27;fieldItems&#x27;</span>]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(fieldItems))[::-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">if</span> fieldItems[i][<span class="string">&#x27;content&#x27;</span>] != default[<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">del</span> fieldItems[i]</span><br><span class="line">            <span class="comment"># 多选需要分割默认选项值，并且删掉无用的其他选项</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">3</span>:</span><br><span class="line">                fieldItems = formItem[<span class="string">&#x27;fieldItems&#x27;</span>]</span><br><span class="line">                defaultValues = default[<span class="string">&#x27;value&#x27;</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(fieldItems))[::-<span class="number">1</span>]:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(defaultValues))[::-<span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">if</span> fieldItems[i][<span class="string">&#x27;content&#x27;</span>] == defaultValues[j]:</span><br><span class="line">                            <span class="comment"># 填充默认值</span></span><br><span class="line">                            formItem[<span class="string">&#x27;value&#x27;</span>] += defaultValues[j] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">                            flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">del</span> fieldItems[i]</span><br><span class="line">            <span class="comment"># 图片需要上传到阿里云oss</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">4</span>:</span><br><span class="line">                fileName = uploadPicture(session, default[<span class="string">&#x27;value&#x27;</span>], host)</span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = getPictureUrl(session, fileName, host)</span><br><span class="line">            log(<span class="string">&#x27;必填问题%d：&#x27;</span> % sort + formItem[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">            log(<span class="string">&#x27;答案%d：&#x27;</span> % sort + formItem[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">            sort += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            form.remove(formItem)</span><br><span class="line">    <span class="comment"># print(form)</span></span><br><span class="line">    <span class="keyword">return</span> form</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传图片到阿里云oss</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadPicture</span>(<span class="params">session, image, host</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/getStsAccess&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=url, headers=&#123;</span><br><span class="line">                       <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;, data=json.dumps(&#123;&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    datas = res.json().get(<span class="string">&#x27;datas&#x27;</span>)</span><br><span class="line">    fileName = datas.get(<span class="string">&#x27;fileName&#x27;</span>)</span><br><span class="line">    accessKeyId = datas.get(<span class="string">&#x27;accessKeyId&#x27;</span>)</span><br><span class="line">    accessSecret = datas.get(<span class="string">&#x27;accessKeySecret&#x27;</span>)</span><br><span class="line">    securityToken = datas.get(<span class="string">&#x27;securityToken&#x27;</span>)</span><br><span class="line">    endPoint = datas.get(<span class="string">&#x27;endPoint&#x27;</span>)</span><br><span class="line">    bucket = datas.get(<span class="string">&#x27;bucket&#x27;</span>)</span><br><span class="line">    bucket = oss2.Bucket(oss2.Auth(access_key_id=accessKeyId,</span><br><span class="line">                                   access_key_secret=accessSecret), endPoint, bucket)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    bucket.put_object(key=fileName, headers=&#123;</span><br><span class="line">                      <span class="string">&#x27;x-oss-security-token&#x27;</span>: securityToken&#125;, data=data)</span><br><span class="line">    res = bucket.sign_url(<span class="string">&#x27;PUT&#x27;</span>, fileName, <span class="number">60</span>)</span><br><span class="line">    <span class="comment"># log(res)</span></span><br><span class="line">    <span class="keyword">return</span> fileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片上传位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPictureUrl</span>(<span class="params">session, fileName, host</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/previewAttachment&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;ossKey&#x27;</span>: fileName</span><br><span class="line">    &#125;</span><br><span class="line">    res = session.post(url=url, headers=&#123;</span><br><span class="line">                       <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;, data=json.dumps(data), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    photoUrl = res.json().get(<span class="string">&#x27;datas&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> photoUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交表单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submitForm</span>(<span class="params">formWid, address, collectWid, schoolTaskWid, form, session, host</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 4.4.4; OPPO R11 Plus Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Safari/537.36 okhttp/3.12.4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CpdailyStandAlone&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;extension&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cpdaily-Extension&#x27;</span>: <span class="string">&#x27;Ew9uONYq03Siz+VLCzZ4RiWRaXXBubIGc1d7ecaS2YmSDf1+elDL0gdwAw977HbPzvgR3pkeyW3djmnPOMxYro3Tps7PNmLoqfNTAECZqcM1LAyx+2zTfDExNa4yDWs83AyTnSKXs7oHQvFOfXhKNY1OXVzIdnwOkgaNw7XxzM1+2efCWAJgUBoHNV3n3MayLqOwPvSCvBke+SHC/Hy/53+ehU9A1lst6JlpGiFhlEOUybo5s5/o+b/XLUexuEE50IQgdPL4Hi4vPe4yVzA8QLpIMKSFIaRm&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="comment"># 请注意这个应该和配置文件中的host保持一致</span></span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: host,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认正常的提交参数json</span></span><br><span class="line">    params = &#123;<span class="string">&quot;formWid&quot;</span>: formWid, <span class="string">&quot;address&quot;</span>: address, <span class="string">&quot;collectWid&quot;</span>: collectWid, <span class="string">&quot;schoolTaskWid&quot;</span>: schoolTaskWid,</span><br><span class="line">              <span class="string">&quot;form&quot;</span>: form,<span class="string">&quot;uaIsCpadaily&quot;</span>: <span class="literal">True</span>,<span class="string">&quot;appVersion&quot;</span>: <span class="string">&quot;8.2.14&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># print(params)</span></span><br><span class="line">    submitForm = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/submitForm&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    r = session.post(url=submitForm, headers=headers,</span><br><span class="line">                     data=json.dumps(params), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    msg = r.json()[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">title_text = <span class="string">&#x27;今日校园疫结果通知&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMessage</span>(<span class="params">send, msg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> send != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        log(<span class="string">&#x27;正在发送邮件通知。。。&#x27;</span>)</span><br><span class="line">        res = requests.post(url=<span class="string">&#x27;http://www.zimo.wiki:8080/mail-sender/sendMail&#x27;</span>,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;title&#x27;</span>: title_text, <span class="string">&#x27;content&#x27;</span>: getTimeStr() + <span class="built_in">str</span>(msg), <span class="string">&#x27;to&#x27;</span>: send&#125;)</span><br><span class="line"></span><br><span class="line">        code = res.json()[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> code == <span class="number">0</span>:</span><br><span class="line">            log(<span class="string">&#x27;发送邮件通知成功。。。&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log(<span class="string">&#x27;发送邮件通知失败。。。&#x27;</span>)</span><br><span class="line">            log(res.json())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span>(<span class="params">send,msg</span>):</span></span><br><span class="line">    my_sender= config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;account&#x27;</span>]   <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">    my_pass = config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]         <span class="comment"># 发件人邮箱密码</span></span><br><span class="line">    my_user = send      <span class="comment"># 收件人邮箱账号，我这边发送给自己</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg=MIMEText(getTimeStr() + <span class="built_in">str</span>(msg),<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        msg[<span class="string">&#x27;From&#x27;</span>]=formataddr([<span class="string">&quot;FromRunoob&quot;</span>,my_sender])  <span class="comment"># 括号里的对应发件人邮箱昵称、发件人邮箱账号</span></span><br><span class="line">        msg[<span class="string">&#x27;To&#x27;</span>]=formataddr([<span class="string">&quot;FK&quot;</span>,my_user])              <span class="comment"># 括号里的对应收件人邮箱昵称、收件人邮箱账号</span></span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>]=title_text               <span class="comment"># 邮件的主题，也可以说是标题</span></span><br><span class="line"></span><br><span class="line">        server=smtplib.SMTP_SSL(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;server&#x27;</span>], config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;port&#x27;</span>])  <span class="comment"># 发件人邮箱中的SMTP服务器，端口是25</span></span><br><span class="line">        server.login(my_sender, my_pass)  <span class="comment"># 括号中对应的是发件人邮箱账号、邮箱密码</span></span><br><span class="line">        server.sendmail(my_sender,[my_user,],msg.as_string())  <span class="comment"># 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span></span><br><span class="line">        server.quit()  <span class="comment"># 关闭连接</span></span><br><span class="line">    <span class="keyword">except</span> Exception:  <span class="comment"># 如果 try 中的语句没有执行，则会执行下面的 ret=False</span></span><br><span class="line">        log(<span class="string">&quot;邮件发送失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># server酱通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendServerChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    log(<span class="string">&#x27;正在发送Server酱。。。&#x27;</span>)</span><br><span class="line">    res = requests.post(url=<span class="string">&#x27;https://sc.ftqq.com/&#123;0&#125;.send&#x27;</span>.<span class="built_in">format</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;ServerChan&#x27;</span>]),</span><br><span class="line">                            data=&#123;<span class="string">&#x27;text&#x27;</span>: title_text, <span class="string">&#x27;desp&#x27;</span>: getTimeStr() + <span class="string">&quot;\n&quot;</span> + <span class="built_in">str</span>(msg)&#125;)</span><br><span class="line">    code = res.json()[<span class="string">&#x27;errmsg&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> code == <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Server酱通知成功。。。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Server酱通知失败。。。&#x27;</span>)</span><br><span class="line">        log(<span class="string">&#x27;Server酱返回结果&#x27;</span>+code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qmsg酱通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendQmsgChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    log(<span class="string">&#x27;正在发送Qmsg酱。。。&#x27;</span>)</span><br><span class="line">    res = requests.post(url=<span class="string">&#x27;https://qmsg.zendee.cn:443/send/&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Qsmg&#x27;</span>]),</span><br><span class="line">                            data=&#123;<span class="string">&#x27;msg&#x27;</span>: title_text + <span class="string">&#x27;\n时间：&#x27;</span> + getTimeStr() + <span class="string">&quot;\n 返回结果：&quot;</span> + <span class="built_in">str</span>(msg)&#125;)</span><br><span class="line">    code = res.json()[<span class="string">&#x27;success&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">        log(<span class="string">&#x27;发送Qmsg酱通知成功。。。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Qmsg酱通知失败。。。&#x27;</span>)</span><br><span class="line">        log(<span class="string">&#x27;Qmsg酱返回结果&#x27;</span>+code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合提交</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InfoSubmit</span>(<span class="params">msg, send=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">None</span> != send):</span><br><span class="line">        <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;enable&#x27;</span>]): sendEmail(send,msg)</span><br><span class="line">        <span class="keyword">else</span>: sendMessage(send, msg)</span><br><span class="line">    <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;ServerChan&#x27;</span>]): sendServerChan(msg)</span><br><span class="line">    <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Qsmg&#x27;</span>]): sendQmsgChan(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> config[<span class="string">&#x27;users&#x27;</span>]:</span><br><span class="line">            log(<span class="string">&#x27;当前用户：&#x27;</span> + <span class="built_in">str</span>(user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;username&#x27;</span>]))</span><br><span class="line">            apis = getCpdailyApis(user)</span><br><span class="line">            log(<span class="string">&#x27;脚本开始执行。。。&#x27;</span>)</span><br><span class="line">            log(<span class="string">&#x27;开始模拟登陆。。。&#x27;</span>)</span><br><span class="line">            session = getSession(user, apis[<span class="string">&#x27;login-url&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> session != <span class="literal">None</span>:</span><br><span class="line">                log(<span class="string">&#x27;模拟登陆成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在查询最新待填写问卷。。。&#x27;</span>)</span><br><span class="line">                params = queryForm(session, apis)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>(params) == <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;获取最新待填写问卷失败，可能是辅导员还没有发布。。。&#x27;</span>)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;没有新问卷&#x27;</span>)</span><br><span class="line">                    exit(-<span class="number">1</span>)</span><br><span class="line">                log(<span class="string">&#x27;查询最新待填写问卷成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在自动填写问卷。。。&#x27;</span>)</span><br><span class="line">                form = fillForm(session, params[<span class="string">&#x27;form&#x27;</span>], apis[<span class="string">&#x27;host&#x27;</span>])</span><br><span class="line">                log(<span class="string">&#x27;填写问卷成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在自动提交。。。&#x27;</span>)</span><br><span class="line">                msg = submitForm(params[<span class="string">&#x27;formWid&#x27;</span>], user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;address&#x27;</span>], params[<span class="string">&#x27;collectWid&#x27;</span>],</span><br><span class="line">                                 params[<span class="string">&#x27;schoolTaskWid&#x27;</span>], form, session, apis[<span class="string">&#x27;host&#x27;</span>])</span><br><span class="line">                <span class="keyword">if</span> msg == <span class="string">&#x27;SUCCESS&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;自动提交成功！&#x27;</span>)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;自动提交成功！&#x27;</span>, user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> msg == <span class="string">&#x27;该收集已填写无需再次填写&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;今日已提交！&#x27;</span>)</span><br><span class="line">                    <span class="comment"># InfoSubmit(&#x27;今日已提交！&#x27;, user[&#x27;user&#x27;][&#x27;email&#x27;])</span></span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;今日已提交！&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    log(<span class="string">&#x27;自动提交失败。。。&#x27;</span>)</span><br><span class="line">                    log(<span class="string">&#x27;错误是&#x27;</span> + msg)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;自动提交失败！错误是&#x27;</span> + msg, user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">                    exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log(<span class="string">&#x27;模拟登陆失败。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;原因可能是学号或密码错误，请检查配置后，重启脚本。。。&#x27;</span>)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        InfoSubmit(<span class="string">&quot;出现问题了！&quot;</span>+<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合Windows计划任务等使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(main_handler(&#123;&#125;, &#123;&#125;))</span><br><span class="line">    <span class="comment"># for user in config[&#x27;users&#x27;]:</span></span><br><span class="line">    <span class="comment">#     log(getCpdailyApis(user))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后在这个src目录新建一个文件，并且将它命名为<del>config.yaml</del>，这里写错了哈，图片上也错了（表现出我对yaml文件不熟悉😜）应该新建<code>config.yml</code></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215924.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210122220210760.png" /></p>
<p>将下面的<code>yaml</code>代码复制粘贴进去,并且将学号改为你自己的学号，密码改为你用学号登录的密码，地址改为你家的地址，如果你想需要<code>server酱</code>微信提醒，请点击<a
href="http://sc.ftqq.com/3.version">server 酱</a>,绑定微信和GitHub</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122220916.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122221753.png" /></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登陆相关配置</span></span><br><span class="line"><span class="attr">login:</span></span><br><span class="line">  <span class="comment">#开放的模拟登陆api服务器地址</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">&quot;http://www.zimo.wiki:8080/wisedu-unified-login-api-v1.0/api/login&quot;</span></span><br><span class="line"><span class="comment">#用户组配置</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="comment">#单个用户配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">      <span class="comment">#username 学号或者工号</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">#password 密码</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> </span><br><span class="line">      <span class="comment">#address 地址，定位信息</span></span><br><span class="line">      <span class="attr">address:</span> <span class="comment">#</span></span><br><span class="line">      <span class="comment">#email 接受通知消息的邮箱</span></span><br><span class="line">      <span class="attr">email:</span> <span class="comment">#</span></span><br><span class="line">      <span class="comment">#school 学校全称</span></span><br><span class="line">      <span class="attr">school:</span> <span class="string">燕山大学</span></span><br><span class="line"><span class="attr">cpdaily:</span></span><br><span class="line">  <span class="comment">#表单组默认选项配置</span></span><br><span class="line">  <span class="attr">defaults:</span></span><br><span class="line">    <span class="comment">#表单默认选项配置，按顺序，注意，只有标必填项的才处理</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#表单项类型，对应今日校园接口返回的fieldType字段，1代表文本，2代表单选，3代表多选，4代表图片</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#表单项标题</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">晨检体温℃</span></span><br><span class="line">        <span class="comment">#表单项默认值</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">36.5</span><span class="string">度</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">午检体温℃</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">36.5</span><span class="string">度</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">本人身体状况</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">健康</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">家庭成员身体状况</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">健康</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)有城际移动</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)去医院就诊</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">近十四天(是/否)接触过来自疫情高风险、中风险地区、境外或者去过疫情高风险、中风险地区、境外的亲友</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)有新型冠状病毒感染的肺炎确诊或疑似病例接触史</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">是否被集中隔离</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">寒假离校返家后是否已经做过核酸检测</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">是</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">核酸检测结果如何</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">阴性</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">未完成核酸检测的原因</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">已完成核酸检测</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Info:</span></span><br><span class="line">  <span class="attr">ServerChan:</span> <span class="comment">#</span></span><br><span class="line"><span class="comment"># 填写Server酱的SCKEY</span></span><br><span class="line">  <span class="attr">Qsmg:</span> <span class="comment"># 填写Qsmg酱的SCKEY</span></span><br><span class="line">  <span class="attr">Email:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">smtp.exmail.qq.com</span> <span class="comment"># 填写邮件的smtp服务器</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span> <span class="comment"># 填写邮件服务器的端口号</span></span><br><span class="line">    <span class="attr">account:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 邮件服务器登录用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 邮件服务器登录密码</span></span><br></pre></td></tr></table></figure>
<p>上面代码需要修改的地方有这几点（<code>注意</code>
：1.<code>yaml</code>语法格式的原因，修改内容时应该从冒号后面空一格开始，如下面举的例子
2.填写学号和密码应该填在单引号的里面
3.不同学院的收集内容可能不同，因此需要修改上面的问题）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">school:</span> <span class="string">燕山大学</span> <span class="comment">#这里冒号和燕山大学之间有一个空格</span></span><br></pre></td></tr></table></figure>
<p><code>type</code>的值为2时，说明这道题是一道单选题，为1时，说明这是一道填空题;注意，在设置温度时，一定要带上度，这样它就是一个<code>string</code>类型，不是一个<code>int</code>类型</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">	<span class="attr">title:</span> <span class="string">(是/否)去医院就诊</span></span><br><span class="line">	<span class="attr">value:</span> <span class="string">否</span></span><br></pre></td></tr></table></figure>
<p>改好这个<code>config.yml</code>后，保存，并且部署，点击上面的层管理，再点击绑定选择刚才<code>nihao</code>(我的是<code>nihao</code>，你的取决于你当时取得名字啦)确定即可</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122225608.png" /></p>
<p>然后选择左边的触发管理-&gt;创建触发器，配置如下图，如果想要选其他时间(每个学院发布收集的时间不一致嘛)，请您观察规律，自行修改😂，不建议选整点，因为其实这是GitHub上那位大佬的服务器，选整点的人多了，自然服务器也累😂，效果也不好，做完这些提交就行啦！</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122224510.png" /></p>
<p>好的，现在我们可以回到刚刚修改代码的的地方，点击一下测试</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122225929.png" /></p>
<p>您得到的日志可能是这样子的，这表示您可能成功了，也可能没成功，因此，真正是否成功，还是要等到导员发了信息采集才可以，令人满意的效果应该像这种样子</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122230439.png"
alt="这是我第一次通过本地成功时的截图" />
<figcaption
aria-hidden="true">这是我第一次通过本地成功时的截图</figcaption>
</figure>
<p>OK，如果您已经完成这些，那么您就应该成功（当然，希望您还是再观察几天，以免出错），如果没有成功，欢迎在下方留言(留言无需注册，留个mail就行，留言支持图片，直接将图片拖拽进去就行)，如果你想要感谢这个项目，请点击这里:<a
href="https://github.com/ZimoLoveShuang/auto-submit">auto-submit</a>赞助它的原作者即可,下面我分享一下的我在将这个项目修改的时遇到的一些bug（小白直接跳过）</p>
<h2 id="过程分享">过程分享</h2>
<p>我本来在了解这个项目时，我对腾讯云函数并不了解，于是首先我尝试在本地先测试一下，在安装python的第三方库时，各种报错，这里我十分建议将源换成清华源，然后关掉所有代理，如果wifi下载失败，建议改用流量。我本以为只要改<code>config.yml</code>里的内容就行，但无奈又报错了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122233526.png" /></p>
<p>观察日志最后，发现是requests超时<code>Max retries exceeded with url: /v6/config/guest/tenant/list</code>
又由上面的位置可知，这个url在<code>index.py</code>里，于是我找到了这一行，复制了url在chrome里访问了一下</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122234002.png" /></p>
<p>显然url失效了，上网搜了一下，原来由于作者更新过时，最后在csdn里面找到了两个新的网址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://static.campushoy.com/apicache/tenantListSort</span><br><span class="line">https://mobile.campushoy.com/v6/config/guest/tenant/info?ids=ysu</span><br></pre></td></tr></table></figure>
<p>但是很不幸，网址一返回的json文件是字典里data的<code>value</code>是列表，而且列表里还有字典，字典里有datas，而这里<code>requests.get</code>的schools的遍历无法满足下面的判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取今日校园api</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">        url=<span class="string">&#x27;https://www.cpdaily.com/v6/config/guest/tenant/list&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> schools:</span><br><span class="line">        <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;joinType&#x27;</span>] == <span class="string">&#x27;NONE&#x27;</span>:</span><br><span class="line">                log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未加入今日校园&#x27;</span>)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            res = requests.get(url=<span class="string">&#x27;https://www.cpdaily.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                               verify=<span class="keyword">not</span> debug)</span><br><span class="line">            data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">            joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">            idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">            ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                parse = urlparse(ampUrl)</span><br><span class="line">                host = parse.netloc</span><br><span class="line">                res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                parse = urlparse(res.url)</span><br><span class="line">                apis[</span><br><span class="line">                    <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">            ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                parse = urlparse(ampUrl2)</span><br><span class="line">                host = parse.netloc</span><br><span class="line">                res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                parse = urlparse(res.url)</span><br><span class="line">                apis[</span><br><span class="line">                    <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是我就想着给它剥洋葱了😂，搜了一些剥洋葱的教程后，代码这样了（其实很简单，大家也不要随便放弃哟！）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">    url=<span class="string">&#x27;https://static.campushoy.com/apicache/tenantListSort&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">        new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br><span class="line">            <span class="comment">#print(one)</span></span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                params = &#123;</span><br><span class="line">                    <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                res = requests.get(url=<span class="string">&#x27;https://mobile.campushoy.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                                   verify=<span class="keyword">not</span> debug)</span><br><span class="line">                data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">                idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">                ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                    parse = urlparse(ampUrl)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">                ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                    parse = urlparse(ampUrl2)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改的其实只是这里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">       new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">       <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br></pre></td></tr></table></figure>
<p>遇到的第二个大问题首先是我以为原作者采用的是findall直接找出关键字，但是当我偷懒只写了一些字符时，又报错了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123000529.png" /></p>
<p>我只好乖乖将那个问题都填完整（您知道的，有的问题真的好长，打字也容易错），后来改完上传时，表是填完了，但是上传失败。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123000835.png" /></p>
<p>这时候我有点绝望了，我看到GitHub作者上issue的问题，可惜大家大多数用的都是通用方法：cookie登录，电脑安装逍遥模拟器，然后装
xposed
，电脑fiddler抓包（但是我以前下载过逍遥，体验不好，不想再下载了），issue里面大多数都是说那个加密问题，但是我上文的这种方式其实不完全是模拟app，刚开始我以为是<code>post</code>时没有加上咋们的那个地址没有经纬度的原因，但是我加上去没有效果，于是我打算将通用方法的<code>user</code>移植过来（下面为通用的<code>config.yml</code>）,但是加了还是不行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="comment">#username 学号或者工号</span></span><br><span class="line">  <span class="attr">username:</span> </span><br><span class="line">  <span class="comment">#tellphone 电话号码</span></span><br><span class="line">  <span class="attr">tellphone:</span> </span><br><span class="line">  <span class="comment">#address 地址，定位信息</span></span><br><span class="line">  <span class="attr">address:</span> </span><br><span class="line">  <span class="comment">#email 接受通知消息的邮箱</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">  <span class="comment">#lon 当前位置经度，可以访问http://zuobiao.ay800.com/s/27/index.php获取</span></span><br><span class="line">  <span class="attr">lon:</span> <span class="string">&#x27;14.300060&#x27;</span></span><br><span class="line">  <span class="comment">#lat 当前位置纬度</span></span><br><span class="line">  <span class="attr">lat:</span> <span class="string">&#x27;332.880656&#x27;</span></span><br><span class="line">  <span class="comment">#school 学校全称</span></span><br><span class="line">  <span class="attr">school:</span> <span class="string">燕山大学</span></span><br><span class="line"><span class="comment">#今日校园相关配置</span></span><br></pre></td></tr></table></figure>
<p>所以没有那么那一步后来再那个issue里看到了一位大佬分享的版本密钥，于是我抱着侥幸的心理，修改了一下index.py，成功了。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123001629.png" /></p>
<hr />
<h2 id="server-酱">Server 酱</h2>
<p>​
不知道是我的设置问题还是别的什么问题，在写完这篇教程后的一天，我的server
酱就<code>post</code>成功不了了，但是我在本地测试，也就是用我电脑自带的<code>python3.9</code>却可以成功,我原以为是第三方库的问题，因为我同学也向我反映过这个问题，但是我还是认为它报错存在问题，因为整个<code>index.py</code>中依赖了许多库，如果不能够引入那些库，就不可能完成整个填报，而我只是出现了无法让Server
酱通知</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125161400.png" /></p>
<p>​
我最近在家里尝试很多次，但是都没有结果，甚至出现了一件让我感到很amazing的事情，就是我点击运行，它能够post成功，但是我点击测试，他就无法成功。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162100.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162127.png" /></p>
<p>这让我百思不得其解，也让我忧心忡忡，因为如果某一天失败了（或者老师改了问卷），但我却不知道，那岂不是糟糕了，通知还是必要的呀，我想过用短信api来代替，但是又要注册啥的，我就算了，恰好今天看到了一个可以代替Server
酱——<a
href="https://work.weixin.qq.com/">企业微信</a>(点击跳转注册)，注册完成后在app
management里新建一个app</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162732.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125164912.png" /></p>
<p>记住下面这两个参数然后点击<code>My Company</code>
记住<code>Company ID</code></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125165120.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125170105.png" /></p>
<p>点击<code>wechat workplace</code>然后微信扫描这个二维码即可绑定应用。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125170149.png" /></p>
<p>然后在<code>config.yml</code>最后一行里面加上这个三个参数格式如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AgentId:</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">Secret:</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">CompanyId:</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>在<code>index.py</code>中找到<code>sendServerChan</code>将这个函数替换为下面代码，配置即可成功，</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125165818.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendServeChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    url=<span class="string">&#x27;https://api.htm.fun/api/Wechat/text_card/&#x27;</span></span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;corpid&#x27;</span>:config[<span class="string">&#x27;CompanyId&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;corpsecret&quot;</span>:config[<span class="string">&#x27;Secret&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;agentid&quot;</span>:config[<span class="string">&#x27;AgentId&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;title&quot;</span>:<span class="string">&quot;今日校园&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>:<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url=url,data=data)</span><br></pre></td></tr></table></figure>
<p>OK，如果这些都配置好了，那么你的wechat应该就可以收到信息了</p>
<h2 id="总结">总结</h2>
<p>​
至此，这个有趣的项目就弄完了，虽然在一天半时间，这个过程中我曾想过放弃很多次，但是考虑到每天填那个表，还是坚持了下载，但终究还是我运气好，就成功了，欢迎大家有问题啥的留言呀😂，最后分享一下喜悦</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123003023.png" /></p>
<p>如果还想实现其他的功能建议自己去探索哟，比如拍照签到，因为我没有相关的条件（没有拍照签到的任务，无法测试😂）</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
</search>
