<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Adb Command</title>
    <url>/2021/10/24/Android-Adb-Command/</url>
    <content><![CDATA[<p>安卓小技巧</p>
<span id="more"></span>
<h1 id="recovery-模式下使用adb">recovery 模式下使用adb</h1>
<p>首先在电脑中找到<code>adbkey.pub</code>文件，我的默认地址是<code>.android</code>,通过一些手段移入安卓设备的一个分区<code>/data/misc/adb/</code>的<code>adb_keys</code>文件中，下面是push的的方法，当然也可以用第三方<code>rec</code>直接导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ~/.android/adbkey.pub /data/misc/adb/adb_keys</span><br></pre></td></tr></table></figure>
<p>wifi连接adb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect ip:5555</span><br></pre></td></tr></table></figure>
<p>断开连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb disconnect ip:5555</span><br></pre></td></tr></table></figure>
<h1 id="备份文件">备份文件</h1>
<p>备份文件的方法主要用<code>adb pull</code>，这里以<code>tim</code>为例，可以这样做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /data/data/com.tencent.tim ./tim</span><br></pre></td></tr></table></figure>
<p>切记，备份时最好用linux操作系统，Windows总是会有一些莫名的错误,备份安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /data/app/  ./app</span><br></pre></td></tr></table></figure>
<p>备份<code>sdcard</code>的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull ./sdcard/Android/data/com.tencent.tim ./com.tencent.tim </span><br></pre></td></tr></table></figure>
<p>使用脚本备份文件,下载下面的<a
href="https://ninglang.lanzoui.com/iHmmuvpiygj">脚本</a>，将备份的文件导入电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb pull /storage/emulated/0/back/ ./back</span><br></pre></td></tr></table></figure>
<p><a
href="https://picturnl.oss-cn-shanghai.aliyuncs.com/contacts.csv">联系人备份</a></p>
<h1 id="恢复app">恢复App</h1>
<p>微信等软件不支持降级，可以先用下面命令将数据传入（需要在安装magisk之后）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push ./tim /data/com.tencent.tim </span><br></pre></td></tr></table></figure>
<p>然后使用下面的语句对应用进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb install ./tim.apk</span><br></pre></td></tr></table></figure>
<p>登录时可能会报错，这时可以采用<code>TitaniumBackup</code>对这个软件备份，卸载整个软件，数据，用<code>TitaniumBackup</code>恢复应用程序</p>
<p>卸载app但保留数据和缓存文件：</p>
<p><code>adb shell pm uninstall -k 包名</code></p>
<h2 id="恢复data的app">恢复data的app</h2>
<p>首先安装apk，打开，然后用push将data push到手机中去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">push ./mm/* /data/data/com.tencent.mm</span><br></pre></td></tr></table></figure>
<p>微信降级</p>
<p>首先，将<code>data</code>
push之后，应该可以看到最新版本的微信的聊天记录是<code>data</code>里面的,然后，使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall -k com.tencent.mm</span><br></pre></td></tr></table></figure>
<p>重新启动手机</p>
<p>然后使用adb安装软件（微信）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb install weixing.apk</span><br></pre></td></tr></table></figure>
<p>可以完成无需登录的降级</p>
<h2 id="钛备份恢复文件">钛备份恢复文件</h2>
<p>之前之所以没有用钛备份，是考虑到钛备份没有一些很必要的功能，例如，我的微信的语音、以及图片，都没有办法备份，现在，只需要开启钛备份中设置的<code>preferences-&gt;backup app external data-&gt;enabled(always)</code>.就可以，这事，就会备份语音，而且，在微信等软件的高版本的情况下，可以直接使用钛备份使用恢复历史版本仅<code>APP</code>即可。</p>
<h1 id="输入内核">输入内核</h1>
<p>首先，将内核文件<code>*.zip</code>移动到手机中，然后用在用<code>twrp</code>对它进行刷入，直接刷入即可</p>
<h1 id="adb-su">adb su</h1>
<p>adb su由于某些原因打不开，这时候要强制打开使用这个<a
href="https://github.com/evdenis/adb_root">链接</a>中release中的zip,然后用面具刷入，即可</p>
<p>然后使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br></pre></td></tr></table></figure>
<p>即可完成整个提权，文件读写权限</p>
<h1 id="magisk">Magisk</h1>
<ol type="1">
<li>先下载<code>HttpCanary</code>，<a
href="https://ninglang.lanzoup.com/iOlriyzokud">点击下载</a>,再用这个命令对证书进行移动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -f /data/misc/user/0/cacerts-added/12abc345.0 <span class="variable">$MODDIR</span>/system/etc/security/cacerts</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>禁止某个ip（magisk20.3）:下载<a
href="">ipforbidden</a>模块，刷入，即可</li>
</ol>
<h1 id="开机模式下软件操作">开机模式下软件操作</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure>
<p>可以加上查询字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages | grep <span class="string">&#x27;miui&#x27;</span></span><br></pre></td></tr></table></figure>
<p>获取<code>root</code>权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure>
<p>保留数据卸载,此方法可用于微信降级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb  uninstall -k com.tencent.tim</span><br></pre></td></tr></table></figure>
<p>安装apk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb  install  com.tencent.tim</span><br></pre></td></tr></table></figure>
<h1 id="安卓分区">安卓分区</h1>
<ul>
<li><p>system</p>
<p>这个分区无所谓，每次刷机刷的就是这个</p></li>
<li><p>data</p>
<p>这个分区就是软件数据放的地方，小心格式化</p></li>
<li><p>persist</p>
<p>储存账户密码，如果这个分区损坏，会出现储存读取错误，使用官方的线刷包中的persist即可以恢复。</p></li>
<li><p>vendor</p></li>
<li><p>recovery</p>
<p>这个是在fastboot模式下刷入的分区</p></li>
<li><p>boot</p></li>
<li><p>cache</p>
<p>这个分区只是具有记录功能，擦除不影响使用，不会影响任何数据</p></li>
<li><p>misc</p>
<p>这个分区是放硬件配置信息的，USB，adb</p></li>
<li><p>sdcard</p>
<p>这个分区就是存储卡分区，没什么特别的</p></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>C &amp;&amp; C++ (1)</title>
    <url>/2021/09/03/C_C++/</url>
    <content><![CDATA[<p>describe some differences between c and c++,(Function Union and
Quote)</p>
<span id="more"></span>
<h1 id="function">Function</h1>
<ul>
<li><p>Function declaration</p>
<p>if Function declaration's parameter is empty of
<code>void</code>,This two declaration in c++ are same :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f();				<span class="comment">//This function don&#x27;t carray any parameters</span></span><br><span class="line">f(<span class="keyword">void</span>);			<span class="comment">//This function don&#x27;t carray any parameters</span></span><br></pre></td></tr></table></figure>
<p>but they are different in c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f(<span class="keyword">void</span>);			<span class="comment">//This function don&#x27;t carray any parameters</span></span><br><span class="line">f();				<span class="comment">//Don&#x27;t give the information of parameters ,It have chance to carrary 						//paramters</span></span><br></pre></td></tr></table></figure></li>
<li><p>Macro definition</p>
<p>Macro definition may cause some error that we can't expect ,for
example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> doub(x) x*2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; doubled is &quot;</span>&lt;&lt;doub(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1+2 doubled is &quot;</span>&lt;&lt;doub(<span class="number">1</span>+<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in line 8 ,we are expecting the result is :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">2</span> doubled is <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>but in fact ,the result is :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">2</span> <span class="keyword">double</span> is <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>because the macro definition is replace the expression in the place
where it is called :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1+2 doubled is &quot;</span>&lt;&lt;doub(<span class="number">1</span>+<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1+2 doubled is &quot;</span>&lt;&lt;<span class="number">1</span>+<span class="number">2</span>*<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>Inline function</p>
<p>to avoid the unsafe of Marco definition ,We can use inline function
to replace the macro function to achieve more safe :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">doub</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; doubled is &quot;</span>&lt;&lt;doub(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1+2 doubled is &quot;</span>&lt;&lt;doub(<span class="number">1</span>+<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">doub</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>function with default value of parameters</p>
<p>the parameters with default value must be in the right of parameters
with no initial value:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> j=<span class="number">5</span>,<span class="keyword">int</span> k)</span></span>;     <span class="comment">//incorrect </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k=<span class="number">5</span>)</span></span>;      <span class="comment">//correct</span></span><br></pre></td></tr></table></figure></li>
<li><p>Function Overloading</p>
<p>The same function name can be used to define different tasks</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">square</span><span class="params">(<span class="keyword">long</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">long</span> j =<span class="number">1234</span>;</span><br><span class="line">    <span class="keyword">double</span> k =<span class="number">1.23</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;int i&#x27;quare is &quot;</span>&lt;&lt;square(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;long j&#x27;s quare is &quot;</span>&lt;&lt;square(j)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;double k&#x27;s quare is &quot;</span>&lt;&lt;square(k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if only the type of return is not the same ,the numbers of parameter
and the type of parameters is same,The function couldn't be
overloaded:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nihao</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nihao</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;     <span class="comment">//That is incorrect ,because only the type of return is not the same </span></span><br></pre></td></tr></table></figure>
<p>if the overloading function with default value parameter, it can be
incorrect :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nihao</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nihao</span><span class="params">(<span class="keyword">int</span> a)</span></span>;				<span class="comment">//This is also incorrect the compiler can&#x27;t decide which function should be choosed </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="scope-operator">Scope operator ::</h1>
<ul>
<li><p>Priority</p>
<p>Local variables have higher priority than global variables</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> avar =<span class="number">10</span>;			<span class="comment">//global variable</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> avar=<span class="number">3</span>;			<span class="comment">//local variable</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;avar is &quot;</span>&lt;&lt;avar&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if global variables wants to be called in function ,we can add
<code>::</code> in the front of variables</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;local variable&quot;</span>&lt;&lt;avar&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;global variable&quot;</span>&lt;&lt;::avar&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="union">Union</h1>
<ul>
<li><p>What is the Union</p>
<p>Union is a custom type ,we can create union in two way in c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">double</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//second way</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">double</span> f;</span><br><span class="line">&#125;a,b,c;</span><br></pre></td></tr></table></figure>
<p>union's space is the largest memory footprint of all member
,<code>int</code>,<code>char</code>,<code>double</code>,the double's
memory footprint is largest ,so the union data's memory footprint is 8
bits(the size of <code>double</code>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">data</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="keyword">short</span> m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">data</span> <span class="title">a</span>;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,<span class="keyword">sizeof</span>(a),<span class="keyword">sizeof</span>(<span class="keyword">union</span> data));</span><br><span class="line">	a.n = <span class="number">0x40</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%X,%c,%hX\n&quot;</span>,a.n,a.ch,a.m);</span><br><span class="line">	a.ch =<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%X,%c,%hX\n&quot;</span>,a.n,a.ch,a.m);</span><br><span class="line">	a.m = <span class="number">0x2059</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%X,%c,%hX\n&quot;</span>,a.n,a.ch,a.m);</span><br><span class="line">	a.n =<span class="number">0x3e25ad54</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%X,%c,%hX\n&quot;</span>,a.n,a.ch,a.m);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>you may get the result as follows:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>,<span class="number">4</span></span><br><span class="line"><span class="number">40</span>,@,<span class="number">40</span></span><br><span class="line"><span class="number">39</span>,<span class="number">9</span>,<span class="number">39</span></span><br><span class="line"><span class="number">2059</span>,Y,<span class="number">2059</span></span><br><span class="line"><span class="number">3E25</span>AD54,T,AD54</span><br></pre></td></tr></table></figure>
<p>so the result prove that union members will have Influence each
other, if you change one member's value ,the other member's value is
changed</p></li>
<li><p>How to store data</p>
<p>Union 's data is shared for all member ,so one of they is changed
,others will be effected,but the process is how to go</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210903113323946.png" /></p></li>
<li><p>Using union</p>
<p>student information and teacher information is recorded by the same
struct ,but some place are different,for example:</p>
<table>
<thead>
<tr class="header">
<th>name</th>
<th>Num</th>
<th>Sex</th>
<th>Profession</th>
<th>Score/course</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>1</td>
<td>f</td>
<td>s</td>
<td>89</td>
</tr>
<tr class="even">
<td>B</td>
<td>2</td>
<td>m</td>
<td>t</td>
<td>math</td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">40</span>];</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> sex;</span><br><span class="line">	<span class="keyword">char</span> pro;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">d</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> score;</span><br><span class="line">		<span class="keyword">char</span> course[<span class="number">10</span>];</span><br><span class="line">	&#125;sc;</span><br><span class="line">&#125; bodys[NUM];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Please input info:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s %d %c %c&quot;</span>,&amp;bodys[i].name,&amp;bodys[i].num,&amp;bodys[i].sex,&amp;bodys[i].pro);</span><br><span class="line">		<span class="keyword">if</span> (bodys[i].pro == <span class="string">&#x27;s&#x27;</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;bodys[i].sc.score);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n%s\t%d\t%c\t%c\t%d&quot;</span>,</span><br><span class="line">                   bodys[i].name,bodys[i].num,bodys[i].sex,bodys[i].pro,bodys[i].sc.score);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;bodys[i].sc.course);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n%s\t%d\t%c\t%c\t%s&quot;</span>,</span><br><span class="line">                   bodys[i].name,bodys[i].num,bodys[i].sex,bodys[i].pro,bodys[i].sc.course);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="quote">Quote</h1>
<ul>
<li><p>definition</p>
<p>give variables a another name after quoted ,the two variables are
equivalent when one of them changed ,the other will change</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;j = i;		<span class="comment">//delcare j is a integer quote ,and initialize j with i</span></span><br></pre></td></tr></table></figure>
<p>but j definited in following way is not allowed:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> &amp;j;			<span class="comment">//incorrect j is not linked some variables</span></span><br><span class="line">j = i;</span><br></pre></td></tr></table></figure></li>
<li><p>quote and pointer</p>
<p>quote is another name for a variable ,but pointer is a tool pointing
to variable</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">15</span>;</span><br><span class="line">	<span class="keyword">int</span> *iptr=&amp;i;			<span class="comment">//define a pointer </span></span><br><span class="line">	<span class="keyword">int</span> &amp;rptr = i;			<span class="comment">//define a quote </span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;I is &quot;</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*iptr is  &quot;</span>&lt;&lt;*iptr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rptr is &quot;</span>&lt;&lt;rptr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	i=<span class="number">29</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;After changing i to 29:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;i is &quot;</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;*iptr is  &quot;</span>&lt;&lt;*iptr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;rptr is &quot;</span>&lt;&lt;rptr&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>quote: No need <code>&amp;</code> ,pointer : Need <code>*</code>
.</p></li>
<li><p>warn</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i,k;</span><br><span class="line"><span class="keyword">int</span> &amp;j =i;</span><br><span class="line">j =&amp;k;   		<span class="comment">//incorrect , delcare j is the quotation of k is not allowed </span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> &amp;r = <span class="number">10</span>; 	<span class="comment">//incorrect, void type is not allow </span></span><br><span class="line"><span class="keyword">int</span> &amp;r = <span class="number">10</span> ; 	<span class="comment">//incorrect,can&#x27;t assign quote &quot;r&quot; with value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//can&#x27;t quote array</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>] = <span class="string">&quot;amd&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;a[<span class="number">4</span>] = a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//can&#x27;t define quotation to quotation</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;&amp; r =n;</span><br><span class="line"><span class="keyword">int</span> &amp;*p = n;</span><br></pre></td></tr></table></figure></li>
<li><p>used as parameters of function</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp =a;</span><br><span class="line">	a =b;</span><br><span class="line">	b =temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">5</span>,b=<span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b;</span><br><span class="line">	swap(a,b);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>quotation is used as formal parameter for function variable
transfer,but it seem that we have really passed a,b into the function
"swap"</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">index</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	index(<span class="number">1</span>)=<span class="number">100</span>;		<span class="comment">//in fact ,because the return of funciton is not a number ,but a[i]</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;a[1]=&quot;</span>&lt;&lt;a[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">index</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>C&amp;&amp;C++问题总汇(1)</title>
    <url>/2021/09/20/C&amp;&amp;C++%E9%97%AE%E9%A2%98%E6%80%BB%E6%B1%87(1)/</url>
    <content><![CDATA[<p>C&amp;&amp;C++问题总汇🙄</p>
<span id="more"></span>
<h1 id="二维数组">二维数组</h1>
<p>定义一个二维数组如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;, &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125; &#125;;</span><br></pre></td></tr></table></figure>
<p>如果采用一个指针去指向这个数组，可以这么做:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>]=a; <span class="comment">//4代表了一行有多少个元素</span></span><br></pre></td></tr></table></figure>
<p>其中<code>*p</code>要加括号，因为不加括号就是指针数组,而且但是，这时候的<code>*p</code>（p指针指向的数据不在是一个<code>int</code>的数，而是一个数组，代表的是第i行的所有元素）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sizeof</span>(*p);</span><br><span class="line">Output: <span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>那么访问这个二维数组的指针方法是:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[i][j]=*(*(p+i)+j);</span><br></pre></td></tr></table></figure>
<p>当然，下面这种方式也对(和一维数组的指针一样)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a[i][j]=p[i][j];</span><br></pre></td></tr></table></figure>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/Y7D20b8621AY6CYryYagUED1.jpg" alt="Y7D20b8621AY6CYryYagUED1" style="zoom: 33%;" /></p>
<ul>
<li>指针数组是这样子的吗？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *strs[<span class="number">3</span>] =&#123;<span class="string">&quot;chinese&quot;</span>,<span class="string">&quot;zhonguo&quot;</span> &#125; ;<span class="comment">//3代表两个string元素，一个&#x27;\0&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里使用的就是指针数组,所以这里是3（数组中元素的个数+1），而上面的那个是4数组个每个元素的下一级个数。</p>
<h2 id="二维数组赋值的问题">二维数组赋值的问题</h2>
<ul>
<li>二维数组有两个维度，当然可以按照一个一个去赋值，但那样毕竟太慢，所以有没有更好的赋值方法呢？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> q[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b1[][<span class="number">2</span>]=&#123;&#123;q[<span class="number">0</span>],q[<span class="number">1</span>]&#125;,&#123;q[<span class="number">3</span>],q[<span class="number">4</span>]&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>这是我现在使用的方法，并不是十分的好，希望有所改进</p>
<ul>
<li>友元函数访问私有成员问题</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//习题5-18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//报错，a[2][2]是私有成员，不可在operator中访问</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		List(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k ,<span class="keyword">int</span> m)&#123;</span><br><span class="line">			a[<span class="number">0</span>][<span class="number">0</span>]=i,a[<span class="number">0</span>][<span class="number">1</span>]=j,a[<span class="number">1</span>][<span class="number">0</span>]=k,a[<span class="number">1</span>][<span class="number">1</span>]=m;</span><br><span class="line">		&#125;</span><br><span class="line">		List(<span class="keyword">int</span> (*p)[<span class="number">2</span>])&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					a[i][j]=p[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		List()&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">operator</span>+(List &amp;a,List &amp;b);</span><br><span class="line">		<span class="keyword">friend</span> <span class="keyword">operator</span>-(List &amp;a,List &amp;b);</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[<span class="number">0</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[<span class="number">1</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[<span class="number">1</span>][<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line">List <span class="keyword">operator</span>+(List a,List b)&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					c[i][j]=a.a[i][j]+b.a[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> List(c);</span><br><span class="line">&#125;</span><br><span class="line">List <span class="keyword">operator</span>-(List &amp;a,List &amp;b)&#123;</span><br><span class="line">	<span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)&#123;</span><br><span class="line">					c[i][j]=a.a[i][j]-b.a[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> List(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">List <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> q[<span class="number">4</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> b1[][<span class="number">2</span>]=&#123;&#123;q[<span class="number">0</span>],q[<span class="number">1</span>]&#125;,&#123;q[<span class="number">3</span>],q[<span class="number">4</span>]&#125;&#125;;</span><br><span class="line">	<span class="function">List <span class="title">b</span><span class="params">(b1)</span></span>;</span><br><span class="line">	List c;</span><br><span class="line">	c = a+b;</span><br><span class="line">	c.disp();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指针的指针">指针的指针</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> **p;</span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">int</span> **p; <span class="comment">//定义一个指针的指针</span></span><br><span class="line"><span class="keyword">int</span> *q;	<span class="comment">//定义一个int型的指针</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">q = a;	<span class="comment">//q指向a</span></span><br><span class="line">p =&amp;q; <span class="comment">//p指向q</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(*p+<span class="number">1</span>)); <span class="comment">//所以*p展现了q，*（*p）为q展现自己储存的地址的内容</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>所以说，这个<code>int</code>有用吗？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">*((<span class="keyword">int</span> *)a+n*i+j);  </span><br></pre></td></tr></table></figure>
<ul>
<li>函数的分号问题</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;;   <span class="comment">//这个分号是否有必要？</span></span><br></pre></td></tr></table></figure>
<ul>
<li>答：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为什么Base和Derived的虚函数地址一样呢 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		&#125;;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Derived d;</span><br><span class="line">	<span class="keyword">if</span> (d.Base::_vptr==d._vptr)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;yes&quot;</span>&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//显示yes</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>问：Base中的虚函数和Derived的虚函数的地址为什么是一样的呢</p></li>
<li><p>答：</p></li>
</ul>
<p>虚表指针指向了一个虚表，虚表中存放着类中的虚函数。如果类中存在虚函数，那么构造对象的时候，就会生一个虚表指针指向虚表，虚表中存放虚函数。所以，要注意的一-点，
在类的构造函数中不要调用虚函数，这是一一个危险的动作，因为很可能它还未
初始化完毕。</p>
<ul>
<li>问：动态联编和静态联编，可以访问派生类函数</li>
<li>答：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;1,2,3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;4,5,6&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A *ptr;</span><br><span class="line">    B a1;</span><br><span class="line">    ptr =&amp;a1;</span><br><span class="line">    ptr-&gt;<span class="built_in">print1</span>();   <span class="comment">//can&#x27;t called</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>问：不能调用派生类函数</li>
<li>答：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span><span class="keyword">public</span> Base&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">func4</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; nihao!&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Base d1, *bp;</span><br><span class="line">	Derived d2;</span><br><span class="line">	bp=&amp;d2;</span><br><span class="line">	bp-&gt;func4();   <span class="comment">//这里直接调用了Base里面的func4()，这个算重载吗？ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>问：这个可以算重载嘛？，结果值为第一个</li>
<li>答:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Length</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> meter;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Length(<span class="keyword">int</span> m)&#123;</span><br><span class="line">			meter = m;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (<span class="number">1</span>*meter/<span class="number">1000</span>);   <span class="comment">//这个地方一定要使用1.0,否者强制转化会导致结果出错 </span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">Length <span class="title">a</span><span class="params">(<span class="number">1500</span>)</span></span>;</span><br><span class="line">	<span class="keyword">double</span> m =<span class="keyword">float</span>(a);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;m=&quot;</span>&lt;&lt;m&lt;&lt;<span class="string">&quot;km&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：这里<code>Length</code>返回值只能是1.0，不能是1，否者将会不准确。</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>通信原理笔记</title>
    <url>/2023/05/23/Communication%20principle/</url>
    <content><![CDATA[<p>通信原理理解性笔记</p>
<span id="more"></span>
<h3 id="信道">信道</h3>
<blockquote>
<p>将发送端数字脉冲信号转换成模拟信号的过程称为调制(Modulation)；将接收端模拟信号还原成数字脉冲信号的过程称为解调(Demodulation)。将调制和解调两种功能结合在一起的设备称为调制解调器(Modem)</p>
<p>模拟信号和数字信号之间可以相互转换：模拟信号一般通过PCM脉码调制(Pulse
Code
Modulation)方法量化为数字信号，即让模拟信号的不同幅度分别对应不同的二进制值，例如采用8位编码可将模拟信号量化为2^8=256个量级，实用中常采取24位或30位编码；数字信号一般通过对载波进行移相(Phase
Shift)的方法转换为模拟信号。</p>
<p>数字信道占用信道频带较宽。<strong>一路模拟电话的频带为4kHz带宽，一路数字电话约占64kHz</strong>，这是模拟通信目前仍有生命力的主要原因。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/qq_20411471/article/details/100893530">数字信道与模拟信道_模拟信道和数字信道_偷轮子的博客-CSDN博客</a></p>
<h3 id="波形成型">波形成型</h3>
<blockquote>
<p>从上图可以看出，<strong>相关时延大于符号持续时间</strong>，因此，当两个信号在接收侧相加时，来自于时延为的符号将会和来自于时延为的符号相加。</p>
<p>不同的符号相加，或者说，不同的符号相互干扰，即为<strong>符号间干扰(ISI)</strong>。</p>
<p><strong>一般将多径信号最大时延的倒数定义为多径信道的相关带宽。</strong></p>
<blockquote>
<p><strong>频率选择性失真</strong>和<strong>ISI</strong>是<strong>一体两面</strong>，其中，<strong>频率选择性失真</strong>发生在<strong>频域</strong>，对应的<strong>时域结果</strong>为<strong>ISI</strong></p>
</blockquote>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/515351041">衰落（2）--
时延扩展，相关带宽，ISI - 知乎</a></p>
<blockquote>
<h2 id="脉冲整形">脉冲整形</h2>
<p><strong>一、矩形脉冲</strong></p>
<p>实际上矩形脉冲无失真传输是不可能的，因为由<a
href="https://so.csdn.net/so/search?q=傅里叶&amp;spm=1001.2101.3001.7020">傅里叶</a>变换可知，时域矩形脉冲，频域是sinc函数，带宽无限，而信道带宽总是有限的。
失真严重导致采样判决出错，无法正确恢复数字信号。
显然矩形脉冲信号不合适，sinc脉冲信号合适</p>
<p><strong>二、sinc脉冲</strong> 其<a
href="https://so.csdn.net/so/search?q=频谱&amp;spm=1001.2101.3001.7020">频谱</a>有限，一个码元达到最大幅值时其他所有码元幅值刚好为零，码元之间不会相互影响，实现了无码间串扰。</p>
<h2 id="基带滤波器">基带滤波器</h2>
<p>一般使用基带滤波器来实现脉冲整形</p>
<p>假设发送序列{1 1 1 -1 1 -1 -1 1}
发送序列、输入滤波器的冲激信号、每个冲激信号的冲激响应，和输出信号如图所示
<strong>例子</strong></p>
</blockquote>
<p><a
href="https://blog.csdn.net/qq_41824183/article/details/107182725">基带信号的发送和接收的有效理解和掌握_滚降因子为0的系统可以算是理想低通系统吗_BIT小小书童的博客-CSDN博客</a></p>
<blockquote>
<p>最初，信号是以矩形脉冲通过带限信道，必然会出现脉冲时延扩展引起S1，频域上看是Sa函数的旁瓣千扰。</p>
</blockquote>
<p><a
href="https://www.cnblogs.com/TGWWX/p/16155667.html">简单概述：脉冲成形
基带成形 （脉冲成型 基带成型） - HQU小西西 - 博客园</a></p>
<p>有点难，待会看</p>
<p><a
href="https://www.cnblogs.com/riden/p/4653744.html">为什么要对基带信号进行脉冲成型【转载】
- Riden - 博客园</a></p>
<blockquote>
<p>为什么对基带信号要成形滤波？</p>
<p>基带信号带宽无限，需要限制带宽。成形滤波器也叫限带滤波器</p>
<p>实际中通信传输的信号大都是带通信号，也就是中心频带远大于频带宽度的信号。而这些带通信号的频谱结构只取决于等效低通信号的频谱结构。这里的等效低通信号就是你这里所指的基带数字信号。而基带数字信号的频率特性又取决于两个因素，一个是基带信号中构成每个脉冲符号的基本信号的频谱，另一个就是脉冲信号之间的相关性。换句话说可以通过设计不同的基本脉冲信号的波形和符号之间的相关性，达到改变基带信号频谱结构的目的，从而改变调制后带通信号的频谱特性。
理解了这一点，你就可以理解为什么要对基带信号进行不同的滤波生成符号脉冲了。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/wordwarwordwar/article/details/54755642">基带传输与成形滤波_基带成型滤波器_长弓的坚持的博客-CSDN博客</a></p>
<blockquote>
<p>为什么要-&gt;这里有直接结论：</p>
<p>（个人简单理解，脉冲成型（形），就是将脉冲变成其他的传输波形，理由就是压缩频谱来降低ISI）
！</p>
</blockquote>
<p><a
href="https://www.1024sou.com/article/914269.html">简单概述：脉冲成形
基带成形 （脉冲成型 基带成型） - 1024搜-程序员专属的搜索引擎</a></p>
<blockquote>
<p>数字信号想要在信道中传输，必须在发射机的基带部分进行脉冲成形，将数字信号转换成脉冲信号，脉冲信号到达接收机后，在基带部分进行采样判决，将数字信号恢复出来。</p>
<p>如下图所示，脉冲成形需要用到脉冲波形，实现脉冲成形要用到基带滤波器，评估基带滤波器要用到眼图。<a
href="https://blog.csdn.net/duanduann/article/details/123384959">【深入浅出通信原理-学习笔记】基带信号的发送和接收_脉冲怎么发送和接受_DUANDAUNNN的博客-CSDN博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>电路</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划入门</title>
    <url>/2021/08/19/DP/</url>
    <content><![CDATA[<p>​ 之前没搞懂的动态规划，现在强行试了一下，欢迎大家指导！</p>
<span id="more"></span>
<h1 id="fibonacci-sequence">Fibonacci Sequence</h1>
<ul>
<li>递归的思想
<ul>
<li>要求第n项，先求n-1和n-2项，若n-1和n-2项为1,2则都令为1</li>
<li>Fobonacci
Sequence复杂度比较高，不适合大数据计算，例如当n=100时，计算起来就十分的慢</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">fibo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibo(n-<span class="number">1</span>)+fibo(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>​
既然Fibonacci数列的递归计算如此复杂，那么，我们应该想什么办法来优化整个算法呢，我们考虑到，Fibonacci之所以复杂，是因为递归的存在，导致整个程序的时间复杂度都十分的高那么我们有没有简单一点的方法呢,对了，我们可以采用记录的方式，将每一个点之前的Fibonacci的数值都保存下来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fibo</span>(<span class="params">n</span>):</span></span><br><span class="line">    memo=[<span class="number">1</span>]*n     <span class="comment">#新建一个备忘录，记录每一个点的斐波拉切数列值，初始为[1,1,1,1....]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i&lt;=<span class="number">1</span>:</span><br><span class="line">            memo[i]=<span class="number">1</span>   <span class="comment">#给备忘录的第一个元素和第二个元素附一个1的初值</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            memo[i]=memo[i-<span class="number">1</span>]+memo[i-<span class="number">2</span>] <span class="comment">#生成整个memo数组</span></span><br><span class="line">    <span class="keyword">return</span> memo[i]   <span class="comment">#返回memo最后一个值，就是整个要求的的最大值</span></span><br><span class="line"><span class="comment">#调用一下</span></span><br><span class="line">Fibo(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<p>​
我们调用了相关的带有memo的Fibo函数之后，明显发现，整个速度提升了很多，整个计算没有超过一秒钟，显然，这种方法是很有效的，我们称这个memo为DP数组</p>
<h1 id="house-robber">House-robber</h1>
<ul>
<li>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你
不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</li>
<li>输入：[1,2,3,1]</li>
</ul>
<p>输出：4</p>
<p>解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</p>
<p>偷窃到的最高金额 = 1 + 3 = 4 。</p>
<p>对于小偷问题，我们可以这么去思考，就是我们新建一个DP数组，用来储存小偷走到这个点时之前可以得到的最大的收益，如果按照这种思路，然后去整个数组的最大值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">steal</span>():</span></span><br><span class="line">    nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]   <span class="comment">#每个房子有的金额（金额数组）</span></span><br><span class="line">    memo=[<span class="number">1</span>]*<span class="built_in">len</span>(nums)    <span class="comment">#新建一个DP数组，这个数组就是记录到那个点的最大值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="built_in">len</span>(memo)):     <span class="comment">#完善数组，for循环，开始从第一个位置开始填充数组</span></span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            memo[i]=nums[i]         <span class="comment">#前两家偷的时候，只能偷其中一家，所以最大值为两家中的一家</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">            memo[i]=<span class="built_in">max</span>(nums[i],nums[i-<span class="number">1</span>])     <span class="comment">#第二家的最大金额，应该是偷第一家和偷第二家的最大之一</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            memo[i]=<span class="built_in">max</span>(memo[i-<span class="number">2</span>]+nums[i],memo[i-<span class="number">1</span>])    <span class="comment">#用户大于第三家之后，数组的值应该为偷这一家(不能连续偷)(memo[i-2]+nums[i])</span></span><br><span class="line">            <span class="comment">#如果偷了的金额没有不偷多，那就不偷</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">max</span>(memo))</span><br><span class="line">    <span class="built_in">print</span>(memo)  </span><br><span class="line">steal()</span><br></pre></td></tr></table></figure>
<h1 id="maximum-value-of-gifts">Maximum value of gifts</h1>
<p>在一个 m*n
的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于
0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>
<p>输入:</p>
<p>[]</p>
<p>输出: 12</p>
<p>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210819174221935.png" alt="image-20210819174221935" style="zoom: 33%;" /></p>
<p>​
我们要计算从左上角到右下角最大的礼物价值，我们不妨这么思考，我们还是新建一个DP数组，这个DP数组应该是二维的，然后考虑DP数组是左上角到达每个点的最大价值，又因为路线只能右走或者下走。所以当其为横向、纵向的边界时，我们只要考虑左边、上面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gift</span>():</span></span><br><span class="line">    a=[</span><br><span class="line">      [<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line">      [<span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>],</span><br><span class="line">      [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">    ]</span><br><span class="line">    r,c=<span class="built_in">len</span>(a),<span class="built_in">len</span>(a[<span class="number">0</span>])   <span class="comment">#读取出数组的长度r代表row，c代表column</span></span><br><span class="line">    memo=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        memo.append([<span class="number">1</span>]*c)   <span class="comment">#初始化DP数组，让DP数组的大小为原来a的大小</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):       <span class="comment">#遍历整个二维的a，然后开始填充memo的每一个地方</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span> <span class="keyword">and</span> j==<span class="number">0</span>:</span><br><span class="line">                memo[i][j]=a[i][j]    <span class="comment">#第一个位置为起点，所以必须为a的第一个值</span></span><br><span class="line">            <span class="keyword">elif</span> i==<span class="number">0</span>:</span><br><span class="line">                memo[i][j]=memo[i][j-<span class="number">1</span>]+a[i][j]    <span class="comment">#当i=0时，说明第一行数据，由于只能右走和下走，所以</span></span><br><span class="line">                                                    <span class="comment">#这里是右走</span></span><br><span class="line">            <span class="keyword">elif</span> j==<span class="number">0</span>:</span><br><span class="line">                memo[i][j]=memo[i-<span class="number">1</span>][j]+a[i][j]    <span class="comment">#当i=0时，说明第一列数据，由于只能右走和下走，所以</span></span><br><span class="line">                                                    <span class="comment">#这里是下走</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                memo[i][j]=<span class="built_in">max</span>(memo[i][j-<span class="number">1</span>]+a[i][j],memo[i-<span class="number">1</span>][j]+a[i][j])</span><br><span class="line">                                                <span class="comment">#当i!=0,j!=0时，可以右走和下走</span></span><br><span class="line">                </span><br><span class="line">    <span class="built_in">print</span>(memo)</span><br></pre></td></tr></table></figure>
<h1 id="coins-exchange">Coins exchange</h1>
<p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount
，表示总金额。计算并返回可以凑成总金额所需的 最少的硬币个数
。如果没有任何一种硬币组合能组成总金额，返回 -1
。你可以认为每种硬币的数量是无限的。</p>
<p>输入：coins = [1, 2, 5], S = 11</p>
<p>输出：3</p>
<p>解释：11 = 5 + 5 + 1</p>
<p>输入：coins = [2], S = 3</p>
<p>输出：-1</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210819174323036.png" alt="image-20210819174503970" style="zoom: 50%;" /></p>
<p><span class="math display">\[
f(x)=min\{f(x-c_1),f(x-c_2),...f(x-c_m)\}+1
\]</span></p>
<p>如果<span class="math inline">\(x-c_i&lt;0\)</span>，则令<span
class="math inline">\(f(x-c_i)=\infty\)</span>这样就不会选这个<span
class="math inline">\(f(x-c_i)\)</span>了</p>
<p>如果<span class="math inline">\(x-c_i=0\)</span>,那么<span
class="math inline">\(f(x-c_i)=0\)</span>即<span
class="math inline">\(f(0)=0\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_coins</span>():</span></span><br><span class="line">    coins,S=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>],<span class="number">11</span>    <span class="comment">#拥有的硬币的种类，个数</span></span><br><span class="line">    dp=&#123;&#125;                 <span class="comment">#定义一个dp的字典，记录到每一元钱，所需要的硬币个数</span></span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(S+<span class="number">1</span>):   <span class="comment">#一直需要到11，所以这里是0-12</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line">            <span class="keyword">if</span> i-j==<span class="number">0</span>:     <span class="comment">#先判断这个x-c_i是不是等于0，如果是，令min&#123;....&#125;的数组中添加0</span></span><br><span class="line">                temp.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> i-j&lt;<span class="number">0</span>:    <span class="comment">#在判断i-j是不是小于0，如果是，这说明这条路不行，于是令min&#123;...&#125;的...中添加一个数1000</span></span><br><span class="line">                temp.append(<span class="number">1000</span>) </span><br><span class="line">            <span class="keyword">else</span>:          <span class="comment">#在其他的情况下都是满足的，那么可以按照上面的公式，在这个可能的结果中添加一个数为dp.get(i-j)</span></span><br><span class="line">                temp.append(dp.get(i-j))</span><br><span class="line">        dp[i]=<span class="built_in">min</span>(temp)+<span class="number">1</span>  <span class="comment">#dp[i]则应该为上面的一个数组中的一个数的最小值加一即min&#123;[....]&#125;+1</span></span><br><span class="line">        temp=[]            <span class="comment">#记得给数组归0</span></span><br><span class="line"><span class="comment">#     print(dp)</span></span><br><span class="line">    <span class="keyword">return</span> dp</span><br><span class="line">change_coins()</span><br></pre></td></tr></table></figure>
<p>现在我们已经知道硬币的最少组合为3，那我们如何得到是哪些硬币的组合</p>
<p>思路：
我们可以将S=11的最小硬币数是3分解一下，例如，硬币数是3，说明[1,2,5]中的三个可以组成，于是我们可以一个一个的遍历，看当11减去其中的一些数之后判断一下剩余的需要的最小硬币数是不是2，例如:11-1,然后:凑成10元的所需硬币数最小是2吗，是的话，跳出遍历，选择这一10继续分解，不是的话，继续遍历下面的，直到S=0说明已经遍历到0了，可以结束</p>
<p>如何得到硬币的组合呢（5，5，1）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_coins</span>(<span class="params">S</span>):</span></span><br><span class="line">    dp=change_coins()    <span class="comment">#调用上面的硬币交换得到dp数组</span></span><br><span class="line">    coins=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]       <span class="comment">#硬币的种类为1,2,5</span></span><br><span class="line">    n=dp.get(S)         <span class="comment">#第一步先调出S的最小硬币数</span></span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>             <span class="comment">#给dp数组的0元素归0</span></span><br><span class="line">    go,coin_cate=[],[]   <span class="comment">#go数组可以记录整个换钱的过程，coin_cate可以看出每个过程所使用的硬币的金额</span></span><br><span class="line">    <span class="keyword">while</span> dp.get(S,<span class="number">0</span>)-<span class="number">1</span>&gt;=<span class="number">0</span>:     <span class="comment">#当dp.get(S,0)-1=0时，说明S为非零且属于[1,2,5]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> coins:         <span class="comment">#从[1,2,5]中一个个取数</span></span><br><span class="line">            <span class="keyword">if</span> n-<span class="number">1</span>==dp.get(S-i):    <span class="comment">#如果有需要凑成S-i的钱的最小个数与S需要的最小个数只相差1，那么符合</span></span><br><span class="line">                                    <span class="comment">#取其中一种情况即可</span></span><br><span class="line">                go.append(S-i)      <span class="comment">#把这个可以凑成的金额添加到路径里</span></span><br><span class="line">                coin_cate.append(i)  <span class="comment">#把这次使用的种类添加到硬币的种类里</span></span><br><span class="line">                S=S-i                <span class="comment">#给S从新赋值，让S=S-i，以便寻找下一轮循环</span></span><br><span class="line">                <span class="keyword">break</span>                <span class="comment">#只要找到满足条件的一个coins即可，不需要全部找到</span></span><br><span class="line">        n=dp.get(S,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> S==<span class="number">0</span>:                     <span class="comment">#如果S=0，说明整个分解可凑的钱程序已经已经走到需要凑0元的情况，</span></span><br><span class="line">                                    <span class="comment">#显然这种情况可以直接结束程序</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(go,coin_cate)</span><br><span class="line">find_coins(<span class="number">11</span>)  </span><br></pre></td></tr></table></figure>
<h1 id="knapsack-problem">Knapsack Problem</h1>
<p>​
有10件货物要从甲地运送到乙地，每件货物的重量(单位:吨)和利润(单位:元)</p>
<p>如下表所示:</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210819174503970.png" alt="image-20210819174323036" style="zoom: 80%;" /></p>
<p>​
由于只有--辆最大载重为30t的货车能用来运送货物，所以只能选择部分货物配送，要求确定运送哪些货物，使得运送这些货物的总利润最大。</p>
<p>思路：</p>
<p>​ 有m件物品，第i件物品的利润为<span
class="math inline">\(v_i\)</span>重量为<span
class="math inline">\(w_i\)</span>背包的总重量为W.</p>
<p>原问题:在满足重量约束的条件下，将这m个物品选择性放入容量为W的背包所能获得的最大利润</p>
<p>子问题:在满足重量的约束条件下，将i(<span class="math inline">\(i\le
m\)</span>)件物品选择性放入容量为j(<span class="math inline">\(j \le
W\)</span>)的背包所获得的最大利润 <img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210819174526184.png"
alt="image-20210819174526184" /></p>
<p>状态分析:</p>
<p>​
我们要讲m件商品装进容量为W的背包，我们可以假设背包是从1,2,3,4...增大的容量，物品从第一次只装第一个产品，然后慢慢推广到前i个产品，所以DP表格其实是在背包容量为i的情况下，能装的礼物的最大价值</p>
<p>​
对于第一行来说，装的物品为第一个物品，所以只需要判断背包容量是否大于第一件物品的重量，若大于，则最大价值为第一件物品的价值</p>
<p>​
对于第一列来说，背包容量为1，装进前i件物品的最大价值，由于物品的重量始终为整数，所以在前i件物品里，我们要看有没有总量为1的物品，若没有，则什么也装不进去，那么最大价值为0，若有(可能有几个)，则去前i个产品中重量为1的所有物品中价值最大的那个为该点dp表的值</p>
<p>​ 对于其它的列来说，需要用到状态转移方程，对于要求前<span
class="math inline">\(i\)</span>件物品装进容量为<span
class="math inline">\(j\)</span>的背包，在<span
class="math inline">\(i-1\)</span>的基础上只需要考虑到底装不装第<span
class="math inline">\(i\)</span>件物品，那么怎么考虑呢？要装第<span
class="math inline">\(i\)</span>件物品首先，第<span
class="math inline">\(i\)</span>件物品的重量必须小于背包的容量所以有: ​
<span class="math inline">\(j-weight(i)&gt;=0\)</span>才去判断: <span
class="math display">\[
max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])
\]</span></p>
<p>它的意思是如果第i件物品装的下，那么就去判断不装这件物品和在没装这件物品，也就是dp[i-1][j-weight[i]]的最大价值，然后加上这件物品的价值。这样就可推出整个dp数组，而数组的最后一个元素，就是我们要求的最大价值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items=[(<span class="number">1</span>,<span class="number">6</span>,<span class="number">540</span>),(<span class="number">2</span>,<span class="number">3</span>,<span class="number">200</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="number">180</span>),(<span class="number">4</span>,<span class="number">5</span>,<span class="number">350</span>),(<span class="number">5</span>,<span class="number">1</span>,<span class="number">60</span>),(<span class="number">6</span>,<span class="number">2</span>,<span class="number">150</span>),(<span class="number">7</span>,<span class="number">3</span>,<span class="number">280</span>),(<span class="number">8</span>,<span class="number">5</span>,<span class="number">450</span>),(<span class="number">9</span>,<span class="number">4</span>,<span class="number">320</span>),(<span class="number">10</span>,<span class="number">2</span>,<span class="number">120</span>)]</span><br><span class="line"><span class="comment"># 定义一个含有所有的价值的数组</span></span><br><span class="line">weight=<span class="number">30</span>   <span class="comment"># 定义背包的重量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bag_problem</span>():</span></span><br><span class="line">    dp=[]     <span class="comment">#定义dp数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):    <span class="comment">#初始化dp数组</span></span><br><span class="line">        dp.append([<span class="number">0</span>]*weight)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):      <span class="comment">#双重遍历开始填充数组</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(weight):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span> :</span><br><span class="line">                <span class="keyword">if</span> j&gt;=items[<span class="number">0</span>][<span class="number">1</span>]-<span class="number">1</span>:    <span class="comment">#背包大小大于等于物体的大小，物体大小为定值，则为items的价值</span></span><br><span class="line">                    dp[i][j]=items[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    dp[i][j]=<span class="number">0</span>          <span class="comment">#如果背包太小，那就价值为0</span></span><br><span class="line">            <span class="keyword">if</span> j==<span class="number">0</span> :                   <span class="comment">#探究第一列的值</span></span><br><span class="line">                <span class="keyword">if</span> items[i][<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][<span class="number">0</span>],items[i][<span class="number">2</span>])      <span class="comment">#如果可以装进去，前i个产品中重量为1的所有物品中价值最大</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j]             <span class="comment">#重量超过一的物品无法装入，直接用重量为1的物体价值最大的那个作为dp[i][j]</span></span><br><span class="line">            <span class="keyword">else</span>:                      <span class="comment">#探究其它列</span></span><br><span class="line"><span class="comment">#                 print(j)</span></span><br><span class="line">                <span class="keyword">if</span> j+<span class="number">1</span>-items[i][<span class="number">1</span>]&lt;<span class="number">0</span>:   <span class="comment">#如果背包转不下就只能是dp[i-1][j],相当于不装第i件</span></span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:                   <span class="comment">#其它情况判断背包产生的价值是否大于没装时候产生的价值</span></span><br><span class="line">                    dp[i][j]=<span class="built_in">max</span>(dp[i-<span class="number">1</span>][j],dp[i-<span class="number">1</span>][j-items[i][<span class="number">1</span>]]+items[i][<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> dp</span><br><span class="line"><span class="comment">#     for c in dp:</span></span><br><span class="line"><span class="comment">#         print(c)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bag_problem():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>数字电子基础</title>
    <url>/2022/03/14/Digital%20Electronics%20Fundamentals/</url>
    <content><![CDATA[<p>一些数电不太能理解的地方</p>
<span id="more"></span>
<h1 id="反相器">反相器</h1>
<h2 id="coms电路">COMS电路</h2>
<ul>
<li>CMOS的<a
href="https://www.bilibili.com/video/BV18p411Z7ce?p=10&amp;t=1235.8">输出特性</a>,CMOS受负载的输出高低电平变化</li>
<li><span class="math inline">\(V_{OH}\quad V_{OL}...\)</span>的取法<a
href="https://www.bilibili.com/video/BV18p411Z7ce?p=14&amp;t=1203.6">（噪声容限）</a></li>
<li>CMOS门不允许悬空，和地面的电阻相接不影响</li>
<li>CMOS电路的输入端不允许悬空，因为悬空会使电位不定，破坏正常的逻辑关系。另外，悬空时输入阻抗高，易受外界噪声干扰，使电路产生误动作，而且也极易造成栅极感应静电而击穿。</li>
</ul>
<h2 id="ttl电路">TTL电路</h2>
<ul>
<li><p><a
href="https://www.bilibili.com/video/BV18p411Z7ce?p=14&amp;t=2517.3">扇出系数的概念</a>，计算</p></li>
<li><p><a
href="https://baike.baidu.com/item/%E6%BC%8F%E7%94%B5%E6%B5%81/9730233">漏电流</a></p></li>
<li><p><span class="math inline">\(T_{cd}和T_{pd}\)</span>,为什么<span
class="math inline">\(T_{cd}=0\)</span>的时候，将<a
href="https://www.bilibili.com/video/BV18p411Z7ce?p=15&amp;t=1258.7">无法信任电平</a>？</p>
<p>因为<span
class="math inline">\(T_{cd}=0\)</span>，表面一旦高电平降低，那么电路进入无效区，这时候就需要重新，<span
class="math inline">\(T_{cd}可以变大点\)</span></p></li>
<li><p><a
href="https://www.bilibili.com/video/BV18p411Z7ce?p=15&amp;t=2038.4">交流噪声容限</a>(是指噪声信号是高频吗？)</p></li>
<li><p>TTL电源不允许大幅调整，不允许超过10%</p></li>
<li><p>TTL电路输入端通过电阻接地，电阻值R的大小直接影响电路所处的状态。</p></li>
</ul>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220314165358358.png"
alt="输入电流特性" />
<figcaption aria-hidden="true">输入电流特性</figcaption>
</figure>
<ul>
<li>OC门上拉电阻的选择，不能太大，是担心输出高电平的时候不能输出高电平，不能太小，是因为担心输出低电平的时候电流太大损坏管子（最坏的情况，只有一个管子接地），高电平的时候内阻近视为上拉电阻，而低电平的时候内阻相当于管子的阻抗，这时要求内阻较小</li>
</ul>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220314172656223.png"
alt="TTL三态门" />
<figcaption aria-hidden="true">TTL三态门</figcaption>
</figure>
<ul>
<li>OC门和OD的优势：电平偏移，也就是说，输出的电平可以通过上拉电阻来调整</li>
</ul>
]]></content>
      <categories>
        <category>电子</category>
      </categories>
  </entry>
  <entry>
    <title>专业英语</title>
    <url>/2023/06/05/English_profess/</url>
    <content><![CDATA[<p>GANs</p>
<p>专业英语答辩</p>
<span id="more"></span>
<blockquote>
<p>大家好，欢迎大家来到这里，今天我将为大家介绍一个用于图像翻译的新的技术，叫做cycle-gan,其是由AI华人青年学者Jun-Yan
Zhu主导的项目，在介绍这篇paper之前，我们先和大家介绍一些较为相近的领域。</p>
</blockquote>
<h1 id="first">First</h1>
<p>Hello everyone, welcome to come here, today I will introduce a new
technology for image translation, called cycle-gan, which is a project
led by young AI Chinese scholar Jun-Yan Zhu, in this paper Before that,
let's introduce some relatively similar fields to you.</p>
<blockquote>
<p>你们了解文心一言、或者是chatgpt，或许是由Google开发的bard吗？他们的共性是什么呢？没错，他们的共性就是都具有创造性，所谓的创造性，就是当你输入同一句话的时候，它能给出不同的结果，所以gpt的第一个单词就是Generative，但是CNN可不擅长生成式模型，当你给出同一个输入时，它更倾向于输出同一结果。</p>
</blockquote>
<p>Do you guys know Wenxinyiyan, or chatgpt, maybe bard developed by
Google? What do they have in common? Yes, what they have in common is
that they are all creative. The so-called creativity means that when you
input the same sentence, it can give different results, so the first
word of gpt is Generative, but CNN is not good at generative models. ,
when you give the same input, it is more likely to output the same
result.</p>
<blockquote>
<p>另一个例子就是跨域识别问题，如何通过一个训练的模型，去泛化识别其它域的问题，这里就涉及到域适应，而gan就是用来解决这种问题的。</p>
</blockquote>
<p>Another example is the problem of cross-domain recognition. How to
generalize and recognize other domains through a trained model, here
involves domain adaptation, and gan is used to solve this problem.</p>
<blockquote>
<p>这是Gan的一个模型框架，主要是由生成器和判别器两部分组成，生成器用来生成内容，而判别器主要识别生成的内容是否是假的。生成器和判别器是两个模型，他们就如自然界一样捕食者与被捕食者共同进化。当判别器无法区分生成的内容是否为假，说明模型已经表现十分良好了</p>
</blockquote>
<p>This is a model framework of Gan, which is mainly composed of two
parts: the generator and the discriminator. The generator is used to
generate content, and the discriminator mainly identifies whether the
generated content is fake. The generator and the discriminator are two
models, and they co-evolve with the prey just like in nature. When the
discriminator cannot distinguish whether the generated content is fake
or not, it means that the model has performed very well</p>
<blockquote>
<p>Cycle-gan 使用了循环一致性，共需要四个模型，即两个生成模型GA-&gt;B,
GB-&gt;A,以及两个判别模型
DA和DB，这就是cycle的由来，但是更加令人振奋人心的是：cycle-gan不需要配对的数据对进行训练，也就是说我们只需要给cycle-gan足够多的源域和目的域的数据，而不需要对其进行大量标签工作，它就会自动学习并且成功x
域到y域的转化规则，由于其涉及到两个域的双向转化，因而其迭代中使用的损失函数也是循环一致损失函数。</p>
</blockquote>
<p>Cycle-gan uses cycle consistency and requires a total of four models,
namely two generative models GA-&gt;B, GB-&gt;A, and two discriminative
models DA and DB. This is the origin of cycle, but it is even more
exciting What is popular is that cycle-gan does not require paired data
pairs for training, that is to say, we only need to give cycle-gan
enough data from the source domain and the target domain without a lot
of labeling work on it, and it will Automatically learn and successfully
convert the x domain to the y domain. Since it involves the two-way
conversion of the two domains, the loss function used in its iteration
is also a cycle consistent loss function.</p>
<h1 id="second">second</h1>
<blockquote>
<p>接下来给大家介绍一些cycle-gan应用:如视频增强领域，黑白视频变成彩色视频。或者是场景转化。或者是将抽象的画转化为一个具象的画如房屋建筑，这些都可以作为通信数据压缩，你可以试着一下发送方在网路上传送类似于色块一样的数据，它可能占用的带宽十分的小，当你在接收端受到这些色块时，再将其恢复出来。这样看起来是一个不错的视频压缩方法</p>
</blockquote>
<p>Next, I will introduce some cycle-gan applications: for example, in
the field of video enhancement, black-and-white video becomes color
video. Or scene transformation. Or convert an abstract painting into a
concrete painting such as a building, these can be used as communication
data compression, you can try the sender to transmit data similar to
color blocks on the network, it may take up a lot of bandwidth Small,
when you get these color patches at the receiving end, bring them back.
This looks like a good way to compress video</p>
<h1 id="third">Third</h1>
<p>The third part is sentence analysis，</p>
<p>The meaning of the first sentence is
“此外，在实践中，我们发现很难优化对抗目标隔离：标准程序通常会导致众所周知的模式崩溃问题，其中所有输入图像都映射到相同的输出图像，优化无法取得进展
[15]。</p>
<p>”。</p>
<p>The second sentence
means：“我们还与以前依赖于手动定义的样式和内容分解或共享嵌入函数的方法进行了比较，并表明我们的方法优于这些基线。”。</p>
<p>The third part is sentence analysis
“图像到图像转换的想法至少可以追溯到 Hertzmann 等人的图像类比
[19]，他们在单个输入输出训练图像对上采用非参数纹理模型 [10]。”</p>
<p>Here are some references. thanks for listening！</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title>GANs</title>
    <url>/2023/06/03/GANs/</url>
    <content><![CDATA[<p>GANs</p>
<span id="more"></span>
<h2 id="模式识别的定义">模式识别的定义</h2>
<blockquote>
<p><strong>模式识别是对</strong><a
href="https://en.wikipedia.org/wiki/Data">数据中的</a><a
href="https://en.wikipedia.org/wiki/Pattern">模式</a>和规律性的自动识别。<a
href="https://en.wikipedia.org/wiki/Data_analysis">它在统计数据分析</a>、<a
href="https://en.wikipedia.org/wiki/Signal_processing">信号处理</a>、<a
href="https://en.wikipedia.org/wiki/Image_analysis">图像分析</a>、<a
href="https://en.wikipedia.org/wiki/Information_retrieval">信息检索</a>、<a
href="https://en.wikipedia.org/wiki/Bioinformatics">生物信息学</a>、<a
href="https://en.wikipedia.org/wiki/Data_compression">数据压缩</a>、<a
href="https://en.wikipedia.org/wiki/Computer_graphics">计算机图形学</a>和<a
href="https://en.wikipedia.org/wiki/Machine_learning">机器学习</a>中都有应用。模式识别起源于统计学和工程学；一些现代的模式识别方法包括使用<a
href="https://en.wikipedia.org/wiki/Machine_learning">机器学习，这是由于</a><a
href="https://en.wikipedia.org/wiki/Big_data">大数据</a>可用性的增加和<a
href="https://en.wikipedia.org/wiki/Processing_power">处理能力</a>的新丰富.
这些活动可以看作是同一个应用领域的两个方面，在过去的几十年里都得到了长足的发展。</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Pattern_recognition">Pattern
recognition - Wikipedia</a></p>
<h1 id="l1-和-l2-正则化方法"><strong>L1 和 L2 正则化方法</strong></h1>
<p><a
href="https://towardsdatascience.com/l1-and-l2-regularization-methods-ce25e7fc831c">L1
and L2 Regularization Methods. Machine Learning | by Anuja Nagpal |
Towards Data Science</a></p>
<h2 id="gan">GAN</h2>
<blockquote>
<p><a href="https://arxiv.org/abs/1406.2661">GAN</a>是一个有趣的想法，<a
href="https://www.quora.com/In-what-way-are-Adversarial-Networks-related-or-different-to-Adversarial-Training/answer/Ian-Goodfellow">最初被引入</a>2014
年，由 Ian Goodfellow（现供职于
OpenAI）领导的蒙特利尔大学的一组研究人员。GAN
背后的主要思想是拥有两个相互竞争的神经网络模型。一个将噪声作为输入并生成样本（因此称为生成器）。另一个模型（称为鉴别器）从生成器和训练数据中接收样本，并且必须能够区分这两个来源。这两个网络玩一个连续的游戏，其中生成器正在学习生成越来越多的真实样本，而鉴别器正在学习越来越好地将生成的数据与真实数据区分开来。这两个网络是同时训练的，希望通过竞争来驱动生成的样本与真实数据无法区分。</p>
<p><a
href="https://aylien.com/images/uploads/general/gan_(2).png"></a></p>
<p>这里经常使用的类比是，生成器就像试图制造一些伪造材料的伪造者，而鉴别器就像试图检测伪造物品的警察。这种设置似乎也让人想起<em>强化学习</em>，其中生成器从鉴别器接收奖励信号，让它知道生成的数据是否准确。然而，与
GAN
的主要区别在于我们可以将梯度信息从鉴别器反向传播回生成器网络，因此生成器知道如何调整其参数以产生可以欺骗鉴别器的输出数据。</p>
</blockquote>
<p><a
href="https://aylien.com/blog/introduction-generative-adversarial-networks-code-tensorflow">An
introduction to Generative Adversarial Networks (with code in
TensorFlow)</a></p>
<blockquote>
<p><strong>minmax</strong>（有时称为<strong>Minimax</strong>、<strong>MM</strong>
[<a
href="https://en.wikipedia.org/wiki/Minimax#cite_note-1">1]</a>或<strong>鞍点</strong>[<a
href="https://en.wikipedia.org/wiki/Minimax#cite_note-2">2]</a><a
href="https://en.wikipedia.org/wiki/Artificial_intelligence">）是人工智能</a>、<a
href="https://en.wikipedia.org/wiki/Decision_theory">决策论</a>、<a
href="https://en.wikipedia.org/wiki/Game_theory">博弈论</a>、<a
href="https://en.wikipedia.org/wiki/Statistics">统计学</a>和<a
href="https://en.wikipedia.org/wiki/Philosophy">哲学</a>中用于<em>最小化</em>最坏情况<a
href="https://en.wikipedia.org/wiki/Worst-case_scenario">（</a><a
href="https://en.wikipedia.org/wiki/Worst-case_scenario"><em>最大</em></a><a
href="https://en.wikipedia.org/wiki/Worst-case_scenario">损失）场景的</a>可能<a
href="https://en.wikipedia.org/wiki/Loss_function">损失</a>的决策规则.
在处理增益时，它被称为“maximin”——最大化最小增益。最初是为多人<a
href="https://en.wikipedia.org/wiki/Zero-sum">零和</a><a
href="https://en.wikipedia.org/wiki/Game_theory">博弈论制定的</a>
，涵盖了玩家交替移动和同时移动的情况，它也被扩展到更复杂的游戏和存在不确定性的一般决策。</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Minimax">Minimax -
Wikipedia</a></p>
<ul>
<li>Cross-domain</li>
</ul>
<blockquote>
<p>Cross
Domain：中文表示--跨域。以小样本学习为例，跨域问题是指在学习过程中，源域(source
domain)和目标域(target
domain)在特征空间、类别空间或、边缘分布中的某一项或几项存在差异从而在学习过程中引起的问题。</p>
<p>Domain Adaptation，缩写DA：中文表示--域适应，主要是针对Cross
Domain跨域问题中源域和目标域的特征空间、类别空间相同、但边缘分布不同，即Ps(xs)
/=
Pt(xt)情况下的解决途径，如下图所示；域适应更多的应用在无监督学习下即UDA---Unsupervised
Domain Adaptation。</p>
<p><strong>域适应</strong>，领域自适应技术的研究由来已久，其目的是将知识从一个或多个源域转移到具有不同数据分布的目标域。早期的方法通常依赖于浅层分类模型的适应性，使用实例重加权[12]和模型参数自适应[65]等技术。最近，人们提出了许多使用深层神经网络来解决域适应问题的方法，包括基于差异的方法，旨在调整域之间的边缘分布[38,54,23,30]，基于对抗的方法，它们依赖于域鉴别器来鼓励与域无关的特征学习[59,14]，以及基于重构的技术，通常使用编码器-解码器模型或GANs来重建新域中的数据[4,69,22]。然而，所有这些方法都考虑到训练集和测试集具有相同的类的情况。一项工作考虑了这样一种情况：有些类可能不相交，但仍然需要类重叠才能成功对齐[50]。相比之下，我们研究了源域和目标域具有完全不相交的标签集的跨域少镜头学习问题。</p>
<p><strong>域泛化DG</strong>与域适应相关，因为我们关心的是目标域的性能，而不是源域的性能；但是它考虑的是目标域样本在训练过程中不可用的情况，因此模型必须直接泛化而不是适应目标域。DG与传统的泛化有关：在一组训练实例中学习的模型可以归纳为新的测试实例，例如通过正则化。然而它在更高的层次上运行，我们的目标是帮助在一组训练域上训练的模型泛化为一个新的测试域。</p>
</blockquote>
<p><a
href="https://zhuanlan.zhihu.com/p/263669949">CrossDomain、DomainAdaptation、DomainGeneralization
- 知乎</a></p>
<blockquote>
<p>不同的domain之间存在特征交集，比如电商领域的CTR（曝光给用户预测其点击的概率）任务存在着部分相同的用户群体和商品，这部分信息其实在不同的domain任务中可以共享，但是又不完全相同，比如同一用户在不同的domain中的行为是不一样的。所以简单的混合不同domain数据训练一个共享model（完全不区分domain任务）是不够的，必须要有区分。</p>
<p>容易想到的就是每个domain训练一个model，但是这样显而易见的缺点就是（1）有的domain训练数据量少，导致很难学到一个理想效果（2）训练这么多model，维护起来也很麻烦，而且需要更多的计算和存储资源。</p>
<p>总体来说就是既要融合但是也要有区分。所以本文介绍的阿里这篇论文的着眼点就是去学一个模型，同时其又可以区分不同domain任务。目前其已经被应用在了阿里的广告系统，CTR提高了8%，RPM收入提高了6%。所以还是非常不错的一篇工业实践，一起来看看吧。</p>
</blockquote>
<p><a
href="https://mp.weixin.qq.com/s/Etxi9erBTg0Y6Vt71Y4r9Q">同任务但不同domain数据的统一模型</a></p>
<h2 id="transform">Transform</h2>
<p><a href="https://zhuanlan.zhihu.com/p/600773858">OpenAI
ChatGPT（一）：十分钟读懂 Transformer - 知乎</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title>LinkWe Technology</title>
    <url>/2021/10/08/LinkWe/</url>
    <content><![CDATA[<p>LinkWe Technology product</p>
<span id="more"></span>
<div class="link-grid"><div class="link-grid-container">
<object class="link-grid-image" data="/images/linkwe.png"></object>
<p>零维科技官网</p><p>一群有梦想的年轻人</p>
<a href="http://yzmninglang.gitee.io/link-we/index.html"></a>
</div></div>
]]></content>
      <categories>
        <category>Product design</category>
      </categories>
  </entry>
  <entry>
    <title>毛概实践课</title>
    <url>/2022/06/10/Introduction%20to%20Mao%20Zedong%20Thought/</url>
    <content><![CDATA[<p>毛概实践课🤗</p>
<span id="more"></span>
<p>经过我们小组接近三个星期的努力，没错！它来了，毛概实践课的成果😁，它可能不是那么优秀，但的确是我们努力的成果</p>

<iframe height=340 width=840 src="https://player.xinpianchang.com/?aid=11972148&amp;mid=o36Jm4a6EZNQyjzB&amp;appKey=61a2f329348b3bf77&amp;apiBackend=https://mod-api.xinpianchang.com&amp" allowfullscreen="true" style="border: none;"></iframe>

<p>看看我们的大合照😁:</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/%E5%90%88%E7%85%A7%20(3).png" /></p>
<p>​
哈哈哈，还希望大家不要吐槽我的眯眯眼😛，当时光线太强，实在睁不开眼，不是故意的哈😜。我的ps技术也不是很好，只能做成这样，还希望大家多多担待</p>
<p>​
这次实践课给我留下印象还是很十分的深刻的，疫情期间，我这边（一个人在学校）要是没有室友们的帮助，估计是完成不了的，视频剪辑的时候，我和邵明禹哥哥把pr工程文件传来传去（每次都是2~3个G），邵明禹哥哥吐槽了n多次网络问题，我这边修改视频的时候，也不知道怎么回事，pr崩了5、6次，还把我的素材直接全部删除了😭，找也找不回，最后只能重新剪辑。</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220611092434778.png"
alt="被删除视频" />
<figcaption aria-hidden="true">被删除视频</figcaption>
</figure>
<p>​
这次大家没能全员出镜，可以算得上团队火力没有全开吧，但是我个人感觉还是不错的，因为在刚开始选题的时候，就想要做一些有思想深度的视频，疫情期间，多个人不能见面的情况下，从个体的角度入手，个体和个体之间用一些手段连接，去拔高整个实践课的深度，我认为是可行的。</p>
<p>​
总之，十分感谢那些和我一起走过这段道路的小伙伴，谢谢你们的付出，也谢谢那些帮助我们完成实践课的各位同学，就如视频所说，你们是冬天里的暖阳😉😉😉😉。</p>
]]></content>
      <categories>
        <category>思想觉悟</category>
      </categories>
  </entry>
  <entry>
    <title>Neural network(1)---Logistic Regression</title>
    <url>/2021/08/24/Neural-network(1)---Logistic-Regression/</url>
    <content><![CDATA[<p>After a long time ,I decide to study Neural Network in a systematic
way</p>
<span id="more"></span>
<h1 id="lead-to">Lead to</h1>
<p>When I first talk about this topic, I want to use a Mathematical way
to explain the algorithm---the <a
href="https://en.wikipedia.iwiki.eu.org/wiki/Logistic_regression">Logistic
Regression</a>.fisrtly , I want to introduce this algorithm to you ,it
is a tool to solve binary classification problem,firstly ,for a binary
classification problem you may recall the function <span
class="math inline">\(y=wx+b\)</span>,that is linear regression which is
the simplest binary classification function ,if you have got the <span
class="math inline">\(w,b\)</span>,and you input a <span
class="math inline">\(x\)</span>,you will get a <span
class="math inline">\(\hat y\)</span>, and if the actual value of <span
class="math inline">\(y\)</span> corresponding to <span
class="math inline">\(x\)</span> is bigger then <span
class="math inline">\(\hat y\)</span>,or is smaller then <span
class="math inline">\(\hat y\)</span>,you will use this way to get two
two categories in much data</p>
<h1 id="overview-of-logistic-regression">Overview of logistic
regression</h1>
<p>Today we will introduce a new algorithm to solve this problem: <span
class="math display">\[
\left\{\begin{array}{l}
z=w^{\top} x+b \\
\hat{y}=a=\sigma(z) \\
L(a, y)=-(y \log (a)+(1-y) \log (1-a))
\end{array}\right.
\]</span></p>
<p>you give the x and y ,you need give the initialization of <span
class="math inline">\(w,b\)</span> and program will help you to solve
the <span class="math inline">\(\hat y\)</span> and the loss function
<span class="math inline">\(L(a,y)\)</span> ,and the function <span
class="math inline">\(\sigma(z)\)</span> is <span
class="math display">\[
\sigma(z)=\frac{e^z}{e^z+1}
\]</span></p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/Transparent-2.png" style="zoom: 80%;" /></p>
<p><span class="math inline">\(L\)</span> is just like the <span
class="math inline">\(\frac{1}{2}(y-\hat y)^2\)</span>,which represent
how closer two points is ? if <span class="math inline">\(L\)</span> is
very small ,which represent the points is very closer. But why we don't
choose <span class="math inline">\(\frac{1}{2}(y-\hat
y)^2\)</span>,because if we choose this function ,the loss function is
maybe not a convex function ,which exist many local minimize solve ,just
like this picture :</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210823212505129.png" style="zoom: 25%;" /></p>
<p>when the loss function is non-convex ,the gradient can't work very
well ,so we choose the another function as the loos function ,So why
<span class="math inline">\(L(a,y)\)</span> can be used to describe the
distance ? just see two picture:</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210823211540362.png" style="zoom: 50%;" /></p>
<p>the two picture is the <span
class="math inline">\(L(a,y)\)</span>,when I assume that y=0 and y=1 and
the value of <span class="math inline">\(L\)</span> is dependent on the
value of a,</p>
<p>with different a,the <span class="math inline">\(L\)</span> have
different value ,when <span class="math inline">\(y=0\)</span>, only
when <span class="math inline">\(a=0\)</span>,then the Probability also
the <span class="math inline">\(L\)</span> is equal to 1</p>
<p>1 represent <code>True</code>,0 represents <code>False</code>,so this
is the reason why we choose this function to represents our "Loss
function".</p>
<p>But unfortunately ,this value can't represent the overall performance
on the model, so we need another function to reflect the accuracy of
model ,so we introduce the <span class="math inline">\(J\)</span> ,which
is mean "<a
href="https://en.wikipedia.iwiki.eu.org/wiki/Cost_function">Cost
function</a>" ,Its expression is : <span class="math display">\[
J(w,b)=-\frac{1}{m}\sum_{i=1}^{m}(L(a^{(i)},y^{(i)}))
\]</span></p>
<p><span class="math display">\[
dz=\frac{dl}{dz}=\frac{dl}{da}\cdot\frac{da}{dz}\\da=-\frac{y}{a}+\frac{1-y}{1-a}
\]</span></p>
<p>so we can get : <span class="math display">\[
\begin{equation}\begin{aligned}dz
&amp;=\frac{dl}{da}\cdot\frac{da}{dz}\\&amp;=(-\frac{y}{a}+\frac{1-y}{1-a})\cdot
\frac{e^z}{(e^z+1)^2}\\&amp;=a(1-a)(-\frac{y}{a}+\frac{1-y}{1-a})\\&amp;=a-y\end{aligned}\nonumber\end{equation}
\]</span> ok, we get the <span class="math inline">\(dz\)</span>,then we
can get some other import information like this : <span
class="math display">\[
dw_1=\frac{\partial L}{\partial w_1}=x_1dz \qquad db =dz
\]</span> then we can use Gradient descent to update the <span
class="math inline">\(w,b\)</span>: <span class="math display">\[
\cases{w=w-\alpha w\\b=b-\alpha b}
\]</span> in this expression <span class="math inline">\(a^{(i)}=\hat
y^{(i)}=\sigma(z^{(i)})=\sigma(w^Tx^{(i)+b})\)</span>.and we can
calculate the derivative of <span class="math inline">\(J\)</span> with
respect to <span class="math inline">\(w\)</span> and <span
class="math inline">\(b\)</span>:</p>
<p><span class="math display">\[
\frac{\partial}{\partial
w_i}J(w,b)=\frac{1}{m}\sum_{i=1}^{m}\frac{\partial}{\partial
w_i}(L(a^{(i)},y^{(i)}))
\]</span> you can see : <span class="math display">\[
\frac{\partial}{\partial w_i}(L(a^{(i)},y^{(i)}))=d
w_{i}^{(i)}-\left(x^{(i)} \cdot y^{(i)}\right)
\]</span> so forward propagation just like this :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J=0 dw_1=0 dw_2=0 db=0</span><br><span class="line">For  i=0  to m:</span><br><span class="line">	z_i=w_T*x_i + b   #w_T is the transpose of w</span><br><span class="line">	a_i=sigmoid(z_i)</span><br><span class="line">	J+=-[y_i*log(a_i)+(1-y_i)*log(1-a_i)]</span><br><span class="line">	dz_i=a_i - y_i</span><br><span class="line">	dw_i +=x_1i*dz_i</span><br><span class="line">	dw_2 +=x_2i*dz_i</span><br><span class="line">	db+=dz_i</span><br><span class="line">	J/=m</span><br><span class="line">	dw_1/=m   dw_2/=m   db=m</span><br><span class="line">	w_1=w_1-learning_rate*dw_1 w_2=w_2-learning_rate*dw_2 b=b-learning_rate*db</span><br></pre></td></tr></table></figure>
<h1 id="vectorization">Vectorization</h1>
<p>whenever possible avoid explicit <code>for loops</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For loop:</span><br><span class="line">	U_i=sum(A_i,V_i)</span><br><span class="line">	U=np.zeros((n,1))</span><br><span class="line">	for i in ...n:</span><br><span class="line">		for j .....m:</span><br><span class="line">			u[i]+=A[i][j]*V[i]</span><br></pre></td></tr></table></figure>
<p>if we use <code>python-numpy</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">u=np.dot(A,V)</span><br></pre></td></tr></table></figure>
<p>python-numpy's syntax is simpler, and calculation is more
efficient,That is pretty good,deep learning need a lots of calculations
,so matrix syntax by numpy is recommended</p>
<h1 id="coding">Coding</h1>
<p>Building this model neural network , let's do from the structure</p>
<ul>
<li>read the data and define the sigmoid function</li>
<li>use data and sigmoid function to propagate the <span
class="math inline">\(J\)</span></li>
<li>use <span class="math inline">\(J\)</span> to backpagate <span
class="math inline">\(dw\)</span> and <span
class="math inline">\(db\)</span></li>
<li>set number of iteration and learning rate to update the <span
class="math inline">\(J\)</span> (makes it smaller)</li>
<li>predict the train data and the test data ,get the accuracy of
model's prediction</li>
<li>plot the <span class="math inline">\(J-n_{iteration}\)</span>
figure,see whether it is overfit or not ?</li>
</ul>
<h2 id="import-lib-and-read-data">import lib and read data</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</span><br><span class="line"><span class="keyword">from</span> lr_utils <span class="keyword">import</span> load_dataset</span><br><span class="line">%matplotlib inline</span><br><span class="line">train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()</span><br><span class="line">train_set_y.shape</span><br><span class="line">index =<span class="number">2</span></span><br><span class="line">plt.imshow(train_set_x_orig[index])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y = &quot;</span>+<span class="built_in">str</span>(train_set_y[:,index]))</span><br><span class="line">m_train=train_set_x_orig.shape[<span class="number">0</span>]</span><br><span class="line">m_test=test_set_x_orig.shape[<span class="number">0</span>]</span><br><span class="line">num_px=train_set_x_orig.shape[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;x_train:&quot;</span>,m_train,<span class="string">&quot;x_test:&quot;</span>,m_test,<span class="string">&quot;shape:&quot;</span>,num_px)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y_train:&quot;</span>,)</span><br><span class="line"><span class="comment"># print(train_set_x_orig[0].shape)</span></span><br><span class="line">train_set_x_flatten=train_set_x_orig.reshape(m_train,-<span class="number">1</span>).T   <span class="comment">#flatten the image ,just want to make it 3*width*height</span></span><br><span class="line"><span class="comment"># print(train_set_x_flatten.shape)</span></span><br><span class="line">test_set_x_flatten=test_set_x_orig.reshape(m_test,-<span class="number">1</span>).T</span><br></pre></td></tr></table></figure>
<p>##data normalization</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_set_x=train_set_x_flatten/<span class="number">255</span></span><br><span class="line">test_set_x=test_set_x_flatten/<span class="number">255</span></span><br></pre></td></tr></table></figure>
<h2 id="define-sigmoid">define sigmoid</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">Z</span>):</span>     <span class="comment">#define sigmoid function</span></span><br><span class="line">    s=<span class="number">1</span>/(<span class="number">1</span>+np.exp(-Z))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="built_in">print</span>(sigmoid(np.array([<span class="number">1</span>,<span class="number">2</span>])))  <span class="comment">#test sigmoid fuction </span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_with_zeros</span>(<span class="params">dim</span>):</span>      <span class="comment">#Column vector</span></span><br><span class="line">    w=np.zeros((dim,<span class="number">1</span>))</span><br><span class="line">    b=<span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span>(w.shape==(dim,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">isinstance</span>(b,<span class="built_in">float</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(b,<span class="built_in">int</span>))</span><br><span class="line">    <span class="keyword">return</span> w,b</span><br></pre></td></tr></table></figure>
<h2 id="propagation">propagation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Propagation</span>(<span class="params">w,b,X,Y</span>):</span></span><br><span class="line">    m=X.shape[<span class="number">1</span>]</span><br><span class="line">    Z=np.dot(w.T,X)+b</span><br><span class="line">    A=sigmoid(Z)       <span class="comment">#pay attention to </span></span><br><span class="line">    J=<span class="number">1</span>/m*np.<span class="built_in">sum</span>(-(Y*np.log(A)+(<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-A)))</span><br><span class="line">    dz=A-Y</span><br><span class="line">    dw=(<span class="number">1</span>/m)*np.dot(X,dz.T)</span><br><span class="line">    db=(<span class="number">1</span>/m)*np.<span class="built_in">sum</span>(dz)</span><br><span class="line">    grads=&#123;<span class="string">&quot;dw&quot;</span>:dw,</span><br><span class="line">            <span class="string">&quot;db&quot;</span>:db</span><br><span class="line">          &#125;</span><br><span class="line">    <span class="keyword">return</span> grads,J</span><br><span class="line">w,b,X,Y = np.array([[<span class="number">1</span>],[<span class="number">2</span>]]),<span class="number">2.</span>,np.array([[<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>],[<span class="number">3</span>,<span class="number">4</span>,-<span class="number">3.2</span>]]),np.array([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">grads,J=Propagation(w,b,X,Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dw=&quot;</span>,<span class="built_in">str</span>(grads[<span class="string">&#x27;dw&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;db=&quot;</span>,<span class="built_in">str</span>(grads[<span class="string">&#x27;db&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;J=&#x27;</span>,<span class="built_in">str</span>(J))</span><br></pre></td></tr></table></figure>
<h2 id="define-optimize">define optimize</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Propagation</span>(<span class="params">w,b,X,Y</span>):</span></span><br><span class="line">    m=X.shape[<span class="number">1</span>]</span><br><span class="line">    Z=np.dot(w.T,X)+b</span><br><span class="line">    A=sigmoid(Z)       <span class="comment">#pay attention to </span></span><br><span class="line">    J=<span class="number">1</span>/m*np.<span class="built_in">sum</span>(-(Y*np.log(A)+(<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-A)))</span><br><span class="line">    dz=A-Y</span><br><span class="line">    dw=(<span class="number">1</span>/m)*np.dot(X,dz.T)</span><br><span class="line">    db=(<span class="number">1</span>/m)*np.<span class="built_in">sum</span>(dz)</span><br><span class="line">    grads=&#123;<span class="string">&quot;dw&quot;</span>:dw,</span><br><span class="line">            <span class="string">&quot;db&quot;</span>:db</span><br><span class="line">          &#125;</span><br><span class="line">    <span class="keyword">return</span> grads,J</span><br><span class="line">w,b,X,Y = np.array([[<span class="number">1</span>],[<span class="number">2</span>]]),<span class="number">2.</span>,np.array([[<span class="number">1</span>,<span class="number">2</span>,-<span class="number">1</span>],[<span class="number">3</span>,<span class="number">4</span>,-<span class="number">3.2</span>]]),np.array([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">grads,J=Propagation(w,b,X,Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dw=&quot;</span>,<span class="built_in">str</span>(grads[<span class="string">&#x27;dw&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;db=&quot;</span>,<span class="built_in">str</span>(grads[<span class="string">&#x27;db&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;J=&#x27;</span>,<span class="built_in">str</span>(J))</span><br></pre></td></tr></table></figure>
<h2 id="define-predict">define predict</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">w,b,X</span>):</span></span><br><span class="line">    m=X.shape[<span class="number">1</span>]</span><br><span class="line">    Y_predict=np.zeros((<span class="number">1</span>,m))</span><br><span class="line">    A=sigmoid(np.dot(w.T,X)+b)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(A.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> A[<span class="number">0</span>,i]&gt;<span class="number">0.5</span>:</span><br><span class="line">            Y_predict[<span class="number">0</span>,i]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Y_predict</span><br></pre></td></tr></table></figure>
<h2 id="model">model</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span>(<span class="params">X_train,Y_train,X_test,Y_test,num_iterations=<span class="number">2000</span>,learning_rate=<span class="number">0.5</span>,print_cost=<span class="literal">False</span></span>):</span></span><br><span class="line">    w,b=initialize_with_zeros(X_train.shape[<span class="number">0</span>])</span><br><span class="line">    parameters,grads,costs=optimize(w,b,X_train,Y_train,num_iterations,learning_rate,print_cost)</span><br><span class="line">    w =parameters[<span class="string">&#x27;w&#x27;</span>]</span><br><span class="line">    b =parameters[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">    Y_predict_train=predict(w,b,X_train)</span><br><span class="line">    Y_predict_test=predict(w,b,X_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;train accuracy:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>-np.mean(np.<span class="built_in">abs</span>(Y_predict_test-Y_test))*<span class="number">100</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;train accuracy:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">100</span>-np.mean(np.<span class="built_in">abs</span>(Y_predict_train-Y_train))*<span class="number">100</span>))</span><br><span class="line">    d=&#123;<span class="string">&quot;costs&quot;</span>:costs,</span><br><span class="line">      <span class="string">&quot;Y_predict_test&quot;</span>:Y_predict_test,</span><br><span class="line">       <span class="string">&quot;Y_predict_train&quot;</span>:Y_predict_train,</span><br><span class="line">       <span class="string">&quot;w&quot;</span>:w,</span><br><span class="line">       <span class="string">&quot;b&quot;</span>:b,</span><br><span class="line">       <span class="string">&quot;learning_rate&quot;</span>:learning_rate,</span><br><span class="line">       <span class="string">&quot;num_iterations&quot;</span>:num_iterations      </span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test model </span></span><br><span class="line">d=model(train_set_x,train_set_y,test_set_x,test_set_y,num_iterations=<span class="number">2000</span>,learning_rate=<span class="number">0.005</span>,print_cost=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;train&quot;</span>,d[<span class="string">&quot;Y_predict_test&quot;</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Neural Network</category>
      </categories>
  </entry>
  <entry>
    <title>保研注意事项</title>
    <url>/2023/06/13/Postgraduate/</url>
    <content><![CDATA[<p>保研注意事项</p>
<span id="more"></span>
<ul>
<li>浙江大学（<strong>6月15日结束</strong>）</li>
</ul>
<p><a
href="https://www.eeban.com/forum.php?mod=viewthread&amp;tid=198589&amp;highlight=%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%2B%E7%94%B5%E5%AD%90">浙江大学信息与电子工程学院2023年暑期学术夏令营
- 浙江大学 - 保研论坛-保研经验分享 - Powered by Discuz!</a></p>
<p><a
href="http://www.isee.zju.edu.cn/2023/0517/c21109a2758376/page.htm">浙江大学信息与电子工程学院2023年全国优秀大学生暑期学术夏令营活动通知</a></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230613160017.png" /></p>
<ul>
<li>南京大学（<strong>6月15日结束</strong>）</li>
</ul>
<p><a
href="https://www.eeban.com/forum.php?mod=viewthread&amp;tid=198591&amp;highlight=%E5%8D%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%2B%E7%94%B5%E5%AD%90">2023年南京大学电子科学与工程学院优秀大学生夏令营
- 南京大学 - 保研论坛-保研经验分享 - Powered by Discuz!</a></p>
<p><a
href="https://ese.nju.edu.cn/89/9b/c22538a625051/page.htm">2023年南京大学电子科学与工程学院优秀大学生夏令营报名通知</a></p>
<p><a
href="https://table.nju.edu.cn/dtable/forms/6364632e-24f5-4972-9737-5c1b11e49ef6/">2023年南京大学电子科学与工程学院夏令营报名</a></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230613160326.png" /></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title>Pointer</title>
    <url>/2021/09/03/Point/</url>
    <content><![CDATA[<p>Review the knowledge of pointers</p>
<span id="more"></span>
<h1 id="pointer-category">Pointer Category</h1>
<ul>
<li><p>Pointer point the constant:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">&quot;chen&quot;</span>    <span class="comment">//statement a pointer point a constant</span></span><br></pre></td></tr></table></figure>
<p>because using <code>const</code>,so the Pointer can't change variable
in the address which it point ,so the statement as follows is incorrect
:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">name[<span class="number">3</span>]=<span class="string">&#x27;a&#x27;</span>					<span class="comment">//incorrect,pointer &quot;name&quot; can&#x27;t change constant </span></span><br></pre></td></tr></table></figure>
<p>but name is a normal pointer ,so it could change the items it
point,statement as follows are correct:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;zhang&#x27;</span>				<span class="comment">//change the address the pointer point ,correct</span></span><br></pre></td></tr></table></figure>
<p>Also,Even you have changed your string you point ,you still can't
change the string, Please somebody tell me why ,Thank you !</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">name[<span class="number">3</span>]=<span class="string">&#x27;y&#x27;</span>					<span class="comment">//incorrect,but I don&#x27;t know why!</span></span><br></pre></td></tr></table></figure></li>
<li><p>Constant Pointer</p>
<p>A pointer can't change the address it point ,but it still can change
the content it point,example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *<span class="keyword">const</span> name =<span class="string">&quot;chen&quot;</span>;     <span class="comment">//define a constant pointer</span></span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&#x27;a&#x27;</span>;					<span class="comment">//correct ,it can change the constent of pointer</span></span><br><span class="line">name = <span class="string">&quot;zhang&quot;</span>;					<span class="comment">//incorrect ,it can&#x27;t change the address it points</span></span><br></pre></td></tr></table></figure></li>
<li><p>Constant Pointer points to constant</p>
<p>A constant pointer points a constant ,the address pointer point is
unchangeable and the content of address is unchangeable,example :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> name=<span class="string">&quot;chen&quot;</span>;	<span class="comment">//define a constant pointer point the constant</span></span><br><span class="line">name[<span class="number">3</span>] = <span class="string">&#x27;q&#x27;</span>;					<span class="comment">//incorrect ,the constant is unchangeable</span></span><br><span class="line">name =<span class="string">&#x27;ninglang&#x27;</span>;				<span class="comment">//incorrect ,the address pointed is unchangeable </span></span><br></pre></td></tr></table></figure></li>
<li><p>Const</p>
<p>Using a const to define a <code>integer</code> variable ,the keyword
omitted is acceptable the definition as following is same:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LIMITS = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> LIMITS = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>formal parameters also can be describe by <code>const</code>,for
example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MAX</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>*ptr)</span></span></span><br></pre></td></tr></table></figure>
<p>the method promise the array can't be changed ,only be read.</p></li>
</ul>
<h1 id="pointer-array">Pointer array</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *arr[<span class="number">3</span>]=&#123;<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>,<span class="string">&#x27;ghi&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> *pArr = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The string array arr&#x27;s element :&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index=<span class="number">0</span>;index&lt;<span class="number">3</span>;index++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,arr[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The string arr&#x27;s first element&#x27;s every element:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> index = <span class="number">0</span>;index&lt;<span class="number">3</span>;index++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*(pArr+index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in fact , you see the definition of Pointer array ,It is like as
follows:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *arr[<span class="number">3</span>]=&#123;<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>,<span class="string">&#x27;ghi&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *pChar1 = <span class="string">&#x27;abc&#x27;</span>,*pChar2 = <span class="string">&#x27;def&#x27;</span>,*pChar3=<span class="string">&#x27;ghi&#x27;</span></span><br><span class="line"><span class="keyword">char</span> *arr[<span class="number">3</span>] = &#123;pChar1,pChar2,pChar3&#125;;</span><br></pre></td></tr></table></figure>
<p>At the same time :</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = pChar;   <span class="comment">//the arr first element is the pointer pChar</span></span><br></pre></td></tr></table></figure>
<p>and the <code>pChar</code> is pointing the 'abc''s first element 'a',
so we can use the code to print 'a'</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,pChar[<span class="number">0</span>]);   <span class="comment">//print &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">// print&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,pChar[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="pointer-function">Pointer Function</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;			<span class="comment">//normal function return integers</span></span><br></pre></td></tr></table></figure>
<p>This function declaration is normal ,but There are some difference in
next function declaration</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">fun</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br></pre></td></tr></table></figure>
<p>This function declaration is pointer function ,the return is a
pointer to <code>int</code> ,This is an address</p>
<h1 id="pointer-to-function">Pointer To Function</h1>
<p>To state a pointer to function ,which is a Pointer pointing function
.declaration form:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*fun)(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br></pre></td></tr></table></figure>
<p>There are two ways to assign values to pointer variables</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fun = &amp;function;</span><br><span class="line">fun = function;</span><br></pre></td></tr></table></figure>
<p>There are also two ways to call pointer to function</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">x=(*fun)();</span><br><span class="line">x=fun();</span><br></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*fun)(<span class="keyword">int</span> x,<span class="keyword">int</span> y);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//first kind </span></span><br><span class="line">	fun = add;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(*fun)(1,2)=&quot;</span>&lt;&lt;(*fun)(<span class="number">1</span>,<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//second kind</span></span><br><span class="line">	fun = &amp;sub;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;(*fun)(5,3)=&quot;</span>&lt;&lt;(*fun)(<span class="number">5</span>,<span class="number">3</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;fun(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="new-and-delete">New and Delete</h1>
<p>operation <code>new</code> can get a space from heap and return the
pointer to point the first address of the memory,and <code>delete</code>
can free the space</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="keyword">int</span> ; <span class="comment">//new dynamically allocate an integer memory space,assign the first address to pointer variable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;   	<span class="comment">//free the space allocated by new</span></span><br></pre></td></tr></table></figure>
<p><code>new</code> assign space for multidimensional array:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure>
<p><code>new</code> assign space with initial value:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> *p;</span><br><span class="line">	p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">99</span>);      <span class="comment">//initial value</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;*p;</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="malloc-free-get-space">Malloc &amp;&amp; Free get space</h1>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>Python 机器学习</title>
    <url>/2022/01/19/Python%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>下面是本人总结的Python机器学习-图像处理的步骤</p>
<span id="more"></span>
<h1 id="环境配置垃圾分类项目">环境配置（垃圾分类项目）</h1>
<p>项目使用树莓派4B，具体流程如下</p>
<ul>
<li>下载<a
href="https://ninglang.lanzoup.com/ilCsRyzoo7e">win32_disk_imager</a>,烧录<a
href="https://pan.baidu.com/s/1wfXBpk6R3wdQg5n0t9gdpg?pwd=969m">镜像</a>,在BOOT分区下建立文件名为<code>SSH</code>的文件，无后缀</li>
<li>下载<a
href="https://ninglang.lanzoup.com/i16xuyzp40d">PUTTY</a>(记得将后缀<code>it</code>删除)和<a
href="https://ninglang.lanzoup.com/iDj5nyzp46j">VNC</a></li>
<li>或者使用<a
href="https://ninglang.lanzoup.com/itIFAz1bd4j">xshell</a>和<a
href="https://ninglang.lanzoup.com/in19iz1b7ze">xftp</a>操作</li>
<li>使用SSH连接树莓派，树莓派自带Python3和Python2，使用pip配置环境</li>
</ul>
<ol type="1">
<li>修改<code>deb</code>镜像源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi</span><br></pre></td></tr></table></figure>
<p>修改树莓派pip源。请记住，<code>/etc/pip.conf</code>,里面默认是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">extra-index-url=https://www.piwheels.org/simple</span><br></pre></td></tr></table></figure>
<p>请不要修改,这个网址专为树莓定制</p>
<p>pip永久换源(win和linux通用)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>linux里面的永久源的地址为<code>/home/pi/.config/pip/pip.conf</code>,需要修改可以直接编辑</p>
<p>也可以这样换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=100</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">extra-index-url= http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=</span><br><span class="line">        pypi.tuna.tsinghua.edu.cn</span><br><span class="line">        mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p>这里的<code>trusted-host</code>只有当链接不是https时需要，即将阿里云的网站改为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">extra-index-url= https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure>
<h2 id="ubuntu配置opencv">ubuntu配置opencv</h2>
<ul>
<li>网上所有的教程都无法直接成功，所以，个人的踩坑经历</li>
<li>首先去<a
href="https://www.piwheels.org/project/opencv-python/">opencv-python</a>下载对应Python版本的opencv</li>
<li>然后移入树莓派中，使用<code>pip3 install ...whl</code>即可成功</li>
<li>很多的包都有这个特点，所以，要注意这个点，当自己的树莓派无法安装时，可以考虑这个专门为树莓派做的网站</li>
</ul>
<p>安装多线程工具<code>axel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install axel</span><br></pre></td></tr></table></figure>
<p>下载方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">axel 参数 文件下载地址</span><br><span class="line">常用可选参数：</span><br><span class="line">-s   设置最大下载速度，如果限制到512KB/s，则填写512000</span><br><span class="line">-n   指定连接数</span><br><span class="line">-o   指定另存为目录，或者指定的目录+文件名</span><br><span class="line">-H   指定header</span><br><span class="line">-U 指定useragent</span><br><span class="line">-q   静默模式</span><br><span class="line">-a   更改默认进度条样式</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">axel -n 30 http://archive.cloudera.com/cm5/cm/5/cloudera-manager-centos7-cm5.15.2_x86_64.tar.gz</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>树莓派实现联邦学习</title>
    <url>/2023/12/29/Raspberry_federated_learning/</url>
    <content><![CDATA[<p>树莓派联邦学习部署</p>
<span id="more"></span>
<h1 id="miniconda-安装">MiniConda 安装</h1>
<p>设置conda为环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#conda安装路径</span></span><br><span class="line">/home/ninglang/minisconda3/bin</span><br></pre></td></tr></table></figure>
<p>编辑<code>~/.bashrc</code>,追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/ninglang/miniconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>保存，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./.bashrc</span><br></pre></td></tr></table></figure>
<p>conda换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>新建conda环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name fl python=3.8</span><br></pre></td></tr></table></figure>
<p>conda查看环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>
<p>conda激活环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate Federated_Learn</span><br></pre></td></tr></table></figure>
<p>pip换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<h1 id="创建python3.8">创建Python3.8</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name fl python=3.8.8</span><br></pre></td></tr></table></figure>
<h1 id="torch的安装">Torch的安装</h1>
<p>对于树莓派(使用arrch64的ubuntu或者raspberryos),先到<a
href="https://pypi.org/project/torch/1.8.0/#modal-close">torch-wheel</a>下载文件，再手动安装</p>
<ul>
<li>对于没有GPU的板子，直接安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注意:torch和torchvision一一对应，请安装对应的版本</span></span><br><span class="line">pip install torch==1.10.0+cpu torchvision==0.11.1+cpu -f https://download.pytorch.org/whl/torch_stable.html</span><br></pre></td></tr></table></figure>
<h2 id="jupyter配置">jupyter配置</h2>
<ul>
<li>先生成jupyter的配置文件夹</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>可以看到生成了<code>/home/ninglang/.jupyter/jupyter_notebook_config.py</code>.</p>
<ul>
<li>设置jupyter的密码,运行下面命令之后输入密码即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure>
<ul>
<li>修改配置文件（端口，ip，外部访问）修改<code>/home/ninglang/.jupyter/jupyter_notebook_config.py</code>文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span>       <span class="comment">#在所有的网卡接口上开启服务</span></span><br><span class="line"> </span><br><span class="line">c.NotebookApp.port =8888 <span class="comment">#可自行指定一个端口, 访问时使用该端口7777</span></span><br><span class="line"> </span><br><span class="line">c.NotebookApp.allow_remote_access = True  <span class="comment">#允许远程</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>Qt</title>
    <url>/2021/09/20/Qt1/</url>
    <content><![CDATA[<p>Qt问题总汇</p>
<span id="more"></span>
<h1 id="信号和槽">信号和槽</h1>
<h2 id="连接函数connect">连接函数：connect</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(信号发送者，发送的信号（函数的地址），信号接受者，处理的槽函数（函数的地址）);</span><br><span class="line"><span class="built_in">connect</span>(Button,&amp;QpushButton::clicked,<span class="keyword">this</span>,&amp;Qwidget::close);</span><br></pre></td></tr></table></figure>
<p>松散耦合：发送端和接受端的松散耦合</p>
<h2 id="自定义槽函数和信号">自定义槽函数和信号</h2>
<ul>
<li>signal只能声明，不能定义，写在发送信号的类的<code>signals</code>中，返回值是void</li>
<li>slot需要声明，需要在cpp文件中定义，写在<code>public slots</code>文件中，返回值是void</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">class.h</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// slots function area or declaration in public</span></span><br><span class="line">    <span class="comment">//return is void,need declaration ,and realize.</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class.<span class="function">cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Studnet::treat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;treat!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">signals:</span><br><span class="line">    <span class="comment">//custom signals</span></span><br><span class="line">    <span class="comment">//return is void,only declaration ,Needn&#x27;t realize</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>定义槽和信号后，需要定义触发函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">weidget:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">classover</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">classover</span><span class="params">()</span></span>&#123;</span><br><span class="line">        emit zt-&gt;hungry();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>要先定义<code>connect</code>再调用<code>classover</code>。</p>
<h3 id="信号的重载">信号的重载</h3>
<p>信号函数和槽函数直接重载时，会因为二义性而导致程序无法编译，于是我们需要用函数指针来代替直接给地址，方法如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>(Teacher:: *teachersignal)(QString)=&amp;Teacher::hungry;</span><br><span class="line"><span class="keyword">void</span>(Studnet:: *studentslot)(QString) = &amp;Studnet::treat;    </span><br><span class="line"></span><br><span class="line">connect(zt,teachersignal::hungry,st,studentslot);</span><br></pre></td></tr></table></figure>
<ul>
<li>问题：这里的两个函数指针是如何定义的？？？</li>
<li>答：</li>
</ul>
<p>Qstring 转char *</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Qstring.toUtf8().data()  <span class="comment">//先转utf8，再转char*</span></span><br></pre></td></tr></table></figure>
<h3 id="信号连接信号">信号连接信号</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">connect(btn,&amp;QPushButton::clicked,zt,teachersignal2);</span><br></pre></td></tr></table></figure>
<p>直接将两个信号用connect相连</p>
<ul>
<li><p>断开信号 disconnect</p></li>
<li><p>多个信号一个槽</p></li>
<li><p>多个槽连接一个信号</p></li>
<li><p>信号和槽的参数类型必须一一对应，信号参数个数可以大于槽函数的参数个数</p></li>
</ul>
<p>lambda函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//connect 一般使用方法</span></span><br><span class="line"><span class="built_in">connect</span>(信号发送者，发送的信号（函数的地址），信号接受者，处理的槽函数（函数的地址）);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda 使用的方式</span></span><br><span class="line"><span class="built_in">connect</span>(btn3,&amp;QPushButton::clicked,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">        btn3-&gt;<span class="built_in">move</span>(<span class="number">200</span>,<span class="number">100</span>);&#125;);</span><br><span class="line"><span class="comment">//可以省略this</span></span><br><span class="line"><span class="built_in">connect</span>(btn3,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        btn3-&gt;<span class="built_in">move</span>(<span class="number">200</span>,<span class="number">100</span>);&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>问：为什么lambda的函数不像之前的函数一样，需要取地址符<code>&amp;</code>.</li>
<li>答：<strong>可以不加取地址符，但是早期Qt并不支持</strong>.</li>
</ul>
<h1 id="模态与非模态">模态与非模态</h1>
<h2 id="模态">模态</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">connect(ui-&gt;actionnew,&amp;QAction::triggered,[=]()&#123;</span><br><span class="line">    QDialog dlg(<span class="keyword">this</span>);</span><br><span class="line">    dlg.resize(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">    dlg.exec();  <span class="comment">//对话框窗口保持</span></span><br><span class="line">    qDebug()&lt;&lt;<span class="string">&quot;modal dialog!&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="非模态">非模态</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[=]()&#123;QDialog dig2(<span class="keyword">this</span>);</span><br><span class="line">         dig2.show();  <span class="comment">//无法保持，一闪而过</span></span><br><span class="line">        &#125;</span><br><span class="line">QDialog *dig2 =<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</span><br><span class="line">   dig2-&gt;show();	<span class="comment">//可以保持(堆区)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>问：指针调用和对象调用为什么会出现不一样的结果？</li>
<li>答：</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>DSP</title>
    <url>/2022/03/14/Signals%20and%20Systems/</url>
    <content><![CDATA[<p>信号与系统笔记</p>
<p>DSP相关讨论</p>
<span id="more"></span>
<h1 id="常用指令">常用指令</h1>
<ol type="1">
<li>导出时设置颜色为透明色:</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(gca,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;none&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>设置matlab图像默认为白色：</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(<span class="number">0</span>,<span class="string">&#x27;defaultfigurecolor&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>设置动画：</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 画一下sinc函数随着参数变化时的图像变化</span></span><br><span class="line">fig = <span class="built_in">figure</span>;</span><br><span class="line"><span class="comment">% x = linspace(0, 2*pi, 100);</span></span><br><span class="line">t=<span class="number">-3</span>:<span class="number">0.001</span>:<span class="number">3</span>;</span><br><span class="line">im = cell(<span class="number">1</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:<span class="number">15</span></span><br><span class="line"></span><br><span class="line">    clf(fig);</span><br><span class="line">    dis=<span class="number">0.8</span>;</span><br><span class="line">    func1= sinc_me(t,<span class="number">10</span>*<span class="built_in">i</span>);</span><br><span class="line">    func2= sinc_me(t<span class="number">-0.02</span>*<span class="built_in">pi</span>,<span class="number">10</span>*<span class="built_in">i</span>);</span><br><span class="line">    subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">plot</span>(t,func1);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line">    <span class="built_in">plot</span>(t,func2);</span><br><span class="line">    <span class="built_in">legend</span>(<span class="string">&#x27;N=10&#x27;</span>,<span class="string">&#x27;N=10&#x27;</span>);</span><br><span class="line">    subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">plot</span>(t,func1+func2);</span><br><span class="line">    set(get(gca, <span class="string">&#x27;Title&#x27;</span>), <span class="string">&#x27;String&#x27;</span>, num2str(<span class="built_in">i</span>));</span><br><span class="line">    <span class="built_in">hold</span> off;</span><br><span class="line">    <span class="comment">% plot(x, y, &#x27;Color&#x27;, all_colors(1, :), &#x27;LineWidth&#x27;, 2);</span></span><br><span class="line">    <span class="comment">% xlim([0, 2*pi]);</span></span><br><span class="line">    pause();</span><br><span class="line">    <span class="comment">% 注释下面两句话可以看到动态输出</span></span><br><span class="line">    <span class="comment">% frame = getframe(fig);</span></span><br><span class="line">    <span class="comment">% im&#123;i&#125; = frame2im(frame);</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% 下面是保存成 gif</span></span><br><span class="line"><span class="comment">% filename = &#x27;./Matlab_2_7_6_Curve_Animation1.gif&#x27;; </span></span><br><span class="line"><span class="comment">% for idx = 1:20</span></span><br><span class="line"><span class="comment">%     % 制作gif文件，图像必须是index索引图像</span></span><br><span class="line"><span class="comment">%     [A, map] = rgb2ind(im&#123;idx&#125;, 256);</span></span><br><span class="line"><span class="comment">%     if idx == 1</span></span><br><span class="line"><span class="comment">%         imwrite(A, map, filename, &#x27;gif&#x27;, &#x27;LoopCount&#x27;, Inf, &#x27;DelayTime&#x27;, 0.3);</span></span><br><span class="line"><span class="comment">%     else</span></span><br><span class="line"><span class="comment">%         imwrite(A, map, filename, &#x27;gif&#x27;, &#x27;WriteMode&#x27;, &#x27;append&#x27;, &#x27;DelayTime&#x27;, 0.3);</span></span><br><span class="line"><span class="comment">%     end</span></span><br><span class="line"><span class="comment">% end</span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>设置latex显示</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">set(get(gca, <span class="string">&#x27;Title&#x27;</span>), <span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;$x_1(k)$&#x27;</span>, <span class="string">&#x27;interpreter&#x27;</span>,<span class="string">&#x27;latex&#x27;</span>,<span class="string">&#x27;Fontsize&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<ol start="5" type="1">
<li>设置画布大小（其中0.7和0.6是画布的长和宽）</li>
</ol>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">figure</span><span class="punctuation">(</span><span class="operator">&#x27;</span><span class="variable">units</span><span class="operator">&#x27;,&#x27;</span><span class="variable">normalized</span><span class="operator">&#x27;,&#x27;</span><span class="variable">position</span><span class="operator">&#x27;,</span><span class="punctuation">[</span><span class="number">0.1</span><span class="operator">,</span><span class="number">0.1</span><span class="operator">,</span><span class="number">0.7</span><span class="operator">,</span><span class="number">0.6</span><span class="punctuation">]</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure>
<p>​</p>
]]></content>
      <categories>
        <category>电子</category>
      </categories>
  </entry>
  <entry>
    <title>学业生涯规划指导经验交流贴</title>
    <url>/2023/10/31/Study%20exchange%20meeting/</url>
    <content><![CDATA[<p>欢迎交流</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫小结</title>
    <url>/2021/02/02/Web%20Crawler/</url>
    <content><![CDATA[<p>爬着爬着，就进局子里了...........</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>​
在刚开始学python的时候就对这一方面非常感兴趣，但是奈何当时实力太水，跟着mooc学了很久，也才刚刚把基础学完，连数据处理都不太会，而且在这次之前又学了一下c，三斤八两，啥都不会，刚开始在中国慕课mooc上跟着嵩天老师学习，发现他好多的例子都已经过时，很多之前能够爬取的网站现在已经无法爬取，当然也不是没有办法，只是我太水了，BeautifulSoup库也一直没有搞懂，因为我对html并不是很了解，于是乎chrome的审查工具用得也不是太好，刚好上次尝试了今日校园自动签到后，在优化那位大佬的程序时，我突然意识到里面很多的语法其实很有逻辑和体系，而他之所以能写出300多行的代码来造福广大学子，在于他强调的：“我模拟的整个今日校园的过程”，而这个过程，就是抓包，于是我在突然想起了点什么，我的fiddle，好像躺在我的电脑中睡了很久😂，后来在这个过程我想起的很多去年CTF教我的一些知识（但是我没学会），还有那个可爱的nmap</p>
<h2 id="爬虫">爬虫</h2>
<h3 id="有道翻译">有道翻译</h3>
<p>​ 打开开发者工具后，我们对我们输入的字符“are you
ok”,进行抓包，马上我们可以看到，其他的数据都是以图片的形式，而这里是一个多次出现，但是咋们不清楚的包，于是我们查看一下headers，发现是post方法，</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202122437.png"
alt="有道翻译抓包分析" />
<figcaption aria-hidden="true">有道翻译抓包分析</figcaption>
</figure>
<p>观察Response
,发现里面刚好有我们想要的翻译结果，于是我们只要模拟浏览器去post，然后接受相应的json数据格式，即可！</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202130928.png" /></p>
<p>我们首先还是要去看看这个post到底上传了什么form，然后这个header到底有什么要求，首先我们观察到了这个post的地址，但这里还是有坑，这是我后面的才发现的</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202131331.png" /></p>
<p>观察webform，把它复制粘贴到代码就可以了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202131808.png" /></p>
<p>​
但是，这里有问题了：返回值有问题，百度一下，原来那个网址有问题，只能是<code>http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule</code>
,<code>_o</code>必须要被去掉 （这里是因为有道翻译的反爬虫机制）</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202131936.png" /></p>
<p>把url改回来，再使用json的loads函数将数据转化为字典，提取出翻译就可以了，把它改的更人性化一点，例如接受输入可以多次输入，ok,这样咋们就实现了在cmd里翻译啦！</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202132940.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202134012.png" /></p>
<h3 id="百度图片">百度图片</h3>
<p>​ <img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202134401.png" />如图，爬取百度图片结果的所有图片，打开开发者工具，找出图片的实际地址，多观察几张，发现这个图片都在<code>&lt;li&gt;</code>标签下</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202134718.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202134951.png" /></p>
<p>这时候我们可以选择BeautifulSoup或者re正则表达式，我使用了正则表达式，提取了所有的图片url，然后把这些链接全部get即可</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202140041.png" /></p>
<p>这样就把一页的图片全部爬取下来啦，至于为什么只有把29张，是因为百度的图片加载使用了一种叫做<code>Ajax</code>技术，这样的话只能采取别的方法去爬取了，我现在还不知道如何突破😂</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202140538.png" /></p>
<h3 id="b站视频">B站视频</h3>
<p>​
刚好看到B站也有相关的学习视频，方法和上面的第一个第二一样，算是两者的综合吧，需要用到re(或者BeautifulSoup),设置好请求头，我自己做这个的时候，并没有添加很多对用户界面很友好的东西，但是还是去借鉴了一下前辈的经验，弄了个进度条</p>
<p>先下载这个<a href="">压缩包</a></p>
<p>整体来说网速还是不是错的，我家是100兆的光纤，由于我的电脑离路由器比较远，网速只有这个效果，但是这个这个爬虫还是能够把我家的网爬满。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202141946.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202142502.png" /></p>
<p>先把压缩包解压，一个放在D盘，一个放在桌面，第二，配置<a
href="https://jingyan.baidu.com/article/a3f121e4ceda4ffc9052bbc5.html">环境变量</a>，再上方的用户变量的PATH中双击然后打开</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202143548.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202144106.png" /></p>
<p>找到D盘里的刚刚放进去的<code>ffmpeg</code> 打开<code>bin</code>
目录，把那个文件夹地址复制，例如我的是<code>D:\ffmpeg-N-100892-g44e27d937d-win64-lgpl-shared-vulkan\bin</code>粘贴到新增的Path中，然后一路ok，添加完用户变量，就可以使用软件了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202144456.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202144215.png" /></p>
<p>软件的使用很简单，它的界面只是一个终端界面，你只要将B站视频网址粘贴，回车即可，默认视频的最高画质(不开会员的情况下)😂</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210202145703.png" /></p>
<p>为什么要把它添加到环境变量呢，因为B站爬取的视频其实是分音频和视频的，而ffmpeg是一个音视频处理软件，我是先将音频(<code>1.mp3</code>)和视频(<code>2.mp4</code>)分别爬取，然后用ffmpeg把它们拼接在一起<code>(自动删除1.mp3和1.mp4)</code>，我找了很多教程，实在不会把ffmpeg源代码整合到我的代码中，于是就需要它的存在，并且要把它配置为用户变量，否则</p>
<h2 id="抓包">抓包</h2>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>出租车载客模型</title>
    <url>/2021/08/15/Taxi%20passenger%20model/</url>
    <content><![CDATA[<p>数学建模.Are you kidding me ? 😭我要疯了！</p>
<span id="more"></span>
<h1 id="问题分析">问题分析</h1>
<ul>
<li>司机去等候区等候，需要一定的<strong>时间</strong>，等待时间取决于<strong>出租车</strong>和<strong>乘客数量</strong></li>
<li>不载客人出机场，直接去市区把客人拉回来，但是<strong>空载费用</strong>和<strong>潜在用户的损失</strong></li>
<li>已知：蓄车池<strong>车的数量</strong>，司机<strong>个人的判断(决策)</strong>，<strong>航班的数量</strong>，<strong>人数</strong></li>
</ul>
<h1 id="问题一">问题一</h1>
<ul>
<li><p>分析影响司机<strong>决策</strong>的因素，其与<strong>乘客数量</strong>，<strong>不同情况的收益</strong>，选出最优决策</p></li>
<li><p>因素确定：</p>
<p>时间<span class="math inline">\(T_0\in[T_1,T_2]\)</span>航班总数<span
class="math inline">\(N_{f2}\)</span>,人数为<span
class="math inline">\(M_{p2}\)</span>.</p>
<p>出租车总数，等待时间不超过预期<span
class="math inline">\(N_{taxi}\)</span>,选择等待</p>
<p>空载率<span
class="math inline">\(\beta\)</span>和机场通行率,空载率越低，载客的可能性越高，更倾向于半路接客，通行能力为<span
class="math inline">\(v_{leave}\)</span>,是指单位时间内通过出租车载客离开的组数</p>
<p>机场与市中心的距离<span
class="math inline">\(L\)</span>,距离越大越倾向等待，时间的等待上线提高</p>
<p>航班载客数： <span class="math display">\[
U(M_1,M_2)=\begin{cases}0&amp;M_0\notin[M_1.M_2]\\\frac{1}{M_2-M_1}&amp;M_0\in[M_1,M_2]\end{cases}
\]</span></p>
<p><span class="math display">\[
M_p=M_{p1}+M_{p2}\\
M_{p1}=\sum_{i=1}^{N_{f1}}M_{0i},M_{p2}=\sum_{i=1}^{N_{f2}}M_{0i}
\]</span></p>
<p><span class="math inline">\(N_{f1}\)</span>为为时间<span
class="math inline">\([T_1,T_0]\)</span>内机场的预计滞留人数，<span
class="math inline">\(N_{f2}\)</span>为时间<span
class="math inline">\([T_0,T_2]\)</span>内机场来的人数</p>
<p>其中<span
class="math inline">\(M_{p1}\)</span>为司机估计的机场滞留人数，<span
class="math inline">\(M_{p2}\)</span>为司机估计机场抵达人数</p>
<p>里程：假设里程正态分布 <span class="math display">\[
\xi(x)\sim N(\mu,\sigma^2)
\]</span> 概率密度图为</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210814135757913.png" /></p>
<h2 id="收入">收入</h2>
<p>计价规则： <span class="math display">\[
\begin{cases}p_0&amp;x\le a\\p_0+p_1(x-a)&amp;a&lt;x\le b
\\p_0+p_1(b-a)+p_2(x-b)&amp;x&gt;b\end{cases}
\]</span> 时间成本：</p>
<p>​ 空载: <span class="math inline">\(C_{free}\)</span></p>
<p>​ 等待：<span class="math inline">\(C_{wait}\)</span></p>
<p>等待时间成本<span
class="math inline">\(M_{plain}\)</span>为时间段内机场乘客选择乘坐出租车的总数，与机场的总乘客数<span
class="math inline">\(M_p\)</span>成比例关系，即<span
class="math inline">\(M_{plain}=\mu_1M_p\)</span>,<span
class="math inline">\(\mu_1\)</span>为机场乘客选择出租车的比例。 <span
class="math display">\[
t_{wait}=\frac{M_{plain}}{v_{leave}}
\]</span> 总出行人数除以单位时间出行人数</p>
<p>​ 出租行驶载客:概率<span
class="math inline">\(\gamma=1-\beta\)</span>.司机载客时间为<span
class="math inline">\(L_{pa}=L_{drive}\cdot\gamma\)</span>,其中时间成本的具体表达式为:
<span class="math display">\[
C_{time}=C_{wait}+C_{free}=G(L_{paw})+G(L_{paf})\\L_{paw}=t_{wait}\cdot
v_{taix} \cdot \gamma;L_{paf}=t_{free}\cdot v_{taix}\cdot \gamma
\]</span> <span
class="math inline">\(G(L_{paw}),G(L_{paf})\)</span>为等待和空载的计价收入</p>
<h2 id="成本">成本</h2>
<p><span class="math display">\[
C_g(x)=A \cdot S_{gax}\cdot x
\]</span></p></li>
<li><p>方案确立</p></li>
<li><p>等待 <span class="math display">\[
W_1=G(x)-C_g(x)-C_{time}\\
=G(x)-C_{g}(L)-G\left(t_{\text {wait }} v_{\text {taxi }}
\gamma\right)-G\left(t_{\text {free }} v_{\text {taxi }} \gamma\right)\\
t_{\text {free }}=\frac{L-x}{v_{\text {taxi }}}
\]</span></p></li>
</ul>
<p>空载时间为总路程减去载客路程除以汽车的速度，</p>
<ul>
<li><p>空载 <span class="math display">\[
W_2=-C_g(x)-C_{time}=-C_g(L)-G(t_{free}v_{taxi}\gamma)\\
t_{free}=\frac{L}{v_{taxi}}
\]</span></p></li>
<li><p>模型求解</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210815231705524.png" /></p>
<p>假设参数，<span
class="math inline">\(L=25.1km\)</span>.出租车的空载率为<span
class="math inline">\(\beta=0.4\)</span>，车速为<span
class="math inline">\(v_{leave}=1\)</span>。出租车出行占总人数比例为<span
class="math inline">\(\mu_1=0.3\)</span>,平均同行人数为<span
class="math inline">\(\mu_2=2\)</span>,后期设置一般数据验证</p></li>
</ul>
<h1 id="问题二">问题二</h1>
<ul>
<li><p>选一个机场，给出司机的选择(司机的决策(<strong>数据</strong>))说出合理性和因素的依赖性</p></li>
<li><p>数据收集</p>
<p>北京首都机场</p></li>
<li><p>表格数据</p>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>9~10</th>
<th style="text-align: center;">10~11</th>
<th style="text-align: right;">11~12</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>忙季(节假日)</td>
<td>30</td>
<td style="text-align: center;">27</td>
<td style="text-align: right;">15</td>
</tr>
<tr class="even">
<td>淡季(工作日)</td>
<td>1</td>
<td style="text-align: center;">3</td>
<td style="text-align: right;">3</td>
</tr>
</tbody>
</table></li>
<li><p>价格 <span class="math display">\[
晚上：G(x)\left\{\begin{array}{lc}
13, &amp; x \leq 3 \\
13+2.76 \times(x-3), &amp; 3&lt;x \leq 15 \\
13+2.76 \times 12+2.76 \times 1.5 \times(x-15), &amp; x&gt;15
\end{array}\right.
\]</span></p>
<p><span class="math display">\[
早上：G(x)=\left\{\begin{array}{lc}
13, &amp; x \leq 3 \\
13+2.76 \times(x-3), &amp; 3&lt;x \leq 15 \\
13+2.76 \times 12+2.76 \times 1.5 \times(x-15), &amp; x&gt;15
\end{array}\right.
\]</span></p>
<p>代入数据，可以得到闲暇时期和忙碌时期的不同图像</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210815164119981.png" /></p>
<p>然后可以根据排队方案一的收益</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/Untitled%20Diagram1.png"
alt="image-20210815164119981" />
<figcaption aria-hidden="true">image-20210815164119981</figcaption>
</figure>
<p>不同距离和行驶的速度也因为时间成本是不一样的得到的收益</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210815164514951.png" /></p></li>
</ul>
<h1 id="问题三">问题三</h1>
<ul>
<li><p>有两条道路，如何安排让乘客和司机的等待时间最小</p></li>
<li><p>建立模型:</p>
<p>目标函数：乘车效率</p>
<p>决策变量：上车点数</p>
<p>环境参量：单位时间，达到机场的平均出租车数和平均人数为<span
class="math inline">\(\alpha_1\)</span>,<span
class="math inline">\(\lambda_1\)</span>为到达机场的人数，<span
class="math inline">\(\lambda_2\)</span>平均每分钟到达机场的乘客数，<span
class="math inline">\(\alpha_1=\frac{\lambda_1}{\lambda_2}\)</span>;</p>
<p>模型：</p>
<p><span class="math display">\[\begin{aligned}max
\quad\eta=\frac{1}{\sum_{i=1}^{n}\frac{t_{pi}}{n}+\sum_{j=1}^{m}\frac{t_{cj}}{m}}\\s.t.\quad
k\le12\end{aligned}\]</span></p>
<p>求解</p></li>
</ul>
<h1 id="问题四">问题四</h1>
<ul>
<li><p>收益和里程成正比，对于短途的载客给予优先权，使得大家的工资尽量均衡，该如何给其优先权,注意这里假设的长途和短途的定义</p></li>
<li><p>短途</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/Untitled%20Diagram.png" /></p></li>
</ul>
<p><span class="math display">\[
\begin{aligned}
&amp;\beta_{\text {short }}=\frac{m / v_{\text {leave }}+x_{\text {share
}} / v_{\text {tax } i}+m_{0} / v_{\text {leave }}}{L / v_{\text {taxi
}}+m / v_{\text {leave }}+x_{\text {short }} / v_{\text {taxi
}}+x_{\text {short }} / v_{\text {taxi }}+m_{0} / v_{\text {leave }}+L /
v_{\text {taxi }}} \\
&amp;\qquad=\frac{m / v_{\text {leave }}+x_{\text {short }} / v_{\text
{taxi }}+m_{0} / v_{\text {leave }}}{2 L / v_{\text {taxi }}+m /
v_{\text {leave }}+2 x_{\text {taxi }} / v_{\text {taxi }}+m_{0} /
v_{\text {leave }}} \\&amp; W_{\text {short }}=\frac{2 W_{L}+W_{x}}{2 L
/ v_{\text {taxi }}+m / v_{\text {leave }}+2 x_{\text {short }} /
v_{\text {taxt }}+m_{0} / v_{\text {leave }}}
\end{aligned}
\]</span></p>
<ul>
<li><p>长途</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210815164007363.png" /></p></li>
</ul>
<p><span class="math display">\[
\beta_{long}=\frac{m/v_{leave}}{2L/v_{taxi}+m/v_{leave}}\qquad
W_{long}=\frac{2W_L+W_{city}(T)}{2L/v_{taxi}+m/v_{leave}+T}
\]</span></p>
<ul>
<li><span class="math inline">\(\epsilon_1\)</span>和<span
class="math inline">\(\epsilon_2\)</span>为权重因子,<span
class="math inline">\(\Delta\beta_{max}\)</span>和<span
class="math inline">\(\Delta
W_{max}\)</span>为归一化因子，变量计算方法如下: <span
class="math display">\[
\begin{aligned}\min \quad
g\left(m_{0}\right)=\varepsilon_{1}\left(\frac{\beta_{\text {l0ng
}}-\beta_{\text {short }}}{\Delta \beta_{\max
}}\right)^{2}+\varepsilon_{2}\left(\frac{W_{\text {long }}-W_{\text
{short }}}{\Delta W_{\max }}\right)^{2}\\\begin{cases}
\beta_{\text {short }}=\frac{m / v_{\text {leave }}+x / v_{\text {taxi
}}+m_{0} / v_{\text {leave }}}{2 L / v_{\text {taxi }}+m / v_{\text
{leave }}+2 x / v_{\text {taxi }}+m_{0} / v_{\text {leave }}} \\
W_{\text {short }}=\frac{2 W_{L}+W_{x}}{2 L / v_{\text {taxi }}+m /
v_{\text {leave }}+2 x / v_{\text {taxi }}+m_{0} / v_{\text {leave }}}
\\
\beta_{\text {long }}=\frac{m / v_{\text {leave }}}{2 L / v_{\text {taxi
}}+m / v_{\text {leave }}} \\
W_{\text {long }}=\frac{2 W_{L}+W_{\text {city }}(T)}{2 L / v_{\text
{taxi }}+m / v_{\text {leave }}+T}
\end{cases}\end{aligned}
\]</span></li>
</ul>
<p>计算即可</p>
<h1 id="代码">代码</h1>
]]></content>
      <categories>
        <category>Math model</category>
      </categories>
  </entry>
  <entry>
    <title>Windows常用指令和工具</title>
    <url>/2022/01/05/Windows_command/</url>
    <content><![CDATA[<p>电脑常用的一些操作</p>
<span id="more"></span>
<h1 id="创建软链接用来移动文件">创建软链接（用来移动文件）</h1>
<p>现在我的F盘里面有一个文件夹blog</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220105142049865.png" /></p>
<p>然后这时我需要给它在C盘的user的ninglang目录下面创建一个软链接，方便我访问</p>
<p>指令如下</p>
<p><code>mklink /j 链接的地址 链接所指的地方</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /j </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mklink /j <span class="string">&quot;C:\Users\ninglang\Blog&quot;</span> <span class="string">&quot;F:\Blog&quot;</span></span><br></pre></td></tr></table></figure>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220105142604261.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220105142414142.png" /></p>
<h1 id="关闭windows更新">关闭Windows更新</h1>
<p>安装<code>wu10man</code>，点击该处访问其<a
href="https://github.com/WereDev/Wu10Man">github</a>.</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220105143006087.png" /></p>
<p>安装打开<code>wu10man</code>,选择即可</p>
<h1 id="右键菜单规定">右键菜单规定</h1>
<p>下载ccleaner</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220105143224777.png" /></p>
<p>对其相应的进行调整即可</p>
<h1 id="c盘清理">C盘清理</h1>
<h2 id="清理pagefile">清理<code>Pagefile</code></h2>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084122466.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084143390.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084103204.png" /></p>
<p>这样，你就可以看到c盘的系统文件，其中有两个文件比较大，共占据了20G</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084624348.png" /></p>
<p>然后打开环境变量的设置</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084332611.png" /></p>
<p>就可以看到这个pagefile，点击更改。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084430193.png" /></p>
<p>通过操作这几个按钮，将其他盘设置为<code>system managed</code>,将C设置为<code>None</code>点击OK，重启电脑</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110084852791.png" /></p>
<h2 id="清理hiberfil">清理<code>hiberfil</code></h2>
<p>hiberfil占用的储存也挺大，我的电脑高达6G，只需要管理员运行<code>cmd</code>，然后运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powercfg.exe /hibernate off</span><br></pre></td></tr></table></figure>
<p>即可，这个选项会关闭休眠，C盘文件将会自动删除，具体好坏自行取舍，如需恢复，请输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">powercfg.exe /hibernate on</span><br></pre></td></tr></table></figure>
<h1 id="磁盘分析软件">磁盘分析软件</h1>
<p>这里，推荐一个磁盘分析软件，<a
href="https://ninglang.lanzouq.com/i2Z7gykzh5g">SpaceSniffer</a>,需要管理员运行程序</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110085625011.png" /></p>
<p>选择一个自己需要分析的盘符，即可，随后令其分析即可</p>
<h1 id="c盘扩容">C盘扩容</h1>
<p>首先，下载<a
href="https://link.jscdn.cn/lanzou/aHR0cHM6Ly9uaW5nbGFuZy5sYW56b3VmLmNvbS9pN3RYNHlsMDVyYw.exe">Mini
Partition Wizrd Free</a></p>
<p>如果电脑显示Bitlocker，如下图</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220315203922337.png" /></p>
<p>那么，你需要打开windows设置，安全与更新，然后选择设备加密，关闭加密</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220315204111792.png" /></p>
<p>关闭加密完成之后，　<font color='red'>管理员身份 </font>打开上面的软件，应该可以分区了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110090955027.png" /></p>
<p>选择有多余空间的盘<code>D</code>,右键，<code>move/resize</code>，然后输入你想要的<code>d</code>盘的大小，一定要大于里面已用空间！！！</p>
<p>右键C盘，选择分给的区扩容</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220316074023822.png" /></p>
<p>将进度条拉到最大，点击<code>OK</code>,点击左下角<code>apply</code>，如果出现报错，请在三个选项中点击<code>restart</code></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220110091354258.png" /></p>
<p>重启期间可能会出现代码，你无需理会，让它自动跑完即可。</p>
<h1 id="latex语法">Latex语法</h1>
<p>word中输入公式十分重要，但是部分语法和原生latex不太一致，下面介绍一种很重要的公式
<span class="math display">\[
f(x,y,z)=\begin{cases}x&amp;=&amp;\cos(t)\\y&amp;=&amp;\sin(t)\\z&amp;=&amp;\tan(t)\end{cases}
\]</span> 这时，你需要在word里面输入下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(x)=&#123;\matrix&#123;x&amp;=&amp;cos(t)\\y&amp;=&amp;sin(t)\\z&amp;=&amp;tan(t)&#125;\close </span><br></pre></td></tr></table></figure>
<h1 id="重装系统">重装系统</h1>
<p>这里使用这个超星的资源<a
href="https://sharewh2.xuexi365.com/share/6665231b-b691-4429-9059-c67575a4344c?c=08be16fb-4b08-4fd8-9639-722c0759b02f&amp;t=2">点击即可跳转</a></p>
<h1 id="ffmpeg加速压缩">FFmpeg加速压缩</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -hwaccel cuvid -c:v h264_cuvid -i input.mp4 -c:v h264_nvenc -r 18  -y ouput.mp4</span><br></pre></td></tr></table></figure>
<p>其中18表示目标帧率</p>
<h1 id="gitgnore的编写">gitgnore的编写</h1>
<p>首先，在目标文件夹里新建一个<code>.gitgnore</code>。然后打开写入</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20231017175719127.png"
alt="image-20231017175719127" />
<figcaption aria-hidden="true">image-20231017175719127</figcaption>
</figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Exclude all</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">*</span><br><span class="line">!*/</span><br><span class="line">!.gitignore</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入想要git的后缀</span></span><br><span class="line"><span class="comment">#VHDL &amp;&amp; Verilog</span></span><br><span class="line">!*.vhd</span><br><span class="line">!*.v</span><br><span class="line">!*.bd</span><br><span class="line">!*.edif</span><br><span class="line"><span class="comment">#xilinx</span></span><br><span class="line">!*.xpr</span><br><span class="line">!*.xdc</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python文件</span></span><br><span class="line">!*.py</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
  </entry>
  <entry>
    <title>评价类数学模型总结</title>
    <url>/2022/01/22/common_model/</url>
    <content><![CDATA[<p>小小总结，希望以后对自己有帮助</p>
<span id="more"></span>
<h1 id="权重系数确定的方法">权重系数确定的方法</h1>
<p>题设：n个评价对象，m个评价指标观测值为 <span class="math display">\[
a_{ij}\quad(i=1,2,...n;j=1,2,..,m)
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}a_{11} &amp; a_{12}&amp;...&amp;a_{1,m}\\\\a_{21} &amp;
a_{22}&amp;...&amp;a_{2m}\\ \vdots&amp;...&amp;...&amp;\\a_{n1} &amp;
a_{n2}&amp;...&amp;a_{nm}\end{bmatrix}
\]</span></p>
<h2 id="均方差法">均方差法</h2>
<p><span class="math display">\[
\mu_j=\frac{1}{n}\sum_{i=1}^{n}a_{ij}\qquad
s_j=\sqrt{\frac{1}{n}(a_{ij}-\mu_j)^2}\\
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}a_{11}\\a_{21}\\\vdots\\a_{n1}\end{bmatrix}\cdots\begin{bmatrix}a_{1m}\\a_{2m}\\\vdots\\a_{nm}\end{bmatrix}\longrightarrow\begin{bmatrix}\mu_1&amp;\cdots\mu_m\end{bmatrix}\longrightarrow
\begin{bmatrix}s_1&amp;\cdots&amp;s_m\end{bmatrix}\\
\]</span></p>
<p><span class="math display">\[
w_j=\frac{s_j}{\sum_{k=1}^{m}s_k}(j=1,2,3,4...m)\\
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}w_1&amp; w_2&amp;\cdots w_m\end{bmatrix}
\]</span></p>
<h2 id="极差法">极差法</h2>
<p><span class="math display">\[
r_{j}=\max _{1 \leq i&lt;k \leq n}\left\{\left|a_{i j}-a_{k
j}\right|\right\}(j=1,2, \cdots, m)\\
\]</span></p>
<p><span class="math display">\[
\max_{every
element}\begin{bmatrix}rand(a_{i1}-a_{k1})&amp;\cdots&amp;rand(a_{ij}-a_{kj})\end{bmatrix}\longrightarrow\begin{bmatrix}r_1&amp;r_2&amp;\cdots&amp;r_m\end{bmatrix}
\]</span></p>
<p>所以第<span class="math inline">\(j\)</span>项指标的权重系数为 <span
class="math display">\[
w_{j}=\frac{s_{j}}{\sum_{l=1}^{m} r_{k}}(j=1,2, \cdots, m)
\]</span></p>
<h2 id="熵值法">熵值法</h2>
<p>特征比重：</p>
<p>在<span class="math display">\[\mu_j=\sum_{i=1}^{n} a_{i
j}&gt;0\]</span>,第<span
class="math inline">\(j\)</span>项指标的特征比重为 <span
class="math display">\[
p_{i j}=\frac{a_{i j}}{\sum_{i=1}^{n} a_{i j}}(i=1,2, \cdots, n ; j=1,2,
\cdots, m)
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}a_{11}\\a_{21}\\\vdots\\a_{n1}\end{bmatrix}\cdots\begin{bmatrix}a_{1m}\\a_{2m}\\\vdots\\a_{nm}\end{bmatrix}\longrightarrow\begin{bmatrix}\mu_1&amp;\cdots\mu_m\end{bmatrix}\longrightarrow\begin{bmatrix}p_{11}&amp;\cdots&amp;p_{1m}\\p_{21}&amp;\cdots&amp;p_{2m}\\\vdots&amp;\cdots&amp;\\p_{n1}&amp;\cdots&amp;p_{nm}\end{bmatrix}
\]</span></p>
<p>第<span class="math inline">\(j\)</span>项的熵值为： <span
class="math display">\[
e_{j}=-\frac{1}{\ln n} \sum_{i=1}^{n} p_{i j} \ln p_{i j}(j=1,2, \cdots,
m)
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}p_{11}&amp;\cdots&amp;p_{1m}\\p_{21}&amp;\cdots&amp;p_{2m}\\\vdots&amp;\cdots&amp;\\p_{n1}&amp;\cdots&amp;p_{nm}\end{bmatrix}\longrightarrow\begin{bmatrix}e_1&amp;\cdots&amp;e_m\end{bmatrix}
\]</span></p>
<p>不难看出，如果第<span
class="math inline">\(j\)</span>项指标的观测值差异越大，熵值越小；反之，熵值越大。</p>
<p>计算第<span class="math inline">\(j\)</span>项指标的差异系数为 <span
class="math display">\[
g_{j}=1-e_{j}(j=1,2, \cdots, m)
\]</span> 如果第项指标的观测值差异越大，则差异系数<span
class="math inline">\(g\)</span>就越大，第<span
class="math inline">\(j\)</span>项指标也就越重要。</p>
<p>第<span class="math inline">\(j\)</span>项的权重系数为 <span
class="math display">\[
w_{j}=\frac{g_{j}}{\sum_{k=1}^{m} g_{k}}(j=1,2, \cdots, m)
\]</span> 参考文章:</p>
<p><a
href="https://en.wikipedia.iwiki.eu.org/wiki/Entropy">熵的定义</a>，<a
href="https://en.wikipedia.iwiki.eu.org/wiki/Entropy_(information_theory)">信息熵</a></p>
]]></content>
      <categories>
        <category>Math model</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2022/04/26/data%20struct/</url>
    <content><![CDATA[<p>数据结构总结</p>
<span id="more"></span>
<h1 id="数据结构">数据结构</h1>
<p>什么是数据结构?</p>
<ul>
<li><p>数据元素:由数据项组成</p></li>
<li><p>数据结构:</p>
<ul>
<li>数据之间的逻辑结构</li>
<li>数据的存储结构</li>
</ul></li>
</ul>
<h2 id="数据之间的逻辑结构">数据之间的逻辑结构</h2>
<ul>
<li><p>集合结构(<font color='red'>各个元素项之间没有关系</font>)</p></li>
<li><p>线性结构(<font color='red'>排序问题</font>)</p>
<ul>
<li>线性表</li>
</ul></li>
<li><p>非线性结构</p>
<ul>
<li><p>树(<font color='red'>传达命令,数据继承</font>)</p>
<ul>
<li><p>树</p></li>
<li><p>二叉树</p></li>
<li><p>二叉搜索树</p></li>
<li><p><a
href="https://www.jianshu.com/p/6b526aa481b1">堆结构</a></p></li>
</ul></li>
</ul></li>
</ul>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220316223203212-1650987432368.png"
alt="堆结构" />
<figcaption aria-hidden="true">堆结构</figcaption>
</figure>
<ul>
<li>图、网络(<font color='red'>人际交往图,路由网络图</font>)(网络:带权重的图)</li>
</ul>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220316223223470-1650987432369.png"
alt="图和网络" />
<figcaption aria-hidden="true">图和网络</figcaption>
</figure>
<h2 id="数据元素的储存形式">数据元素的储存形式</h2>
<ul>
<li><p>顺序存储</p></li>
<li><p>链接存储</p></li>
</ul>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220316223517797-1650987432369.png"
alt="链接" />
<figcaption aria-hidden="true">链接</figcaption>
</figure>
<ul>
<li><p>索引存储</p></li>
<li><p>散列存储</p></li>
</ul>
<h2 id="数据的运算">数据的运算</h2>
<ul>
<li>创建</li>
<li>清除:删除数据结构中的全部元素</li>
<li>插入：<strong>在数据结构的指定位置上插入一个新元素；</strong></li>
<li>删除运算:将数据结构中的某个元素删除</li>
</ul>
<h1 id="算法">算法</h1>
<p>对特定问题的描述步骤，有穷的指令集合</p>
<p><strong>程序=数据结构+算法</strong></p>
<p>特点：</p>
<ul>
<li>输入:<span class="math inline">\(\ge0\)</span></li>
<li>输出：<span class="math inline">\(\ge 1\)</span></li>
<li>确定性：没有二义性</li>
<li>可执行性(<font color='red'>大象塞进冰箱没有可执行性</font>)</li>
<li>有穷性</li>
</ul>
<h2 id="算法的时间复杂度和空间复杂度">算法的时间复杂度和空间复杂度</h2>
<h2 id="程序步">程序步</h2>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220316231442955-1650987432369.png"
alt="image-20220316231442955" />
<figcaption aria-hidden="true">image-20220316231442955</figcaption>
</figure>
<p>时间复杂度，大<span
class="math inline">\(O\)</span>标记法，常见的时间复杂度</p>
<h1 id="线性表">线性表</h1>
<p>定义:除了头结点和尾节点之外,其他结点有且仅有一个前驱和一个后继称为线性表</p>
<h2 id="顺序表顺序存取">顺序表(<font color='red'>顺序存取</font>)</h2>
<p>实现方式:数组</p>
<p>主要注意操作:</p>
<h3 id="删除操作on">删除操作<span
class="math inline">\(O(n)\)</span></h3>
<p>删除操作是删除表的第i (<span class="math inline">\(1\le i\le
n+1\)</span>)个位置的数据主要实现方式如下(需要将后面的位置向前移动):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;length;j++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//从第i个位置开始,所有数据向前移动</span></span><br><span class="line">    data[j<span class="number">-1</span>]=data[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入操作on">插入操作<span
class="math inline">\(O(n)\)</span></h3>
<p>插入操作是在表的第i (<span class="math inline">\(1\le i\le
n+1\)</span>)个位置插入一个新元素<span
class="math inline">\(x\)</span>,主要实现方式如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=length;j&gt;=i;j--)</span><br><span class="line">&#123;</span><br><span class="line">    data[j]=data[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下标为i-1的元素的位置为i-1</span></span><br><span class="line">data[i<span class="number">-1</span>]=x;</span><br><span class="line">length++;  </span><br></pre></td></tr></table></figure>
<p>缺点:</p>
<ul>
<li>插入和删除的复杂度太高,都达到了<span
class="math inline">\(O(n)\)</span></li>
<li>容量不好确定</li>
<li>必须要连续的存储空间</li>
</ul>
<h2 id="链式存储顺序存取">链式存储(顺序存取)</h2>
<h3 id="单链表带头结点">单链表(带头结点)</h3>
<ol type="1">
<li><p>插入操作(p结点之后)(<span
class="math inline">\(O(n)\)</span>)</p>
<p>说明:时间复杂度尾<span
class="math inline">\(O(n)\)</span>,<font color='red'>主要花在了找查的上面</font>,实际时间只需<span
class="math inline">\(O(1)\)</span>.</p></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Node * insert= <span class="keyword">new</span> Node;</span><br><span class="line">insert-&gt;data = x;</span><br><span class="line"><span class="comment">//p-&gt;next一定要先传出去</span></span><br><span class="line">insert-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = insert;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>删除操作(p结点之后)(<span
class="math inline">\(O(n)\)</span>)</p>
<p>说明:时间复杂度尾<span
class="math inline">\(O(n)\)</span>,<font color='red'>主要花在了找查的上面</font>,实际时间只需<span
class="math inline">\(O(1)\)</span>.</p></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Node * q = p-&gt;next;</span><br><span class="line"><span class="comment">//要删除的结点的下一个位置一定要先传出去</span></span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> q;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>初始化带头结点的单链表</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">first = <span class="keyword">new</span> Node&lt;DateType&gt;;</span><br><span class="line">fisrt-&gt;next = null;</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>两种插入新元素的方式</li>
</ol>
<ul>
<li><p>头插法(<span class="math inline">\(O(1)\)</span>)</p></li>
<li><p>尾插法(<span class="math inline">\(O(n)\)</span>)</p>
<p>说明:时间复杂度尾<span
class="math inline">\(O(n)\)</span>,<font color='red'>主要花在了找查的上面</font>,实际时间只需<span
class="math inline">\(O(1)\)</span>.</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p = first ;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next!=Null)</span><br><span class="line">&#123;</span><br><span class="line">    p= p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data = x;</span><br><span class="line">p-&gt;next =s;</span><br></pre></td></tr></table></figure>
<h3 id="双链表">双链表</h3>
<ol type="1">
<li>插入操作(在结点p后面插入一个新结点s)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s-&gt;prior = p;</span><br><span class="line"><span class="comment">//这一步一定要在p-&gt;next 改变之前</span></span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior= s;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>删除操作(删除p结点)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个地方没有前后顺序</span></span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior =  p-&gt;prior;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure>
<h3 id="循环链表">循环链表</h3>
<p>循环链表一般使用尾指针<code>rear</code>,在循环链表的遍历中,<font color='red'>为了判断其是否遍历完成,所以可以用p==rear来判断</font></p>
<h2 id="两种储存方式的比较">两种储存方式的比较</h2>
<p>顺序表:</p>
<ul>
<li>查找:<span class="math inline">\(O(1)\)</span></li>
<li>插入:<span class="math inline">\(O(n)\)</span></li>
<li>删除:<span class="math inline">\(O(n)\)</span></li>
</ul>
<p>链表:</p>
<ul>
<li>查找:<span class="math inline">\(O(n)\)</span></li>
<li>插入:<span class="math inline">\(O(1)\)</span></li>
<li>删除:<span class="math inline">\(O(n)\)</span></li>
</ul>
<h2 id="线性表应用">线性表应用</h2>
<h3 id="静态链表">静态链表</h3>
<h3 id="约瑟夫环">约瑟夫环</h3>
<p>问题描述:</p>
<p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p>
<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>
<p>抽象数据类型:</p>
<p>构造函数:环的长度n和密码m</p>
<ol type="1">
<li><p>第一步:构造一个长度为n的约瑟夫环</p></li>
<li><p>第二步:使用密码m进行求解约瑟夫环的答案</p></li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用密码求解环的答案</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Josph</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//从第一个元素开始</span></span><br><span class="line">    Node *pre = rear;Node *p = rear-&gt;next;</span><br><span class="line">    <span class="comment">//直到只剩下一个元素的时候跳出循环</span></span><br><span class="line">    <span class="keyword">while</span>(p!=pre)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//循环遍历直到p走过m步,因为约瑟夫环要包括自己</span></span><br><span class="line">        <span class="comment">//所以只能走m-1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">            pre=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre-&gt;next=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p=pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一元多项式求和">一元多项式求和</h3>
<p>问题:多项式<span
class="math inline">\(A(x)=a_0+a_1x+a_2x^2+..a_nx^n\)</span>和<span
class="math inline">\(B(x)=b_0+b_1x+b_2x^2+..b_nx^n\)</span>合并</p>
<p>分析:合并的时候,有一些项数是都存在,有一些项数只是A或者B存在,那么,这种情况下我们要假设A,B都已经按照从小到大的幂次排列好,这时,我们只需要将一项一项进行比较,观察他们是否相等,相等则合并,不相等则不合并</p>
<p>抽象数据类型:</p>
<p>元素:长度足够的数组data
每一项:系数<code>xishu</code>,幂次<code>mici</code></p>
<p>操作:合并A,B,运算符重载</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Poly B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//设置一个头结点,所以i从1开始</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;<span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i_=<span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//只有当两者都没有达到最后一个元素的时候,不能停止</span></span><br><span class="line">    <span class="comment">//如果是链表的话应该是判断指针是否为空</span></span><br><span class="line">    <span class="keyword">while</span>(i!=length+<span class="number">1</span>&amp;&amp;j=!length+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果幂次相等,则系数相加</span></span><br><span class="line">       	<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;data[i].mici==B-&gt;data[j].mici)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当系数的和不为0的时候,相加</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;data[i].xishu+B-&gt;data[j].xishu!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;data[i].xishu=<span class="keyword">this</span>-&gt;data[i].xishu+B-&gt;data[j].xishu;</span><br><span class="line">                i++;j++;i_++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果系数和为0,则将这个节点删除,i不需要自加</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">Delete</span>(<span class="keyword">this</span>-&gt;data[i]);</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果A的第i位置的幂次大于B的第j个位置</span></span><br><span class="line">        <span class="comment">//那么B的这个节点应该放在A的前面一个位置</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;data[i].mici&gt;B-&gt;data[j].mici)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将B的j节点插入i的前面一个位置</span></span><br><span class="line">            <span class="comment">//保持i_始终在i的前面一个位置</span></span><br><span class="line">            <span class="built_in">Insert</span>(B-&gt;data[j],i_);</span><br><span class="line">            j++;i_++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//A的第i位置小于B的第j个位置</span></span><br><span class="line">        <span class="comment">//说明A要往后走一个位置再比较</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;data[i].mici&lt;B-&gt;data[j].mici)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;i_++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="栈和队列">栈和队列</h1>
<h2 id="栈结构stack">栈结构(Stack)</h2>
<ol type="1">
<li><p>顺序栈(<font color='red'>数组实现</font>)</p>
<p>栈空判断:top==-1</p>
<p>栈的长度StackSize</p></li>
<li><p>链栈</p>
<p>单链表的表头为栈顶(<font color='red'>头插法</font>)</p></li>
</ol>
<p>问题:当进入栈的顺序为1,2,3,4,5...n时,请问可能出栈的序列有多少种?</p>
<p>结果:<span class="math inline">\(\frac{1}{n+1}C_{2n}^{n}\)</span></p>
<p>元素个数变化较大的时候用链栈,否则用顺序栈</p>
<h2 id="队列">队列</h2>
<h3 id="循环队列数组实现">循环队列(数组实现)</h3>
<ol type="1">
<li><p>顺序队列的存储结构(数组),入队出队时间复杂化度为<span
class="math inline">\(O(1)\)</span>,空间利用率为n-1</p></li>
<li><p><font color='red'>解决假溢出:rear=(rear+1)%QueueSize</font></p></li>
<li><p>循环队列判断是否满的判断:<font color='red'>(rear+1)%QueueSize=front</font></p></li>
</ol>
<h3 id="链队列">链队列</h3>
<ol type="1">
<li>队头:头指针,时间复杂度为<span
class="math inline">\(O(1)\)</span></li>
<li>入队:尾插法</li>
<li>出队,头出发(<font color='red'>不要删除头结点</font>)</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队代码</span></span><br><span class="line">p=first-&gt;next;</span><br><span class="line">first-&gt;next=p-&gt;next;</span><br><span class="line"><span class="comment">//删除结点的时候一定要记得保存</span></span><br><span class="line"><span class="keyword">int</span> x= p-&gt;data;</span><br><span class="line"><span class="comment">//注意尾结点,不要让其指向空</span></span><br><span class="line"><span class="keyword">if</span>(first-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    rear=first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br></pre></td></tr></table></figure>
<h2 id="应用举例">应用举例</h2>
<ol type="1">
<li>两栈共享空间</li>
</ol>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220430231223168.png" alt="image-20220430231223168" style="zoom: 80%;" /></p>
<h3 id="括号匹配问题">括号匹配问题</h3>
<p>使用栈来匹配括号,查看代码是否是多了括号或者少了括号</p>
<p>算法:Match(str)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;str[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果判断为左括号,进栈</span></span><br><span class="line">    <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        top++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断为右括号,出栈</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        top--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(top!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果栈中有括号或者使用了更多的括号,返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="表达式求值">表达式求值</h3>
<p>设运算符有<code>+,-,*,/,#</code>,其中#号是界定符,求出给的表达式的结果:假设给的表达式为
<span class="math display">\[
3\times 3+(6/5+7)*4-9
\]</span></p>
<p>​
一个表达式的输出一共有两种情况,一种是数字,一种是符号,我们假设有两个栈,一个是符号栈,一个是数据栈,首先要判断进来的这个是不是一个符号,其次他的优先级是否高于现在栈中栈顶元素的符号,如果高于,那么这个时候我们让它进栈,如果不高于,那么,我们让栈中栈顶元素出栈,,对数据进行运算,直到其优先级小于入栈符号的优先级,然后新的符号压入栈中.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SymbolStack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;!SymbolStack.<span class="built_in">isempty</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    str=str_[i];</span><br><span class="line">    <span class="comment">//进入栈之后判断一下它是否是符号</span></span><br><span class="line">    <span class="comment">//是不是优先级较高的</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">IssSymbol</span>(str)&amp;&amp;!<span class="built_in">IsPriority</span>(str))</span><br><span class="line">    &#123;</span><br><span class="line">        a=NumberStack.<span class="built_in">pop</span>();</span><br><span class="line">        b=NumberStack.<span class="built_in">pop</span>();</span><br><span class="line">        NumberStack.<span class="built_in">push</span>(<span class="built_in">Calculate</span>(b,a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是符号,而且优先级高,则入栈</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">IssSymbol</span>(str)&amp;&amp;<span class="built_in">IsPriority</span>(str))</span><br><span class="line">    &#123;</span><br><span class="line">        SymbolStack.<span class="built_in">push</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果是数字,则让其进入数字栈</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        NumberStack.<span class="built_in">push</span>(str.<span class="built_in">toInt</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归">递归</h2>
<p>递归的主要组成部分</p>
<ul>
<li>基础情况</li>
<li>递归部分</li>
</ul>
<h3 id="汉诺塔求解">汉诺塔求解</h3>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220501195358429.png" alt="image-20220501195358429" style="zoom:80%;" /></p>
<p>解决方法:</p>
<p>:one:
首先假设样本数量比较小,例如只有一个盘子的时候,那么我们需要做的是:<code>A---&gt;C</code></p>
<p>如果是两个盘子:第一步:将上面的盘子移到B,将A的盘子移到C,再把B上面的移动到C:<code>A---&gt;B</code>,<code>A---&gt;c</code>,<code>B---&gt;c</code></p>
<p>如果是三个盘子:第一步,想办法把A上面2个盘子移到到B,再把A上的移动到C,最后想办法把B上的移动到C:<code>A(2)---&gt;B</code>,<code>A---&gt;C</code>,<code>B(2)---&gt;C</code></p>
<p>:two:现在考虑更加朴实的情况:n个盘子:则算法的思路为:<code>A(n-1)---&gt;B</code>,<code>A---&gt;C</code>,<code>B---&gt;C</code></p>
<p>:three:
好!现在算上想清楚了,基础条件:n=1:直接移动,如果n!=1的时候,就借助B,再移动到C</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Move函数:A通过借助B移动到C</span></span><br><span class="line"><span class="built_in">Move</span>(A,B,C,n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;A&lt;&lt;<span class="string">&#x27;---&gt;&#x27;</span>&lt;&lt;C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将A上面的n-1个盘子通过A移动到B</span></span><br><span class="line">		<span class="built_in">Move</span>(A,C,B,n<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将A的最底下的盘子一次移到C</span></span><br><span class="line">        <span class="built_in">Move</span>(A,B,C,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将B上所有的盘子想方法移动到C</span></span><br><span class="line">        <span class="built_in">Move</span>(B,A,C,n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="n皇后问题">N皇后问题</h3>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>Docker-ubuntu安装ssh</title>
    <url>/2024/01/22/docker-ubuntu-ssh%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>这是一篇有关Docker-ubuntu-ssh的安装教程</p>
<span id="more"></span>
<h1 id="step1安装openssh-server">STEP1：安装openssh-server</h1>
<p>1.更新源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p>2.安装openssh-server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure>
<p>对于Alpine-linux，则用下面命令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add --update openssh-server</span><br></pre></td></tr></table></figure>
<p>还需安装openrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add openrc</span><br></pre></td></tr></table></figure>
<h1 id="step2设置允许root登录">STEP2：设置允许root登录</h1>
<p>设置<code>/etc/ssh/sshd_config</code></p>
<p>追加如下指令</p>
<p>-- <code>PermitRootLogin yes</code></p>
<h1 id="nginx-docker无法使用apt问题">NGINX-Docker无法使用apt问题</h1>
<p>:star:先换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt</span><br></pre></td></tr></table></figure>
<p>生成source文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch  sources.list</span><br></pre></td></tr></table></figure>
<p>写入源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.ustc.edu.cn/debian stable main contrib non-free&quot;</span> &gt;&gt;sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free&quot;</span> &gt;&gt;sources.list</span><br></pre></td></tr></table></figure>
<p>删除缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -fR /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure>
<p>在更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>ikuai-docker自建webdav</title>
    <url>/2024/01/30/docker%E8%87%AA%E5%BB%BAwebdav/</url>
    <content><![CDATA[<p>这是一篇有关使用ikuai搭建webdav的博客，并且实现了ipv6的访问</p>
<span id="more"></span>
<h1 id="安装webdav">安装webdav</h1>
<p>镜像：<code>bytemark/webdav:latest</code></p>
<p>目录挂载：<code>/seafile/smb/music</code>：<code>/var/lib/dav/data</code></p>
<p>环境变量：</p>
<p><code>USERNAME</code></p>
<p><code>PASSWORD</code></p>
<p><code>LOCATION</code></p>
<p><code>AUTH_TYPE</code>:<code>Basic</code></p>
<p>修改编码为utf8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi conf/conf-enabled/dav.conf</span><br></pre></td></tr></table></figure>
<p>修改为utf8</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Directory <span class="string">&quot;/var/lib/dav/data/&quot;</span>&gt;</span><br><span class="line">  Dav On</span><br><span class="line">  Options Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">  AuthType Basic</span><br><span class="line">  AuthName <span class="string">&quot;WebDAV&quot;</span></span><br><span class="line">  IndexOptions Charset=utf-8      &lt;-----------添加这一行</span><br><span class="line">  AuthUserFile <span class="string">&quot;/user.passwd&quot;</span></span><br><span class="line">  &lt;RequireAny&gt;</span><br><span class="line">    Require valid-user</span><br><span class="line">  &lt;/RequireAny&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h1 id="配置alpine-linux">配置alpine-linux</h1>
<h2 id="换源">换源</h2>
<p>更换为UESTC源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apk/repositories</span><br></pre></td></tr></table></figure>
<p>执行<code>update</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk update</span><br></pre></td></tr></table></figure>
<p>安装<code>openrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apk add openrc</span><br></pre></td></tr></table></figure>
<p>添加 auto-docker 为自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rc-update add auto-docker</span><br></pre></td></tr></table></figure>
<p>在<code>/etc/loacal.d/</code>中添加start结尾的脚本,如<code>docker.start</code>,内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f /root/script/ping.sh ]; <span class="keyword">then</span></span><br><span class="line">      /root/script/ping.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>更新一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rc-update add <span class="built_in">local</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/17/index/</url>
    <content><![CDATA[<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>Linux开发项目总结</title>
    <url>/2023/11/25/linux_problem/</url>
    <content><![CDATA[<p>欢迎交流</p>
<span id="more"></span>
<h1 id="python">Python</h1>
<ul>
<li>pip永久换源</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清华源</span></span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里源</span></span><br><span class="line">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 腾讯源</span></span><br><span class="line">pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> 豆瓣源</span></span><br><span class="line">pip config set global.index-url http://pypi.douban.com/simple/# 换回默认源pip config unset global.index-url</span><br></pre></td></tr></table></figure>
<h2 id="生成项目所需要的各种包">生成项目所需要的各种包</h2>
<ol type="1">
<li>安装<code>pipreqs</code>:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>进入项目主要目录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipreqs</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>生成requirement.txt</li>
</ol>
<h1 id="docker">Docker</h1>
<p>​
虚拟化技术意义，主要是为了最大化的利用高配硬件设备的资源，<font color='red'>提高物理机资源</font><font color='red'>利用率</font>，可以实现应用程序、软件服务进程<font color='red'>资源隔离</font>.</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20231125161329086.png"
alt="image-20231125161329086" />
<figcaption aria-hidden="true">image-20231125161329086</figcaption>
</figure>
<p>创建Docker程序部署目录：<code>/usr/local/docker/</code>；</p>
<ul>
<li>Docker search</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>Docker 换源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://frd9mvwo.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure>
<ul>
<li>下载镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载镜像在/var/lib/docker/image/overlay2/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>查看镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<ul>
<li>运行docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 80:80 --name=web1 --privileged nginx:latest</span><br><span class="line"><span class="comment">#run:create &amp;&amp; start；80（外部端口）:80（内部端口）; itd:交互式后台detached</span></span><br><span class="line"><span class="comment">##-i表示：interactive交互；</span></span><br><span class="line"><span class="comment">##-t表示：tty终端；</span></span><br><span class="line"><span class="comment">#-d表示：detach后台启动；</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建并运行镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create <span class="string">&quot;name&quot;</span></span><br><span class="line">docker start <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>停止运行镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop <span class="string">&quot;name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#stop之后只能用start重新开启 </span></span><br></pre></td></tr></table></figure>
<ul>
<li>杀掉</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> <span class="string">&quot;container name&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Docker删除容器&amp;&amp;镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除容器</span></span><br><span class="line">docker rm <span class="string">&quot;CONTAINER Name&quot;</span></span><br><span class="line"><span class="comment">#删除镜像</span></span><br><span class="line">docker rmi <span class="string">&quot;IMAGE ID&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行多台docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 99);<span class="keyword">do</span> docker run -itd-p 80<span class="variable">$i</span>:80--name=webos<span class="variable">$i</span></span><br><span class="line">--privileged nginx:latest;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<ul>
<li>观察docker情况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect  <span class="string">&quot;CONTAINER ID&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>进入容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="string">&quot;容器名&quot;</span> /bin/bash</span><br></pre></td></tr></table></figure>
<ul>
<li>退出容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h1 id="linux">Linux</h1>
<h2 id="解压tar包">解压tar包</h2>
<p>通过Tar工具对其解压缩（-x extract解压，-z gzip压缩格式，-v
verbose详细显示，-f file文件属性）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf docker-19.03.9.tgz</span><br></pre></td></tr></table></figure>
<p>打开后台终端<code>nohup</code>,后台启动<code>&amp;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nphup /usr/<span class="built_in">local</span>/docker/dockerd &amp;</span><br></pre></td></tr></table></figure>
<h2 id="查看ip地址">查看ip地址</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0</span><br></pre></td></tr></table></figure>
<p>观察NAT转发表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -L -n --line-numbers</span><br><span class="line"><span class="comment">#类似于路由器内网和外网转发表</span></span><br></pre></td></tr></table></figure>
<h2 id="path">PATH</h2>
<p>先将换行符<code>EOF</code>添加到<code>/etc/profile</code>，再添加一行<code>export PATH=\$PATH:/usr/local/docker/</code>到下面,将<code>/usr/local/docker/</code>添加到PATH中去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat&gt;&gt;/etc/profile&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">export PATH=\$PATH:/usr/local/docker/</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加Python虚拟环境virtualenv4</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#WARNING: The script virtualenv is installed in &#x27;/home/ninglang/.local/bin&#x27; which is not on PATH.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解决办法</span></span><br><span class="line"><span class="built_in">export</span> PATH=/home/ninglang/.<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>
<ul>
<li>查看命令执行情况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure>
<ul>
<li>查找<code>grep</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -aiWE nginx</span><br><span class="line"><span class="comment">#-a 或 --text : 不要忽略二进制的数据。</span></span><br><span class="line"><span class="comment">#-i 或 --ignore-case : 忽略字符大小写的差别。</span></span><br><span class="line"><span class="comment">#-w 或 --word-regexp : 只显示全字符合的列</span></span><br><span class="line"><span class="comment">#-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。</span></span><br></pre></td></tr></table></figure>
<h2 id="进程">进程</h2>
<p>查看进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -aiE sshd</span><br></pre></td></tr></table></figure>
<h2 id="git">git</h2>
<ul>
<li>git如何设置gitignore</li>
</ul>
<ol type="1">
<li>新建<code>.gitgnore</code>文件</li>
<li>添加如下代码排除所有工程文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################################################################################################</span></span><br><span class="line"><span class="comment">##	This is an example .gitignore file for Vivado, please treat it as an example as </span></span><br><span class="line"><span class="comment">##	it might not be complete. In addition, XAPP 1165 should be followed.</span></span><br><span class="line"><span class="comment">#########################################################################################################</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment">#Exclude all</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">*</span><br><span class="line">!*/</span><br><span class="line">!.gitignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment">##	kil-5</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment">#Source files:</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line"><span class="comment">#Do NOT ignore c, cpp, h and uvprojx.</span></span><br><span class="line"></span><br><span class="line">!*.uvprojx</span><br><span class="line">!*.c </span><br><span class="line">!*.cpp </span><br><span class="line">!*.h</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="设置脚本自启动">设置脚本自启动</h2>
<p>​ 修改/etc/rc.local文件，在其中加入自己想要执行的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python3 -u /home/ninglang/NJUlogin-main/NJUlogin/school_login.py &gt;/home/ninglang/NJUlogin-main/NJUlogin/school_login.log  2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#python3 -u /home/ninglang/NJUlogin-main/NJUlogin/pwdLogin.py  &gt;/home/ninglang/NJUlogin-main/NJUlogin/pwdLogin.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nohup python3 -u  pwdLogin.py &gt; hello.log  2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment"># nohup python3 pwdLogin.py &gt; pwdLogin.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="comment">#cd /home/ninglang/NJUlogin-main/NJUlogin/ &amp;&amp; python3 ./school_login.py</span></span><br><span class="line"><span class="comment">#/home/ninglang/NJUlogin-main/NJUlogin/pwlogin.sh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="部署seafileonlyoffice">部署seafile+onlyoffice</h1>
<ol type="1">
<li>先下载<code>docker-compose</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  office-preview:</span><br><span class="line">    image: seafileltd/office-preview:latest</span><br><span class="line">    container_name: seafile-office-preview</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8086:8089&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: bash start.sh</span><br><span class="line">    volumes:</span><br><span class="line">      - ./opt/office-preview/shared:/shared  <span class="comment">##宿主机路径可以自定义</span></span><br><span class="line">  db:</span><br><span class="line">    image: mariadb:10.11</span><br><span class="line">    container_name: seafile-mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=db_dev  <span class="comment"># Requested, set the root&#x27;s password of MySQL service.</span></span><br><span class="line">      - MYSQL_LOG_CONSOLE=<span class="literal">true</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./opt/seafile-mysql/db:/var/lib/mysql  <span class="comment"># Requested, specifies the path to MySQL data persistent store.</span></span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line"></span><br><span class="line">  memcached:</span><br><span class="line">    image: memcached:1.6</span><br><span class="line">    container_name: seafile-memcached</span><br><span class="line">    entrypoint: memcached -m 256</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line">  onlyoffice: </span><br><span class="line">    image: onlyoffice/documentserver</span><br><span class="line">    container_name: onlyoffice </span><br><span class="line">    environment:</span><br><span class="line">      - JWT_SECRET=seafile123</span><br><span class="line">      - JWT_ENABLED=<span class="literal">true</span></span><br><span class="line">      - JWT_HEADER=Authorization</span><br><span class="line">      - JWT_IN_BODY=<span class="literal">true</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./opt/seafile-onlyoffice/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/onlyoffice</span><br><span class="line">      - ./opt/seafile-onlyoffice/data:/var/www/onlyoffice/Data</span><br><span class="line">      - ./opt/seafile-onlyoffice/lib:/var/lib/onlyoffice</span><br><span class="line">      - ./opt/seafile-onlyoffice/db:/var/lib/postgresql</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line">  seafile:</span><br><span class="line">    image: seafileltd/seafile-mc:latest</span><br><span class="line">    container_name: seafile</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8089:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;8090:8080&quot;</span></span><br><span class="line"><span class="comment">#      - &quot;443:443&quot;  # If https is enabled, cancel the comment.</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./opt/seafile-data:/shared   <span class="comment"># Requested, specifies the path to Seafile data persistent store.</span></span><br><span class="line">    environment:</span><br><span class="line">      - DB_HOST=db</span><br><span class="line">      - DB_ROOT_PASSWD=db_dev  <span class="comment"># Requested, the value shuold be root&#x27;s password of MySQL service.</span></span><br><span class="line"><span class="comment">#      - TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.</span></span><br><span class="line">      - SEAFILE_ADMIN_EMAIL=ninglang@qq.com <span class="comment"># Specifies Seafile admin user, default is &#x27;me@example.com&#x27;.</span></span><br><span class="line">      - SEAFILE_ADMIN_PASSWORD=3761234yzm     <span class="comment"># Specifies Seafile admin password, default is &#x27;asecret&#x27;.</span></span><br><span class="line">      - SEAFILE_SERVER_LETSENCRYPT=<span class="literal">false</span>   <span class="comment"># Whether use letsencrypt to generate cert.</span></span><br><span class="line">      - SEAFILE_SERVER_HOSTNAME=3865.ninglang.fun:8089 <span class="comment"># Specifies your host name.</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - memcached</span><br><span class="line">    networks:</span><br><span class="line">      - seafile-net</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  seafile-net:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>修改seahub</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入seafile</span></span><br><span class="line">docker <span class="built_in">exec</span> -it seafile /bin/bash</span><br><span class="line"><span class="comment">#进入conf</span></span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">vim seahub_settings.py</span><br></pre></td></tr></table></figure>
<p>追加<code>seahub_settings.py</code>内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable Only Office</span></span><br><span class="line">ENABLE_ONLYOFFICE = <span class="literal">True</span></span><br><span class="line">VERIFY_ONLYOFFICE_CERTIFICATE = <span class="literal">True</span></span><br><span class="line">ONLYOFFICE_JWT_SECRET = <span class="string">&#x27;seafile123&#x27;</span></span><br><span class="line"><span class="comment"># ONLYOFFICE_APIJS_URL = &#x27;http&#123;s&#125;://&#123;your OnlyOffice server&#x27;s domain or IP&#125;/web-apps/apps/api/documents/api.js&#x27;</span></span><br><span class="line">ONLYOFFICE_APIJS_URL = <span class="string">&#x27;http://3865.ninglang.fun:8080/web-apps/apps/api/documents/api.js&#x27;</span></span><br><span class="line">ONLYOFFICE_FILE_EXTENSION = (<span class="string">&#x27;doc&#x27;</span>, <span class="string">&#x27;docx&#x27;</span>, <span class="string">&#x27;ppt&#x27;</span>, <span class="string">&#x27;pptx&#x27;</span>, <span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>, <span class="string">&#x27;odt&#x27;</span>, <span class="string">&#x27;fodt&#x27;</span>, <span class="string">&#x27;odp&#x27;</span>, <span class="string">&#x27;fodp&#x27;</span>, <span class="string">&#x27;ods&#x27;</span>, <span class="string">&#x27;fods&#x27;</span>)</span><br><span class="line">ONLYOFFICE_EDIT_FILE_EXTENSION = (<span class="string">&#x27;docx&#x27;</span>, <span class="string">&#x27;pptx&#x27;</span>, <span class="string">&#x27;xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>3.进入onlyoffice修改<code>etc/onlyoffice/documentserver/default.json</code>，修改如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;rejectUnauthorized&quot;</span>: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;allowPrivateIPAddress&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;allowMetaIPAddress&quot;</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>重启docker</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>移动通信三级项目</title>
    <url>/2023/06/06/mobile/</url>
    <content><![CDATA[<p>移动通信</p>
<span id="more"></span>
<h1 id="ofdm">ofdm</h1>
<p><a
href="https://github.com/zhongyuanzhao/dl_ofdm">zhongyuanzhao/dl_ofdm:
Deep-Waveform: A Learned OFDM Receiver Based on Deep Complex-valued
Convolutional Networks</a></p>
<h1
id="频率选择性衰落和时间选择性衰落详解">频率选择性衰落和时间选择性衰落详解</h1>
<blockquote>
<p>当移动台移动时，接收信号衰落的具体类型由传输方案和信道特点决定。传输方案由信号的参数确定，如信号带宽和符号周期。无线信道的特点由两种不同的信道参数描述，它们是多径时延扩展和多普勒扩展。多径时延扩展和多普勒扩展分别引起时间色散效应和频率色散效应，根据时间色散的程度或频率色散的程度，它们将分别引起频率选择性衰落或时间选择性衰落。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/ddatalent/article/details/118198520">(34条消息)
频率选择性衰落和时间选择性衰落详解_ddatalent的博客-CSDN博客</a></p>
<h1 id="mimo">MIMO</h1>
<blockquote>
<p>摘要</p>
<p>大规模多输入多输出（Massive
MIMO）系统由于导频污染现象而可能遭受相干小区间干扰。本文研究了一种两层解码方法，用于减轻多小区大规模MIMO中的相干和非相干干扰。为此，每个基站（BS）首先利用上行导频进行最小均方误差（MMSE）或基于元素的MMSE估计来估计小区内用户的信道。这些估计用于每个基站上的局部解码，然后在第二个解码层中，基站协同工作以减轻小区间干扰。针对任意两层解码方案，计算了上行可达到的频谱效率（SE）表达式。然后针对相关瑞利衰落、最大比合并以及第二层中的提出的大尺度衰落解码（LSFD），得到了一个表达式。我们还提出了一个求和SE最大化问题，其中数据功率和LSFD向量都是优化变量。由于这是一个NP难题，我们基于加权MMSE方法开发了一个低复杂度的算法来获得局部最优解。数值结果表明，数据功率控制和LSFD都可以提高单层解码的多小区大规模MIMO系统的求和SE性能。</p>
<p>关键词— 大规模MIMO、大尺度衰落解码、总体谱效率优化、信道估计。</p>
</blockquote>
<p><a
href="https://zhuanlan.zhihu.com/p/265728762">5G无线知识，从“大规模MIMO”开始！
- 知乎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/368716371">通信系统信道估计 -
知乎</a>,<a
href="https://blog.csdn.net/qq_36554582/article/details/105167186">(34条消息)
无线通信信道的衰落特性（大尺度衰落和小尺度衰落）_逸凌Time的博客-CSDN博客</a></p>
<blockquote>
<p>信道估计就是估计从发送天线到接收天线之间的无线信道的频率响应。它的任务就是根据接收到的经过信道影响在幅度和相位上产生了畸变并叠加了高斯白噪声的接收序列来准确识别出信道的时域或者频域的传输特性，即：估计出每个子载波上的频率响应。</p>
<p>MMSE算法对于高斯白噪声有很好的抑制作用，并充
分利用了信道自相关矩阵，所以MMSE算法性能要优于LS算法性能。但是MMSE算法最大的缺点在于复杂度太高，不易求得，并且需要求相关矩阵的逆，运算量较大。因此，MMSE算法在实际应用中受到了一定限制。</p>
</blockquote>
<p><a
href="https://www.docin.com/p-66905669.html">LTE上行信道估计及导频设计 -
豆丁网</a></p>
<blockquote>
<p>1、MMO多种模式带来多种增益 ·发送分集增益
提高系统可靠性，不能提升数据速率。 ·波束赋形增益
提高系统有效性，可以提升数据速率。 ·空分复用增益
提高系统有效性，可以提升数据速率。</p>
<p>2、提高频谱效率
·要求TD-LTE的下行频谱效率达到5bps/Hz（Rel-10为30bps/Hz）。
·要求TD-LTE的上行频谱效率达到2.5bps/Hz（Rel-10为15bps/Hz）。</p>
<p>MMO技术主要分为三大类：<strong>波束赋形、传输分集和空间复用</strong>。</p>
</blockquote>
<p><a
href="https://rf.eefocus.com/article/id-335492">一文读懂MIMO（从MIMO到Massive
MIMO） - RF技术社区</a></p>
<h2 id="导频污染">导频污染</h2>
<blockquote>
<p>以我才疏学浅的理解，强答一下。导频英文是Training。其实中文也有叫导频训练序列，训练的意思就是在正式发送数据之前，先给系统训练训练，让它知道周围的通讯环境是怎样的，然后在正式发送数据时，发射端就可以更具这些信息(称为信道状态信息)做出相应的调整，从而达到较好的通信性能。用导频获取信道状态信息的这个过程就叫做信道估计。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/28786690">(25 封私信)
如何理解信道估计中的导频和插值？ - 知乎</a></p>
<blockquote>
<p>导频污染主要是由于不同的导频序列不正交导致（学术认为序列间的汉明距离比较小）从而不同的序列做相关互相干扰，从而不能够很好估计信道。</p>
<p>导频污染的影响：
（1）高BLER。由于多个强导频存在对有用信号构成了干扰，导致Io升高，Eco降低，BLER升高，提供的网络质量下降，导致高的掉话率。
（2）切换掉话。若存在3个以上强的导频，或多个导频中没有主导导频，则在这些导频之间容易发生频繁切换，从而可能造成切换掉话。
（3）容量降低。存在导频污染的区域由于干扰增大，降低了系统的有效覆盖，使系统的容量受到影响。）</p>
</blockquote>
<p><a
href="https://blog.csdn.net/fanzy_edu/article/details/119781159">(34条消息)
导频污染简单介绍_fanzy_edu的博客-CSDN博客</a></p>
<blockquote>
<p>理想情况下，Massive
mimo系统中，每个终端分配一个正交上行导频序列，而存在的正交导频序列的最大个数是由信道想干时间间隔除以信道延迟扩展决定的。因此在多小区系统中很容易就会超出可以提供的正交导频个数。两个小区间使用相同的导频序列所产生的影响和相关的消极结果称为导频污染。当服务矩阵将它接收到的导频信号和特定终端的导频序列做相关时，它实际上获得的是使用同一个导频序列的所有终端到信道的信道估计的线性联合。基于受污染的信道估计的下行链路波束成形会对使用同一个导频序列的这些终端造成内部定向干扰。类似的干扰和上行链路数据传输有关。这些定向干扰会随着服务天线的个数同比例增长。</p>
</blockquote>
<blockquote>
<p>实际中，在Massive MIMO
TDD系统下，利用信道的互易性，信道矩阵G由基站估计，这样做的标准方法就是使用上行链路导频，导频序列的数目就可以独立于天线数目。而在FDD系统下，上下行链路传播系数受频率选择性衰落影</p>
</blockquote>
<p><a href="https://www.docin.com/p-1392814967.html">Massive
MIMO导频污染介绍(新) - 豆丁网</a></p>
<blockquote>
<p>在实际应用中，AP往往具有较多的天线数，从4天线到16天线不等，但是终端（比如手机）通常只有1-2根天线。即使天线技术在不断进步，但受限于终端产品的体积大小，即使再容纳1-2根天线，也远小于AP的天线个数，这就意味着可以传输的空间流数量受限于终端，导致无法充分享受到空间流数增加带来的速率成倍增加，造成AP上天线资源的浪费。幸运的是多用户类型的MIMO技术出现并解决了这一问题，例如<a
href="https://info.support.huawei.com/info-finder/encyclopedia/zh/MU-MIMO.html">MU-MIMO</a>可以让一个AP同时和多个终端传输信号，多个终端的天线总数和AP的天线数对等，让AP的能力得到充分的发挥。</p>
</blockquote>
<p><a
href="https://info.support.huawei.com/info-finder/encyclopedia/zh/MIMO.html">什么是MIMO？从SISO到MIMO
- 华为</a>,</p>
<h3 id="导频污染解码">导频污染解码</h3>
<blockquote>
<p>最大比合并（Maximal Ratio
Combining，MRC）是分集合并技术中的最优选择，相对于选择合并和等增益合并可以获得最好的性能，其性能提升是由阵列增益（阵列增益即发射的信号的功率增益，是通过发送机和/或接收机的多个天线而实现功率增益的，一般在LTE中，增加一个天线会有3db的增益）带来的更高的信噪比，进而带来更好的误码率特性。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/Nved23/article/details/125939305">(34条消息)
最大比合并 MRC的介绍、证明及应用举例_Nved.的博客-CSDN博客</a></p>
<p><a
href="https://blog.csdn.net/weixin_43871127/article/details/104878126">(34条消息)
大规模MIMO上行信号检测基础_mimo sic_月半 月半的博客-CSDN博客</a></p>
<blockquote>
<p>1、信道测量和建模。
Trigger：天线数增加后信道特性会如何变化，相关性、信道衰落特性等都需要测量和研究，而信道建模是理论研究的基础，如果信道模型是错的话，很多研究将失去意义。</p>
<p>2、导频设计以及降低导频污染研究。
Trigger：天线数目增加后，噪声、小区内干扰等非相关因素都会随之消失，而导频污染会成为限制大规模MIMO性能的唯一因素。如何分配导频、如何分配导频功率来降低导频污染等问题变得更为重要。</p>
<p>3、FDD模式下，下行信道估计、信号反馈、两阶段预编码等研究。
Trigger：下行信道估计的导频符号开销正比于基站天线数目（需大于等于天线数），然而相干时间内可发送的数据符号数目有限（比如200），导频开销过大会严重降低有用数据符号的发送，同理，用户估计出信道后，将信道状态信息反馈给基站亦需要较大开销，导致低频谱效率。</p>
<p>4、降低硬件开销的混合预编码结构和方法研究。
Trigger：传统的信号处理方法需要每根天线对应一个射频链路，然而射频链路非常昂贵，随着天线数增加，硬件和能量开销都会随之增大，所以如果设计和研究降低射频链路的预编码方案非常重要。</p>
<p>5、低精度硬件和非完美硬件下的信号处理研究。
Trigger：该问题仍然是由天线数增加导致硬件开销大的问题引发的，为了降低硬件的成本，通常会采用不完美的硬件（低成本、低精度硬件），在这种情况下如何进行信号处理，以及如何弥补硬件的不足。</p>
<p>6、其他利用空间自由度、统计信道状态信息、波束选择、天线选择等系列研究。</p>
</blockquote>
<p><a
href="https://rf.eefocus.com/module/forum/thread-611270-1-1.html">大规模MIMO和MIMO区别?
- 问题讨论专区 - RF技术社区</a>, <a
href="https://blog.csdn.net/Anne033/article/details/122201199#:~:text=%E9%A2%91%E8%B0%B1%E6%95%88%E7%8E%87%EF%BC%88Spectral%20Efficiency%EF%BC%8CSE%EF%BC%89%E7%AE%80%E7%A7%B0%E8%B0%B1%E6%95%88%EF%BC%8C%E4%B9%9F%E7%A7%B0%E7%B3%BB%E7%BB%9F%E5%AE%B9%E9%87%8F%E3%80%81%E9%A2%91%E5%B8%A6%E5%88%A9%E7%94%A8%E7%8E%87%E3%80%82,%E8%AF%A5%E6%8C%87%E6%A0%87%E7%94%A8%E6%9D%A5%E8%A1%A1%E9%87%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7%EF%BC%8C%E6%8F%8F%E8%BF%B0%E4%BA%86%E8%83%BD%E5%A4%9F%E6%8F%90%E4%BE%9B%E5%A4%9A%E5%B0%91%E5%AE%B9%E9%87%8F%E3%80%82%20%E5%AE%83%E5%AE%9A%E4%B9%89%E4%B8%BA%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93%E7%9A%84%E6%9C%89%E6%95%88%E4%BF%A1%E6%81%AF%E9%80%9F%E7%8E%87R%E9%99%A4%E4%BB%A5%E9%80%9A%E4%BF%A1%E4%BF%A1%E9%81%93%E5%B8%A6%E5%AE%BDB%EF%BC%8C%E5%8D%B3%E5%8D%95%E4%BD%8D%E5%B8%A6%E5%AE%BD%E4%BC%A0%E8%BE%93%E9%A2%91%E9%81%93%E4%B8%8A%E6%AF%8F%E7%A7%92%E5%8F%AF%E4%BC%A0%E8%BE%93%E7%9A%84%E6%AF%94%E7%89%B9%E6%95%B0%EF%BC%8C%E4%BB%A3%E8%A1%A8%E4%BA%86%E7%B3%BB%E7%BB%9F%E5%AF%B9%E9%A2%91%E8%B0%B1%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%A9%E7%94%A8%E6%95%88%E7%8E%87%E3%80%82">(34条消息)
通信中的频谱效率与能量效率_Anne033的博客-CSDN博客</a>.</p>
<h2 id="预编码">预编码</h2>
<blockquote>
<p>在预编码系统中，发射机可以根据信道条件，对发送信号的空间特性进行优化，使发送信号的空间分布特性与信道条件相匹配，因此可以有效地降低对接收机算法的依赖程度。<strong>即使采用简单的ZF或MMSE等线性处理算法，也能够获得较好的性能。</strong></p>
<p>传统的预编码方案包括全数字预编码（Digital
Precoding，DP）方案和全模拟预编码（Aanalog
Precoding，AP）方案。根据预编码所使用的预编码矩阵集合的特点，也可以将预编码分类为非码本方式的预编码和基于码本的预编码。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/m0_51961114/article/details/120699238">(34条消息)
预编码 与 混合预编码 简单总结_小强~的博客-CSDN博客</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title>ikuai搭建seafile-docker</title>
    <url>/2024/01/20/seafile6.3.4%E7%88%B1%E5%BF%AB%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>这是一篇有关使用ikuai搭建6.3.4的博客，并且实现了ipv6的访问</p>
<span id="more"></span>
<h1 id="step1-安装seafile-docker">step1： 安装seafile-docker</h1>
<p>下载<code>seafileltd/seafile:latest</code>镜像</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20240120202506712.png"
alt="image-20240120202506712" />
<figcaption aria-hidden="true">image-20240120202506712</figcaption>
</figure>
<p>在容器设置中挂载目录</p>
<ul>
<li><code>/shared</code></li>
</ul>
<p>如下环境变量设置账号和密码</p>
<ul>
<li><code>SEAFILE_ADMIN_EMAIL</code></li>
<li><code>SEAFILE_ADMIN_PASSWORD</code></li>
</ul>
<h1 id="step2安装-iputils-ping">step2：安装 iputils-ping</h1>
<p>因为docker中的ipv6如果不往外界发出信号，路由是无法知道该容器的ipv6地址,所以需要安装ping工具每隔一段时间不断发包，表示心跳</p>
<p><strong>1.更新apt包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<p><strong>2.安装iputils-ping</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install -y iputils-ping</span><br></pre></td></tr></table></figure>
<p><strong>3.测试ping百度</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -6 -c 1 www.baidu.com</span><br></pre></td></tr></table></figure>
<p><strong>3.编写<code>/root/script/ping.sh</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    ping -c 1 -6  www.baidu.com &gt; /dev/null</span><br><span class="line">    sleep 15</span><br><span class="line"><span class="keyword">done</span> &amp;</span><br></pre></td></tr></table></figure>
<p><strong>4.修改ping.sh为可执行文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /root/script/ping.sh</span><br></pre></td></tr></table></figure>
<p><strong>5.测试脚本执行情况：如下执行成功</strong></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20240120203717758.png"
alt="image-20240120203717758" /><strong>6.修改自启动脚本</strong></p>
<p>在<code>/root/.bashrc</code>中追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f /root/script/ping.sh ]; <span class="keyword">then</span></span><br><span class="line">      /root/script/ping.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>一般而言，由于seafile不自动开bash，因此，建议将上述加入.bashrc加入到<code>seafile-server-latest/seafile.sh</code>中，添加到<code>echo "Seafile server started"</code>的前面.</p>
<h1 id="step3设置nginx反向代理">step3：设置nginx反向代理</h1>
<p><strong>1.创建<code>/etc/nginx/conf.d/seafile.conf</code>，内容如下</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> seafile.ninglang.fun;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For $remote_addr;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">         <span class="attribute">proxy_pass</span>         http://127.0.0.1:8000;</span><br><span class="line">         <span class="attribute">proxy_set_header</span>   Host $host;</span><br><span class="line">         <span class="attribute">proxy_set_header</span>   X-Real-IP $remote_addr;</span><br><span class="line">         <span class="attribute">proxy_set_header</span>   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         <span class="attribute">proxy_set_header</span>   X-Forwarded-Host $server_name;</span><br><span class="line">         <span class="attribute">proxy_read_timeout</span>  <span class="number">1200s</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment"># used for view/edit office file via Office Online Server</span></span><br><span class="line">         <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">         <span class="attribute">access_log</span>      /var/log/nginx/seahub.access.log;</span><br><span class="line">         <span class="attribute">error_log</span>       /var/log/nginx/seahub.<span class="literal">error</span>.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /seafhttp &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/seafhttp(.*)$</span> <span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">send_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">location</span> /seafdav &#123;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span>    <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   SCRIPT_FILENAME     $document_root$fastcgi_script_name;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   PATH_INFO           $fastcgi_script_name;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   SERVER_PROTOCOL     $server_protocol;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   QUERY_STRING        $query_string;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   REQUEST_METHOD      $request_method;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   CONTENT_TYPE        $content_type;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   CONTENT_LENGTH      $content_length;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   SERVER_ADDR         $server_addr;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   SERVER_PORT         $server_port;</span><br><span class="line">        <span class="attribute">fastcgi_param</span>   SERVER_NAME         $server_name;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line">        <span class="attribute">send_timeout</span>  <span class="number">36000s</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># This option is only available for Nginx &gt;= 1.8.0. See more details below.</span></span><br><span class="line">        <span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">access_log</span>      /var/log/nginx/seafdav.access.log;</span><br><span class="line">        <span class="attribute">error_log</span>       /var/log/nginx/seafdav.<span class="literal">error</span>.log;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>2.测试文件格式正常</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment">#nginx: configuration file /etc/nginx/nginx.conf test is successful</span></span><br></pre></td></tr></table></figure>
<p>重启docker容器</p>
<h1 id="step4设置seafile">step4：设置seafile</h1>
<p>修改<code>SERVICE_URL</code>和<code>FILE_SERVER_ROOT</code></p>
<p><code>SERVICE_URL</code>:<code>http://seafile.ninglang.fun</code></p>
<p><code>FILE_SERVER_ROOT</code>:<code>http://seafile.ninglang.fun/seafhttp</code></p>
<h1 id="step5设置seafdav">step5：设置seafdav</h1>
<p>设置<code>/conf/seafdav.conf</code>中为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">enabled</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">port</span> <span class="string">=</span> <span class="number">8080</span></span><br><span class="line"><span class="string">fastcgi</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line"><span class="string">share_name</span> <span class="string">=</span> <span class="string">/seafdav</span></span><br></pre></td></tr></table></figure>
<p>在手机端设置</p>
<p><code>网络地址</code>:<code>seafile.ninglang.fun/seafdav</code></p>
<p>账号密码如实填写</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>遗传算法</title>
    <url>/2022/02/20/yichuan/</url>
    <content><![CDATA[<p>遗传算法的初步了解</p>
<span id="more"></span>
<p>以<code>TSP</code>问题为例,遗传算法的流程图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/191819382245126.gif" alt="img" style="zoom: 33%;" /></p>
<p>首先创建最初种群</p>
<p>配置环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">as</span> conf</span><br><span class="line"><span class="keyword">from</span> ga <span class="keyword">import</span> Ga</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">config = conf.get_config()</span><br></pre></td></tr></table></figure>
<p>计算适应度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dist_mat</span>(<span class="params">input_list</span>):</span></span><br><span class="line">    n = config.city_num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;input_list&quot;</span>,input_list)</span><br><span class="line">    dist_mat = np.zeros([n, n])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            d = input_list[i, :] - input_list[j, :]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;d&quot;</span>,d)</span><br><span class="line">            <span class="comment"># 计算点积</span></span><br><span class="line">            dist_mat[i, j] = np.dot(d, d)</span><br><span class="line">            dist_mat[j, i] = dist_mat[i, j]</span><br><span class="line">    <span class="keyword">return</span> dist_mat</span><br></pre></td></tr></table></figure>
<p>创建最初种群</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 城市坐标</span></span><br><span class="line">city_pos_list = np.random.rand(config.city_num, config.pos_dimension)</span><br><span class="line"><span class="comment"># 城市距离矩阵</span></span><br><span class="line">city_dist_mat = build_dist_mat(city_pos_list)</span><br></pre></td></tr></table></figure>
<p>基因配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gene_len = config.city_num  <span class="comment">#基因长度，就是城市的数量</span></span><br><span class="line">individual_num = config.individual_num <span class="comment">#每次个体的数量</span></span><br><span class="line">gen_num = config.gen_num <span class="comment">#遗传代数</span></span><br><span class="line">mutate_prob = config.mutate_prob <span class="comment">#突变率</span></span><br></pre></td></tr></table></figure>
<p>数组深拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_list</span>(<span class="params">old_arr: [<span class="built_in">int</span>]</span>):</span></span><br><span class="line">    new_arr = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> old_arr:</span><br><span class="line">        new_arr.append(element)</span><br><span class="line">    <span class="keyword">return</span> new_arr</span><br></pre></td></tr></table></figure>
<p>种群中的一个个体,一个个体就是TSP的一个路线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Individual</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, genes=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="comment"># 随机生成序列</span></span><br><span class="line">        <span class="keyword">if</span> genes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            genes = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gene_len)]<span class="comment">#如果是初代，那么路线则为默认12345</span></span><br><span class="line">            random.shuffle(genes)<span class="comment">#然后打乱路线</span></span><br><span class="line">        self.genes = genes</span><br><span class="line">        self.fitness = self.evaluate_fitness()</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">evaluate_fitness</span>(<span class="params">self</span>):</span>  <span class="comment">#计算路线的长度</span></span><br><span class="line">        <span class="comment"># 计算个体适应度</span></span><br><span class="line">        fitness = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gene_len - <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 起始城市和目标城市</span></span><br><span class="line">            from_idx = self.genes[i]</span><br><span class="line">            to_idx = self.genes[i + <span class="number">1</span>]</span><br><span class="line">            fitness += city_dist_mat[from_idx, to_idx]</span><br><span class="line">        <span class="comment"># 连接首尾</span></span><br><span class="line">        fitness += city_dist_mat[self.genes[-<span class="number">1</span>], self.genes[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> fitness</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>GA算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ga</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_</span>):</span></span><br><span class="line">        <span class="keyword">global</span> city_dist_mat</span><br><span class="line">        city_dist_mat = input_</span><br><span class="line">        self.best = <span class="literal">None</span>  <span class="comment"># 每一代的最佳个体</span></span><br><span class="line">        self.individual_list = []  <span class="comment"># 每一代的个体列表</span></span><br><span class="line">        self.result_list = []  <span class="comment"># 每一代对应的解</span></span><br><span class="line">        self.fitness_list = []  <span class="comment"># 每一代对应的适应度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cross</span>(<span class="params">self</span>):</span>  <span class="comment">#交叉</span></span><br><span class="line">        new_gen = []	<span class="comment">#新一代</span></span><br><span class="line">        random.shuffle(self.individual_list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, individual_num - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 父代基因</span></span><br><span class="line">            genes1 = copy_list(self.individual_list[i].genes)</span><br><span class="line">            genes2 = copy_list(self.individual_list[i + <span class="number">1</span>].genes)</span><br><span class="line">            index1 = random.randint(<span class="number">0</span>, gene_len - <span class="number">2</span>)</span><br><span class="line">            index2 = random.randint(index1, gene_len - <span class="number">1</span>)</span><br><span class="line">            pos1_recorder = &#123;value: idx <span class="keyword">for</span> idx, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(genes1)&#125;</span><br><span class="line">            pos2_recorder = &#123;value: idx <span class="keyword">for</span> idx, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(genes2)&#125;</span><br><span class="line">            <span class="comment">#键是原来的数，值是该数在数组的位置</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment"># 交叉</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(index1, index2):</span><br><span class="line">                value1, value2 = genes1[j], genes2[j] <span class="comment">#取出j位置的该值</span></span><br><span class="line">                pos1, pos2 = pos1_recorder[value2], pos2_recorder[value1]<span class="comment">#取出相反该值的位置</span></span><br><span class="line">                <span class="comment">#两个基因交换</span></span><br><span class="line">                genes1[j], genes1[pos1] = genes1[pos1], genes1[j]</span><br><span class="line">                genes2[j], genes2[pos2] = genes2[pos2], genes2[j]</span><br><span class="line">                pos1_recorder[value1], pos1_recorder[value2] = pos1, j</span><br><span class="line">                pos2_recorder[value1], pos2_recorder[value2] = j, pos2</span><br><span class="line">            new_gen.append(Individual(genes1))</span><br><span class="line">            new_gen.append(Individual(genes2))</span><br><span class="line">        <span class="keyword">return</span> new_gen</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mutate</span>(<span class="params">self, new_gen</span>):</span>   <span class="comment">#变异</span></span><br><span class="line">        <span class="keyword">for</span> individual <span class="keyword">in</span> new_gen:</span><br><span class="line">            <span class="keyword">if</span> random.random() &lt; mutate_prob:</span><br><span class="line">                <span class="comment"># 翻转切片</span></span><br><span class="line">                old_genes = copy_list(individual.genes)</span><br><span class="line">                index1 = random.randint(<span class="number">0</span>, gene_len - <span class="number">2</span>)</span><br><span class="line">                index2 = random.randint(index1, gene_len - <span class="number">1</span>)</span><br><span class="line">                genes_mutate = old_genes[index1:index2]</span><br><span class="line">                genes_mutate.reverse()</span><br><span class="line">                individual.genes = old_genes[:index1] + genes_mutate + old_genes[index2:]</span><br><span class="line">        <span class="comment"># 两代合并</span></span><br><span class="line">        self.individual_list += new_gen</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">self</span>):</span>    <span class="comment">#选择</span></span><br><span class="line">        <span class="comment"># 锦标赛</span></span><br><span class="line">        group_num = <span class="number">10</span>  <span class="comment"># 小组数</span></span><br><span class="line">        group_size = <span class="number">10</span>  <span class="comment"># 每小组人数</span></span><br><span class="line">        group_winner = individual_num // group_num  <span class="comment"># 每小组获胜人数</span></span><br><span class="line">        winners = []  <span class="comment"># 锦标赛结果</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(group_num):</span><br><span class="line">            group = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(group_size):</span><br><span class="line">                <span class="comment"># 随机组成小组</span></span><br><span class="line">                player = random.choice(self.individual_list)</span><br><span class="line">                player = Individual(player.genes)</span><br><span class="line">                group.append(player)</span><br><span class="line">            group = Ga.rank(group)</span><br><span class="line">            <span class="comment"># 取出获胜者</span></span><br><span class="line">            winners += group[:group_winner]</span><br><span class="line">        self.individual_list = winners</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rank</span>(<span class="params">group</span>):</span></span><br><span class="line">        <span class="comment"># 冒泡排序</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(group)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(group) - i):</span><br><span class="line">                <span class="keyword">if</span> group[j].fitness &gt; group[j + <span class="number">1</span>].fitness:</span><br><span class="line">                    group[j], group[j + <span class="number">1</span>] = group[j + <span class="number">1</span>], group[j]</span><br><span class="line">        <span class="keyword">return</span> group</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_gen</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 交叉</span></span><br><span class="line">        new_gen = self.cross()</span><br><span class="line">        <span class="comment"># 变异</span></span><br><span class="line">        self.mutate(new_gen)</span><br><span class="line">        <span class="comment"># 选择</span></span><br><span class="line">        self.select()</span><br><span class="line">        <span class="comment"># 获得这一代的结果</span></span><br><span class="line">        <span class="keyword">for</span> individual <span class="keyword">in</span> self.individual_list:</span><br><span class="line">            <span class="keyword">if</span> individual.fitness &lt; self.best.fitness:</span><br><span class="line">                self.best = individual</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初代种群</span></span><br><span class="line">        self.individual_list = [Individual() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(individual_num)] <span class="comment">#初始化初代种群</span></span><br><span class="line">        <span class="comment">#individual里面genes只有数字的数组</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        self.best = self.individual_list[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 迭代</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gen_num):</span><br><span class="line">            self.next_gen()</span><br><span class="line">            <span class="comment"># 连接首尾</span></span><br><span class="line">            result = copy_list(self.best.genes)</span><br><span class="line">            result.append(result[<span class="number">0</span>])</span><br><span class="line">            self.result_list.append(result)</span><br><span class="line">            self.fitness_list.append(self.best.fitness)</span><br><span class="line">        <span class="keyword">return</span> self.result_list, self.fitness_list</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>时间预测模型</title>
    <url>/2022/02/20/%E6%97%B6%E9%97%B4%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>美赛的一种预测模型</p>
<span id="more"></span>
<p>基于时间序列模型对黄金和比特币的预测</p>
<p>黄金和比特币这一类的产品，一般来说，是自身会随着时间发生变化的产品，而时间序列的预测，主要适用于自身的发展趋势会随着自己的情况发展变化，于是，我们这个时候可以使用时间预测模型对该种情况进行预测，</p>
<p>这个时候我们可以着手判断产品随着时间变化的自我相关问题,根据查阅各样文献,可以得到,最常用的方法还是ARMA的方式。,这种方法比较适用于小规模单变量的预测，如股票的走势。</p>
<h2 id="ar模型">AR模型</h2>
<p>AR模型是一种自回归模型,简称它表述的是随机变量与前P期的多元线性回归。说明了随机变量<span
class="math inline">\(x_{t}\)</span>主要受前<span
class="math inline">\(p\)</span>期序列的影响。我们可以通过这种方式。将黄金和比特币的前几期作为自变量。然后将该天的黄金和比特币的售价作为因变量。通过AR模型。我们可以计算出前<span
class="math inline">\(p\)</span>期的<span
class="math inline">\(x_t\)</span>之间的相关性。如果<span
class="math inline">\(x_t\)</span>主要受过去P阶序列的影响，那么相关系数corre将会更接近一。这个时候我们就认为。当天的售价受前P期的影响。</p>
<h2 id="ma模型">MA模型</h2>
<p>​ MA模型主要研究的是<span
class="math inline">\(x_t\)</span>的取值与前Q期的随机扰动有关,认为是<span
class="math inline">\(x_t\)</span>主要受过去Q期的干扰项的影响，所以对于MA模型</p>
<h2
id="arma模型autoregressive-moving-average-model">ARMA模型（<strong>A</strong>uto<strong>r</strong>egressive
<strong>m</strong>oving <strong>a</strong>verage model）</h2>
<p>ARMA
模型，主要是结合AR模型自回归问题，也结合MA模型的平行移动的问题，一方面体现了时间的延续性，另一方面，又有自身变动的规律，假设影响因素为<span
class="math inline">\(x_1,x_2,x_3....,x_k\)</span>,由自回归分析可得
<span class="math display">\[
Y_{t}=\beta_{1} x_{1}+\beta_{2} x_{2}+\cdots+\beta_{p} x_{p}+Z
\]</span> 其中Y是预测对象的观测值，<span
class="math inline">\(Z\)</span>为误差项 <span class="math display">\[
Y_{t}=\beta_{1} Y_{t-1}+\beta_{2} Y_{t-2}+\cdots+\beta_{p} Y_{t-p}+Z_{t}
\]</span> 误差的表达方式为 <span class="math display">\[
Z_{t}=\epsilon_{t}+\alpha_{1} \epsilon_{t-1}+\alpha_{2}
\epsilon_{t-2}+\cdots+\alpha_{q} \epsilon_{t-q}
\]</span> 我们最终获得ARMA模型的表达式是 <span class="math display">\[
Y_{t}=\beta_{0}+\beta_{1} Y_{t-1}+\beta_{2} Y_{t-2}+\cdots+\beta_{p}
Y_{t-p}+\epsilon_{t}+\alpha_{1} \epsilon_{t-1}+\alpha_{2}
\epsilon_{t-2}+\cdots+\alpha_{q} \epsilon_{t-q}
\]</span></p>
<h2 id="黄金股票预测">黄金股票预测</h2>
<p>要想建立ARMA模型，首先，需要判断已有数据是否遵循时间序列数据的特点，第一步，判断数据是否具有稳定，而判断的标准，其一、要求经由样本时间序列所得到的拟合曲线在未来的一段期间内仍能顺着现有的形态“惯性″地延续下去，其二、平稳性要求序列的均值和方差不发生明显变化，只有满足这两个条件，这个数据才能被认为可以使用时间序列模型进行预测。</p>
<h3 id="arima">ARIMA</h3>
<p>当原来的数据不具有明显的平衡性的时候，我们可以利用原数据的差分运算之后结果的稳定，利用研究差分运算之后数据来进行构建时间序列的模型，即ARIMA，它是ARMA的扩展,其模型可以表示为
<span class="math display">\[
\left(1-\sum_{i=1}^{p} \phi_{i} L^{i}\right)(1-L)^{d}
X_{t}=\left(1+\sum_{i=1}^{q} \theta_{i} L^{i}\right) \varepsilon_{t}
\]</span> 其中<span class="math inline">\(d \in Z ,
d&gt;0\)</span>,记作ARMA(P,D,Q)</p>
<p>在确定使用哪一种方式之前，我们做出了原数据，一阶差分，二阶差分的图像，如图所示（其中为比特币的处理图像）</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download.png" alt="各阶差分图" style="zoom:50%;" /></p>
<p>可以明显看出，一阶差分的稳定性和二阶差分的稳定要远远大于原始数据的稳定性，所以，这时我们可以选择一阶差分或者是二阶差分，遵循所给的最低标准，我们可以将阶数设置为1，即<span
class="math inline">\(d_{diff}=1\)</span>，即<span
class="math inline">\(d_{diff} \neq 0\)</span></p>
<p>接下来，利用自相关模型MA来研究MA模型受前q期相关的参数q，通过Python的
statsmodels.tsa.stattools 研究一阶差分的自相关阶数和偏相关阶数，如图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (1).png" alt="download (1)" style="zoom:50%;" /></p>
<p>图中淡蓝色的阴影区域，表示阶数的置信区间，通过观察，对于自相关而言q=1,2,3,4,5都有可能，p=1,2,3,4也都有可能，显然，仅通过图像观察并不是十分的直观，于是，我们来计算对于不同的q和p的情况下，计算模型的相关系数</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (2).png" alt="download (2)" style="zoom:50%;" /></p>
<p>可以看出当Lag=3的时候，相关系数<span
class="math inline">\(corr\)</span>最大，结合上图这是我们断定<span
class="math inline">\(q\)</span>=3,<span
class="math inline">\(p\)</span>=2即构建ARMA模型的三个参数 <span
class="math display">\[
(P,D,Q):(2,1,3)
\]</span>
使用Python的sm库中的ARIMA来预测模型，可以得到模型，并且选用其中的七天作为训练集，然后对第八天、九天、十天做出预测</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (4).png" alt="预测图" style="zoom:50%;" /></p>
<p>最后，对模型进行残差分析，可以得到残差图，如图</p>
<p><img src="https://picturnl.oss-cn-shanghai.aliyuncs.com/download (3).png" alt="download (3)"  /></p>
<p>可以看出，我们研究的模型线性关系较好，说明模型预测具有较好的准确性.</p>
]]></content>
      <categories>
        <category>Math Model</category>
      </categories>
  </entry>
  <entry>
    <title>卷积神经网络</title>
    <url>/2023/06/25/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>移动通信重点总结</p>
<span id="more"></span>
<p>CNN可视化：<a href="https://poloclub.github.io/cnn-explainer/">CNN
Explainer</a></p>
<h1 id="swim-transform">SWim Transform</h1>
<p><a
href="https://www.msra.cn/zh-cn/news/features/swin-transformer-v2#:~:text=Swin%20Transformer,%E6%98%AF%E4%B8%80%E4%B8%AA%E9%80%9A%E7%94%A8%E7%9A%84%E8%A7%86%E8%A7%89%20Transformer%20%E9%AA%A8%E5%B9%B2%E7%BD%91%E7%BB%9C%EF%BC%8C%E5%AE%83%E5%9C%A8%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E5%92%8C%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2%E4%BB%BB%E5%8A%A1%E4%B8%AD%E5%A4%A7%E5%B9%85%E5%88%B7%E6%96%B0%E4%BA%86%E6%AD%A4%E5%89%8D%E7%9A%84%E7%BA%AA%E5%BD%95%EF%BC%8C%E5%B9%B6%E8%A2%AB%E5%B9%BF%E6%B3%9B%E5%BA%94%E7%94%A8%E4%BA%8E%E4%BC%97%E5%A4%9A%E8%A7%86%E8%A7%89%E4%BB%BB%E5%8A%A1%E4%B8%AD%EF%BC%8C%E5%A6%82%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90%E3%80%81%E8%A7%86%E9%A2%91%E5%8A%A8%E4%BD%9C%E8%AF%86%E5%88%AB%E3%80%81%E8%A7%86%E8%A7%89%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E3%80%81%E5%9B%BE%E5%83%8F%E5%A4%8D%E5%8E%9F%E3%80%81%E5%8C%BB%E7%96%97%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%E7%AD%89%E3%80%82">Swin
Transformer迎来30亿参数的v2.0，我们应该拥抱视觉大模型吗？</a>.</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>近代史实践总结</title>
    <url>/2022/01/03/%E8%BF%91%E4%BB%A3%E5%8F%B2%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>🙄</p>
<span id="more"></span>
<center>
先来看看整个效果吧😜
</center>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
<iframe src="//player.bilibili.com/player.html?aid=892959467&bvid=BV1nP4y1E7PM&cid=476772115&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>

<center>
一些小细节
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/jindaishi.png" /></p>
<center>
看国焘春风得意🤣
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220226072.png" /></p>
<center>
贺龙和代英胜利在握😏
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220435471.png" /></p>
<center>
哈哈，都不知道在笑什么😆
</center>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103220539122.png" /></p>
<center>
小伙伴们都被吓傻啦😅
</center>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/23.gif" /></div><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/1-min-1641220427188.gif" /></div></div></div>
<center>
集体照组合🤣
</center>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223711885.png" /></div><div class="group-picture-column"><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223633199.png" /></div></div></div>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20220103223731093.png" /></p>
<p>非常感谢那段时光大家的努力，我们的努力终究也会得到回报😊</p>
]]></content>
      <categories>
        <category>思想觉悟</category>
      </categories>
  </entry>
  <entry>
    <title>ISAC</title>
    <url>/2023/07/06/%E9%80%9A%E4%BF%A1%E6%84%9F%E7%9F%A5%E4%B8%80%E4%BD%93%E5%8C%96/</url>
    <content><![CDATA[<p>移动通信重点总结</p>
<p>通感一体化</p>
<span id="more"></span>
<h1 id="什么是通感一体化isac">什么是通感一体化（ISAC）</h1>
<p><a
href="https://www.huawei.com/cn/huaweitech/future-technologies/integrated-sensing-communication-concept-practice">通信感知一体化——从概念到实践
- 华为</a>。</p>
<p><a
href="https://baike.baidu.com/item/%E5%A4%A9%E7%BA%BF%E6%8C%AF%E5%AD%90/4721920">天线振子_百度百科</a></p>
<p><a
href="https://blog.csdn.net/LinkEverything/article/details/125571808">(35条消息)
3GPP信道模型路损基础知识_3gpp常用信道模型_LinkEverything的博客-CSDN博客</a>。</p>
<blockquote>
<p>即非正交多址接入(NOMA)。在正交多址技术（OMA）中，只能为一个用户分配单一的无线资源，例如按频率分割或按时间分割，而NOMA方式可将一个资源分配给多个用户。在某些场景中，比如远近效应场景和广覆盖多节点接入的场景，特别是上行密集场景，采用功率复用的非正交接入多址方式较传统的正交接入有明显的性能优势，更适合未来系统的部署。目前已经有研究验证了在城市地区采用NOMA的效果，并已证实，采用该方法可使无线接入宏蜂窝的总吞吐量提高50%左右。非正交多址复用通过结合串行干扰消除或类最大似然解调才能取得容量极限，因此技术实现的难点在于是否能设计出低复杂度且有效的接收机算法。</p>
<p>NOMA不同于传统的正交传输，在发送端采用非正交发送，主动引入干扰信息，在接收端通过串行干扰删除技术实现正确解调。与正交传输相比，接收机复杂度有所提升，但可以获得更高的频谱效率。非正交传输的基本思想是利用复杂的接收机设计来换取更高的频谱效率，随着芯片处理能力的增强，将使非正交传输技术在实际系统中的应用成为可能。</p>
</blockquote>
<p><a
href="https://blog.csdn.net/qq_28734159/article/details/82875242?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-82875242-blog-108223543.235%5Ev38%5Epc_relevant_sort_base2&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7">(35条消息)
5G:非正交多址接入（NOMA）与串行干扰删除（SIC）_串行干扰消除_sswzw_cll的博客-CSDN博客</a>.</p>
<p>NOMA:</p>
<blockquote>
<p>1、串行干扰删除（SIC）</p>
<p>2、功率复用</p>
</blockquote>
<p><a
href="https://blog.csdn.net/qq_28734159/article/details/82875242?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-82875242-blog-108223543.235%5Ev38%5Epc_relevant_sort_base2&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7">(35条消息)
5G:非正交多址接入（NOMA）与串行干扰删除（SIC）_串行干扰消除_sswzw_cll的博客-CSDN博客</a>.</p>
<blockquote>
<p>对于LTE架构来说，网元包含的很多，其中，基站也是其中的一个网元，除此外还有MME、SGW、PDN等等。基站就是一个网元，基站和网元的关系类似苹果和水果的关系。网元划分的粒度很多，看用途了，有物理网元，逻辑网元，等效网元数等</p>
</blockquote>
<p><a
href="https://baike.baidu.com/item/%E7%BD%91%E5%85%83/11040242">网元_百度百科</a>.</p>
<p>感知与通信从松耦合到完全一体化可分为三个等级:</p>
<ol type="1">
<li>通信与感知共享硬件和频谱</li>
<li>实现波形和信号处理一体化</li>
<li>信息可以跨层、跨模块、跨节点
共享，通信与感知完全一体化，系统性能显著提升，网络系统
的总体成本和能耗将大大减少、系统规模也更小，基站与用户 设备（User
Equipment，UE）之间更大规模的协同、通信感
知波形联合设计、先进的干扰消除技术、原生AI 技术等其他技
术创新还可以进一步提升感知数据的处理能力。</li>
</ol>
<p>ISAC的作用：在增强定位能力和毫米级</p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
  </entry>
  <entry>
    <title>移动通信重点总结</title>
    <url>/2023/06/09/mobile%20commuciation/</url>
    <content><![CDATA[<p>移动通信重点总结</p>
<span id="more"></span>
<h1 id="第一章">第一章</h1>
<ol type="1">
<li><p>移动通信的概念、特点；</p>
<ul>
<li>概念：所谓移动通信，是指通信双方或至少有一方处于移动中进行信息传输和交换的通信方式。</li>
<li>移动通信的特点：
<ul>
<li>移动通信利用无线电波进行信息传输；</li>
<li>移动通信是在复杂的干扰环境中运行；</li>
<li>随着业务量的增加，可利用的频谱资源会出现受限；</li>
<li>对移动台的要求高；</li>
<li>通信容量有限；</li>
<li>通信系统复杂</li>
</ul></li>
</ul></li>
<li><p>移动通信的发展历程及发展趋势；</p></li>
<li><p>无线频谱的规划及第四代移动通信的工作频段；</p>
<ul>
<li>TD-LTE频段：中国移动分配130MHz带宽，分别为1880-1900MHz、2320-2370MHz、2575-2635MHz；中国联通分配40MHz带宽，分别为2300-2320MHz、2555-2575MHz；中国电信分配40MHz带宽，分别为2370-2390MHz、2635-2655MHz.</li>
<li>FDD
LTE频段：中国电信分配1.8GHz频段（1755-1785MHZ/1850-1880MHz），中国联通分配2.1GHz频段（1955-1980MHz/2145-2170MHz）</li>
</ul></li>
<li><p>移动通信的几种工作方式；</p>
<ul>
<li>单工：同频单工、双频单工</li>
<li>双工：通信双方均同时进行收发工作。即任一方讲话时，可以听到对方的话音。</li>
<li>半双工：通信双方中，一方使用双频双工方式，即收发信机同时工作；另一方使用双频单工方式，即收发信机交替工作。</li>
<li>移动中继：增加通信距离</li>
</ul></li>
<li><p>移动通信的应用系统。</p>
<ul>
<li>蜂窝式公用移动通信系统</li>
<li>集群调度移动通信系统</li>
<li>无绳电话系统</li>
<li>无线电寻呼系统</li>
<li>卫星移动通信系统</li>
<li>无线LAN/WAN</li>
</ul></li>
</ol>
<h1 id="第二章">第二章</h1>
<ol type="1">
<li><p>电波传播的基本特性；</p>
<ul>
<li>移动通信信道</li>
<li>衰落的原因</li>
<li>无线电波传播方式:直射、反射绕射和散射以及它们的合成</li>
<li>衰落的表现：传播损耗和弥散
<ul>
<li>阴影衰落</li>
<li>多径衰落</li>
<li>多普勒频移</li>
</ul></li>
</ul></li>
<li><p>3种电波传播的机制；</p>
<ul>
<li>反射：阻挡体比传输波长大的多的物体</li>
<li>绕射：阻挡体为尖利边缘</li>
<li>散射：产生于粗糙表面、小物体或其它不规则物体</li>
</ul></li>
<li><p>对数距离路径损耗模型及参数；</p>
<svg xmlns="http://www.w3.org/2000/svg" width="28.177ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 12454.2 2399" style="vertical-align: -2.148ex;">
<p><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="4C" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="TeXAtom" transform="translate(681, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520, 0)"><path data-c="42" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1913.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2968.9, 0)"><path data-c="4C" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mrow" transform="translate(3649.9, 0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><path data-c="64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1312.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mo" transform="translate(5573.7, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6573.9, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500, 0)"></path></g><g data-mml-node="mi" transform="translate(7573.9, 0)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8340.6, 0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278, 0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778, 0)"></path></g><g data-mml-node="mo" transform="translate(9618.6, 0)"><path data-c="2061" d=""></path></g><g data-mml-node="mrow" transform="translate(9618.6, 0)"><g data-mml-node="mo"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736, 0)"><g data-mml-node="mi" transform="translate(421.8, 676)"><path data-c="64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(520, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><rect width="1123.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2099.6, 0)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g></g></g></p>
</svg>
<ul>
<li>其中，<span
class="math inline">\(d_0\)</span>是一个参考距离，在参考距离或接近参考距离的位置，路径损耗具有自由空间损耗的特点；<span
class="math inline">\(d\)</span>是发射天线到接收天线间的距离；是路径损耗指数，表明路径损耗随距离增长的速率，其取值主要取决于传播环境，其变化范围为2~6</li>
</ul></li>
<li><p>多径衰落信道的主要参数及多径衰落信道分类、多径信道的统计分析；</p>
<ul>
<li><p>多径信道的主要参数:</p>
<ol type="1">
<li>时间色散参数和相关带宽：
<ol type="1">
<li>（1）时间色散参数</li>
<li>（2）相关带宽</li>
</ol></li>
<li>频率色散参数和相关时间
<ol type="1">
<li>（1）多普勒扩展</li>
<li>（2）相关时间</li>
</ol></li>
<li>角度色散参数和相关距离
<ol type="1">
<li>（1）角度扩展</li>
<li>（2）相关距离</li>
</ol></li>
</ol></li>
<li><p>分类：</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230609164847.png" /></p>
<ol type="1">
<li><p>1.平坦衰落和频率选择性衰落:</p>
<ol type="1">
<li><p>平坦衰落:<span class="math inline">\(B_{\mathrm{s}} \ll
B_{\mathrm{c}},T_{\mathrm{s}} \gg \sigma_\tau\)</span></p>
<p><span class="math inline">\(T_s\)</span>为信号周期（信号带宽<span
class="math inline">\(B_s\)</span>的倒数）；<span
class="math inline">\(\sigma_\tau\)</span>是信道的时延扩展；<span
class="math inline">\(B_c\)</span>为相关带宽</p></li>
</ol></li>
<li><p>2.快衰落和慢衰落</p>
<ol type="1">
<li><p>快衰落:<span class="math inline">\(\begin{aligned} &amp;
T_{\mathrm{s}}&gt;T_{\mathrm{c}} \\ &amp;
B_{\mathrm{s}}&lt;B_{\mathrm{D}}\end{aligned}\)</span></p>
<p><span class="math inline">\(B_D\)</span>为多普勒扩展，<span
class="math inline">\(T_c\)</span>为发送信号的周期</p></li>
</ol></li>
</ol></li>
<li><p>多径信道的统计分析</p>
<ol type="1">
<li>1.瑞利分布：1.发射机和接收机之间没有直射波路径；有大量的反射波存在，且到达接收机天线的方向角是随机的（0一2π均匀分布）；各个反射波的幅度和相位都是统计独立的。</li>
<li>2.莱斯分布:视距信号成为主接收信号分量</li>
<li>3.Nakagami-m分布</li>
</ol></li>
</ul></li>
<li><p>自由空间和阴影衰落的概念；</p>
<ul>
<li>阴影衰落：地形起伏、建筑物及其它障碍物对电波传播路径的阻挡而形成</li>
<li>自由空间：在理想的、均匀的、各向同性的介质中传播，只存在电磁波能量扩散而引起的传播损耗。（不发生反射、折射、绕射、散射和吸收现象）</li>
</ul></li>
<li><p>多径衰落的特性和多普勒频移；</p>
<p>多径衰落的特性</p>
<ol type="1">
<li>幅度衰落</li>
<li>时延扩展</li>
</ol>
<p>多普勒频移：<span class="math inline">\(f_d=\frac{v}{\lambda} \cos
\alpha\)</span></p></li>
<li><p>课上习题。</p></li>
</ol>
<h1 id="第三章">第三章</h1>
<ol type="1">
<li><p>信源编码的目的；</p>
<ol type="1">
<li>信源编码的目的：将信源中的冗余信息进行压缩</li>
<li>调制目的：是使携带信息的信号与信道特性相匹配以及有效地利用信道。</li>
</ol></li>
<li><p>影响调制方式选择的主要因素；</p>
<ol type="1">
<li>频带利用率：<span class="math inline">\(\eta_b=R_b /
B\)</span>。其中<span class="math inline">\(R_b\)</span>为比特速率</li>
<li>功率效率:指保持信息精确度的情况下所需的最小信号功率或者说最小信噪比</li>
<li>己调信号恒包络:具有恒包络特性的信号对放大器的非线性不敏感，功率效率高。</li>
<li>易于解调：相干解调和非相干解调</li>
<li>带外辐射：一般要求达到-60到-70dB</li>
</ol></li>
<li><p>2FSK、CPFSK信号及特点；</p>
<ol type="1">
<li>2FSK:</li>
</ol>
<p><span class="math display">\[
\left.\begin{array}{ll}
a_k=+1: &amp; s_{F S K}(t)=\cos \left(\omega_1 t+\varphi_1\right) \\
a_k=-1: &amp; s_{F S K}(t)=\cos \left(\omega_2 t+\varphi_2\right)
\end{array}\right\} \quad\left(k T_b \leq t \leq(k+1) T_b\right)
\]</span></p>
<ol start="2" type="1">
<li><p>cpfsk:即要求当前码元的初相位由前一码元的初相位、当前码元<span
class="math inline">\(a_k\)</span>和前一码元<span
class="math inline">\(a_{k-1}\)</span>来决定，该关系称为相位约束条件
<span class="math display">\[
\varphi_k=\left(a_{k-1}-a_k\right) \pi h \cdot k+\varphi_{k-1}
\]</span></p></li>
<li><p>总结：可以发现，在相同的调制指数h情况下，CPFSK的带宽要比一般的
2FSK带宽要窄。这意味着前者的频带效率要高于后者。所以，在移动通信
系统中，2FSK调制常常采用相位连续的调制方式</p>
<p>随着调制指数h的增加，信号的带宽也在增加。从频带效率考虑，调
制指数h不宜太大。但过小又因两个信号频率过于接近而不利于信号的检测。
所以应当从它们的<strong>相关系数</strong>以及信号的<strong>带宽</strong>综合考虑进行选择</p></li>
</ol></li>
<li><p>MSK信号的相位路径、频率关系及功率谱特点；</p>
<ol type="1">
<li>相位路径:由于h=0.5，MSK的相位约束条件：</li>
</ol>
<p><span class="math display">\[
\varphi_k=\left(a_{k-1}-a_k\right) \frac{\pi}{2} \cdot k+\varphi_{k-1}
\]</span></p>
<ol start="2" type="1">
<li><p>频率关系 <span class="math display">\[
\left.\begin{array}{l}
f_c=m \cdot R_b / 4 \\
f_2=(m+1) R_b / 4 \\
f_1=(m-1) R_b / 4
\end{array}\right\}
\]</span> 载波频率fc应当是Rb/4的整数倍</p></li>
<li><p>功率谱特点</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230609172345.png" /></p>
<p>由图可见，MSK信号比一般2FSK信号有更高的带宽效率。MSK旁瓣辐射功率仍然较大，会造成邻道干扰</p></li>
</ol></li>
<li><p>GMSK信号特点和功率谱特性</p>
<ul>
<li><p>GMSK信号:GMSK是基带信号经过高斯低通滤波器的MSK</p></li>
<li><p>功率谱特性:</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230609172609.png" /></p>
<ol type="1">
<li><p>MSK引入高斯滤波器后，平滑了相位路径，使得信号的频率变化平稳，大大减少了发射信号频谱的边带辐射。高斯低通滤波器的通带越窄，对邻信道的干扰越小</p></li>
<li><p>GMSK
最吸引人的地方是具有恒包络特性，功率效率高，可用非线性功率放大器和非相干检测。GMSK
的缺点是频谱效率还不够高。当频率资源紧缺</p></li>
<li><p>归一化3dB带宽:<span class="math inline">\(x_b=B_b / R_b=B_b
T_b\)</span></p></li>
<li><p>随着xb
的减小频谱效率越高，但xb过小会使码间干扰（ISI）增加(基带信号高斯滤波后，使波形在时间上扩展，引入了ISI）。</p></li>
</ol></li>
</ul></li>
<li><p>正交频分复用原理、优缺点、框图；</p>
<ol type="1">
<li><p>概念：系统把整个可用信道频带Ｂ划分为N个带宽为△f
的子信道。把N个串行码元变换为N个并行的码元，分别调制这N
个子信道载波进行同步传输，这就是频分复用。</p></li>
<li><p>正交频分复用的原理：如果子载波的间隔等于并行码元长度的倒数1/Ts，使用相干检测，采用子载波的频谱重叠可以使并行系统获得更高的带宽效率，这就是正交频分复用。</p></li>
<li><p>框图：</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230609173212.png" /></p></li>
<li><p>优缺点</p>
<ol type="1">
<li>优点：
<ol type="1">
<li>OFDM有比较高的带宽效率</li>
<li>瑞利衰落对码元的损伤较单载波容易恢复</li>
<li>系统因时延所产生的码间干扰不那么严重</li>
<li>当信道在某个频率出现较大幅度衰减或较强的窄带干扰时，只是影响个别的子信道</li>
<li>由于可以采用DFT实现OFDM信号，极大简化了系统的硬件结构</li>
</ol></li>
<li>缺点：
<ol type="1">
<li>OFDM存在发射信号的峰值功率和平均功率比值（PAR）过大的问题和由于多谱勒频谱扩展破坏子载波正交的问题。</li>
</ol></li>
</ol></li>
</ol></li>
<li><p>课上习题。</p></li>
</ol>
<h1 id="第四章">第四章</h1>
<ol type="1">
<li><p>分集接收技术的基本思想；</p>
<p>在移动环境中，通过不同途径所接收到的多个信号其衰落情况是不同的、衰落独立的。设其中某一信号分量的强度低于检测门限的概率为<span
class="math inline">\(p\)</span>，则所有<span
class="math inline">\(M\)</span>个信号分量的强度都低于检测门限的概率<span
class="math inline">\(p^M\)</span>远低于<span
class="math inline">\(p\)</span>。综合利用各信号分量，就有可能明显地改善接收信号的质量，这就是分集接收的基本思想。分集接收的代价是增加了接收机的复杂度，因为要对各径信号进行跟踪并及时对更多的信号分量进行处理，但它可以提高通信的可靠性.</p>
<ul>
<li>宏观分集—对抗阴影衰落</li>
<li>微观分集—对抗多径衰落</li>
</ul></li>
<li><p>微观分集的类型；</p>
<ol type="1">
<li>时间分集:移动的时间足够长（或移动的距离足够大），大于信道的相干时间。</li>
<li>频率分集:两个载波的间隔大于信道的相干带宽。举例：跳频通信。</li>
<li>空间分集:相隔足够大的距离，信号衰落相互独立。实际测量表明，通常在市区，取天线距离d=0.5，在郊区可以取d=0.81。</li>
</ol></li>
<li><p>分集的合并方式；</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20230609180554.png" /></p>
<ol type="1">
<li>选择合并:在所接收的多路信号中，合并器选择<strong>信噪比最高</strong>的一路输出这相当于在M个系数（中，只有一个等于1，其余的为0。)</li>
<li>最大比值合并和:在信号合并前，对各路载波相位进行调整并使之同相，然后相加。合并器输出信号</li>
<li>等增益合并:等增益合并器的各路加权系数均为1，合并器输出的信号</li>
<li>性能比较：最大比值合并改善最多，其次是等增益合并，最差是选择合并，这是因为选择合并只利用其中一个信号，其余没有被利用，而前两者使各支路信号的能量都得到利用</li>
</ol></li>
<li><p>分组码的编译码原理；</p></li>
<li><p>卷积码的编译码原理；</p></li>
<li><p>状态图、网格图、卷积码编码器框图、维特比译码；</p></li>
<li><p>CRC编码；</p></li>
<li><p>生成多项式、生成矩阵、监督矩阵；</p></li>
<li><p>直接序列扩频技术原理、抗多径衰落原理、框图；</p>
<p>直接序列扩频原理：</p></li>
<li><p>m序列的随机性质</p>
<ol type="1">
<li><p>（1）平衡特性：在m序列的一个完整周期N=2m一1内，0的个数和1的个数总是相差1。</p></li>
<li><p>（2）游程特性：在每个周期内，符号1或0连续相同的一段子序列称为一个游程。连续相同符号的个数称为游程的长度。m序列游程总数为（N十1）/2。其中长度为1的游程数等于游程总数的1/2；长度为2的游程数等于游程总数的1/4；长度为3的游程数等于游程总数的1/8，等等。最长的游程是m个连1（只有一个），最长连0的游程长度为m一1（也只有一个）。</p></li>
<li><p>相关特性：m序列的自相关函数是周期性的二值函数。可以证明，对长度为N的m序列都有结果：
<span class="math display">\[
R_{a, a}(n)=\left\{\begin{array}{lll}
1 &amp; n=l \cdot N \quad l=0, \pm 1, \pm 2, \ldots \\
\frac{-1}{N} &amp; \text { 其余 } n
\end{array}\right.
\]</span></p></li>
<li></li>
</ol></li>
<li><p>课上习题。</p></li>
</ol>
<h1 id="第五章">第五章</h1>
<h1 id="第六章">第六章</h1>
<h1 id="第七章">第七章</h1>
<p># 第八章</p>
<h1 id="第九章">第九章</h1>
<h1 id="第十章">第十章</h1>
]]></content>
      <categories>
        <category>code</category>
      </categories>
  </entry>
  <entry>
    <title>Cpp复习</title>
    <url>/2021/12/06/Cpp%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>cpp问题总结</p>
<span id="more"></span>
<h2 id="c基础">C基础</h2>
<p>程序形式：程序=过程+调用</p>
<p>I&gt;自顶向下、逐步求精：</p>
<p>I&gt;模化：</p>
<p>II&gt;语句结构化</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20211205182046698.png"
alt="image-20211205182046698" />
<figcaption aria-hidden="true">image-20211205182046698</figcaption>
</figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> a(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">int</span> a=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单的I/O格式控制</span></span><br><span class="line">setw(<span class="number">5</span>)<span class="comment">//设置域宽</span></span><br></pre></td></tr></table></figure>
<p>swith分支的判断都是<code>char</code>或者<code>int</code></p>
<p>1、数组名是一个常量，不能被赋值</p>
<p>2、二维数组初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//部分初始化化</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">6</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//列出全部初始值时，第1维下标个数可以省略 </span></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>数组中<code>a[]</code>,a作为数组名，不能进行<code>a++</code>,但是指针<code>p=a+10</code>是可以的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(--n)<span class="comment">//先自减，再判断n==0</span></span><br><span class="line"><span class="keyword">while</span>(n--)<span class="comment">//先判断n==0，再自减</span></span><br></pre></td></tr></table></figure>
<p>C语言中的变量声明必须集中的在前面，而不能放在函数执行的过程之中，需要我们特别注意</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i=<span class="number">10</span>;<span class="comment">//这是不允许的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>带有默认参数的函数，默认参数需要放在后面</p>
<h2 id="面向对象概述">面向对象概述</h2>
<p>1、什么是面向对象？</p>
<p>程序=对象+消息</p>
<p>2、什么是对象，对象与类的关系是什么？</p>
<p>在面向对象程序设计中，对象是描述其属性的数据以及对这些数据施加的一组操作封装在一起构成的统一体。在C++中每个对象都是由数据和操作代码（通常用函数来实现）</p>
<p>在面向对象程序设计中，“类”就是具有相同的数据和相同的操作（函数）的一组对象的集合，也就是说，类是对具有相同数据结构和相同操作的一类对象的描述。</p>
<p>两部分组成的,类和对象是抽象与具体的关系，类是多个对象综合抽象的结果，对象是类的具体实例</p>
<p>3、什么是消息？</p>
<p>一个对象向另一个对象发出的请求称为消息</p>
<p>消息有三个性质:</p>
<p>(1)同一个对象可以接收不同形式的多个消息,作出不同的响应;</p>
<p>(2)相同形式的消息可以传递给不同的对象,所作出的响应可以是不同的;</p>
<p>(3)对消息的响应并不是必需的,对象可以响应消息,也可以不响应。</p>
<p>4、什么是抽象与封装？</p>
<p>抽象是将有关事物的共性归纳，集中的过程，是对现实世界的简洁表达方式，抽象包括两个方面，数据抽象和代码抽象。</p>
<p>封装是把某个事物包围起来，使外界不知道该事物的具体内容，将数据和实现操作的代码集中放在对象的内部，尽可能屏蔽对象的内部细节</p>
<p>5、什么是继承？</p>
<p>继承所表达是类之间的相关关系，这一关系使得某类对象可以继承另外一类对象的特征和能力</p>
<p>6、派生类和父类（继承）有什么特征？</p>
<p>(1)类间具有共享特征(包括数据和操作代码的共享);</p>
<p>(2)类间具有差别或新增部分(包括非共享的数据和操作代码);</p>
<p>(3)类间具有层次结构。</p>
<p>7、什么是单继承、多继承</p>
<p>单继承是指每个派生只是继承了一个基类的特征</p>
<p>多继承是指多个基类派生出一个派生类的继承关系</p>
<p>8、什么是多态？ 不同的对象受到同样消息执行不同操作，有两种多态</p>
<ul>
<li>函数重载，运算符重载（编译时的多态）</li>
<li>虚函数（运行时的多态）</li>
</ul>
<p>9、面向对象的优点是什么？</p>
<p>(1)可提高程序的重用性;(继承、模板)</p>
<p>(2)可控制程序的复杂性;</p>
<p>(3)可改善程序的可维护性;</p>
<p>(4)能够更好地支持大型程序设计;</p>
<p>(5)增强了计算机处理信息的范围;</p>
<p>(6)能很好地适应新的硬件环境。</p>
<h2 id="cpp概述">cpp概述</h2>
<p>1、简述cpp的特点？</p>
<ul>
<li>cpp是c的超集，cpp保持了与c的兼容，使得众多c的函数库和代码不经修改可以直接用于cpp中</li>
<li>C++是一个更好的C,它保持了C的简洁、高效和接近汇编语言等特点,并对C的功能作了不少扩充。用C++编写的程序比C更安全,可读性更好,代码结构更为合理，C++的编译系统能够检查出更多的类型错误。</li>
<li>用C++编写的程序质量高,从开发时间、费用到形成的软件的可重用性、可扩充性、可维护性和可靠性等方面有了很大的提高,使得大中型的程序开发变得更加容易。</li>
<li>增加了面向对象的机制，支持几乎所有面向对象的特征其中包括：抽象与封装、继承、多态、模板</li>
<li>cpp既可以用于面向过程的结构化程序设计，也可以用于面向对象程序设计</li>
</ul>
<p>2、这个注释是否可用（cpp中嵌入c的注释）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this is my first note/*way to my home*/</span></span><br></pre></td></tr></table></figure>
<p>可以</p>
<p>3、这个程序是否能编译？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//int sum(int a,int b);</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;sum(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能，因为没有函数原型声明</p>
<p>4、这两个函数是否等价</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b,<span class="keyword">char</span> * C)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">fun</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">float</span>,<span class="keyword">char</span>* )</span></span></span><br></pre></td></tr></table></figure>
<p>不等价，必须包含参数名</p>
<p>5、常指针和常量指针</p>
<p>常指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> * <span class="keyword">const</span> name=<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">name[<span class="number">3</span>]=<span class="string">&#x27;q&#x27;</span>;<span class="comment">//正确</span></span><br><span class="line">name=<span class="string">&quot;yu&quot;</span>;<span class="comment">//不正确</span></span><br></pre></td></tr></table></figure>
<p>常量指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * name =<span class="string">&quot;chen&quot;</span>;</span><br><span class="line">name[<span class="number">3</span>] =<span class="string">&#x27;q&#x27;</span> ; <span class="comment">//不正确</span></span><br><span class="line">name=<span class="string">&quot;yu&quot;</span>;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<p>6、内联函数不是可以包含各种语句，其中例如<code>for</code>和<code>switch</code>都不行，内联函数在第一调用前必须有完整的定义，如果没有，也需要声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">box</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> )</span></span>;</span><br></pre></td></tr></table></figure>
<p>7、</p>
<ul>
<li>引用的对象不能是数组，不能创建引用的引用</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;&amp; a=b; <span class="comment">//引用的引用是不允许的</span></span><br><span class="line">a=&amp;b;</span><br><span class="line">c=&amp;b;  <span class="comment">//这种引用传递是可以的</span></span><br></pre></td></tr></table></figure>
<ul>
<li>数组使用<code>new</code>创建数组也不能直接初始化，但是基本数据类型可以，例如</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">//初始化int指针为10</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//初始化长度为40的数组</span></span><br></pre></td></tr></table></figure>
<p>8、函数重载不能根据其返回的数据类型来判断，而是参数的个数，参数的数据类型（形参表不一样）</p>
<p>9、用<code>new</code>创建对象时也需要调用构造函数,删除时可以使用<code>delete []name</code>,并且一个指针也只能调用一次<code>delete</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用 new 创建时调用构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	A()&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;construct&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	A *p=<span class="keyword">new</span> A;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>delete</code>是会释放内存的，但是不会让指针变量消失，也就是，它还可以指向别的地址</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">p=a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<h2 id="类与对象">类与对象</h2>
<p>1、类默认的私有成员属性让整个cpp中的类比结构体更安全（数据隐藏），<font color='red'>但是结构体默认是公有的</font></p>
<ul>
<li><font color='red'>不能在类声明中给数据成员赋初值</font></li>
<li>在声明类的同时定义的对象是一种全局对象，它的生存期直到整个程序运行结束</li>
<li>声明了一个类便声明了一种类型，<font color='red'>这时没有给它分配存储空间</font></li>
</ul>
<p>2、类外定义成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">s</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Point::s</span><span class="params">()</span><span class="comment">//定义内联函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::b</span><span class="params">()</span><span class="comment">//定义普通函数</span></span></span><br></pre></td></tr></table></figure>
<p>3、定义对象的<font color='red'>三种方式</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;a,b,c;<span class="comment">//方式一</span></span><br><span class="line"></span><br><span class="line">Point a,b,c;<span class="comment">//方式二</span></span><br><span class="line">Complex *p =<span class="keyword">new</span> Complex(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//无名对象</span></span><br></pre></td></tr></table></figure>
<p>4、指针访问对象成员的<font color='red'>两种方式</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ptr-&gt;a;</span><br><span class="line">(*ptr).a;<span class="comment">//这种容易忘记</span></span><br></pre></td></tr></table></figure>
<p>5、构造函数和析构函数（构造函数在类外定义时一定要记得加类名，<font color='red'>无需返回值</font>）</p>
<p>功能：为对象分配存储空间，为对象收回存储空间</p>
<ul>
<li>构造函数：<font color='red'>名字与类名同名，参数任意，不能有返回值，可以类外定义,构造函数不能手动调用</font></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a b;</span><br><span class="line">    b.a();<span class="comment">//错误，不能主动调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>析构函数：</li>
</ul>
<p>6、对象初始化</p>
<p>在定义对象时，对数据成员赋初值，称为对象的初始化。在定义对象时，如果某一数据成员没有被赋值，则它的值是不可预知的。对象是一个实体，在使用对象时，它的<font color='red'>每一个数据成员都应该有确定的值</font>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="keyword">double</span> real;</span><br><span class="line">    	<span class="keyword">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex c1=&#123;<span class="number">1.1</span>,<span class="number">2.2</span>&#125;	<span class="comment">//这种初始化一定要注意了，有私有成员时不行,只有公有成员可以	</span></span><br></pre></td></tr></table></figure>
<p>7、成员初始化列表对数据成员初始化</p>
<p><font color='red'>必须使用该方法的两类数据</font>，一是常量<code>const</code>，二是引用<code>&amp;</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex(<span class="keyword">double</span> x,<span class="keyword">double</span> y):real(x),imag(y)&#123;&#125;;<span class="comment">//构造函数后面操作</span></span><br></pre></td></tr></table></figure>
<p>数据成员是按照它们在类中<font color='red'>声明的顺序</font>进行初始化的，与它们<font color='red'>在成员初始化列表中列出的顺序无关</font>。</p>
<p><font color='red'>注意：如果参量是数组，则一定不能使用初始化表对其进行初始化</font></p>
<p>8、无参构造函数对象的定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex a;	<span class="comment">//正确</span></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">()</span></span>;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>9、带默认参数的构造函数</p>
<p>（1）<font color='red'>如果构造函数在类的声明外定义，那么默认参数应该在类内声明构造函数原型时指定（默认参数只能放在后面）</font>，而不能在类外构造函数定义时指定。</p>
<p>（2）<font color='red'>在一个类中定义了全部是默认参数的构造函数后，不能再定义重载构造函数</font>。例如在一个类中有以下构造函数的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> imag=<span class="number">0</span>);</span><br><span class="line">Complex(<span class="keyword">double</span> r);</span><br></pre></td></tr></table></figure>
<p>10、析构函数（<font color='red'>如果函数传参是对象引用，则不会调用析构，如果是对象，则会调用,但返回值有需要另外分析</font>）</p>
<p>（1）析构函数不返回任何值。在定义析构函数时，是不能说明它的类型的，甚至说明为<font color='red'>void类型也不行</font>。</p>
<p>（2）析构函数没有参数，因此它不能被重载。一个类可以有多个构造函数，但是只能有一个析构函数。</p>
<p>new出来的空间需要在析构函数中<code>delete</code>释放,针对类中的指针变量，</p>
<p>（3）使用<code>new</code>生成的对象<code>delete</code>时也需要调用析构函数</p>
<p>11、对象数组</p>
<ul>
<li>对象数组的赋值</li>
</ul>
<p>（1）创建多大的对象数组，就要调用构造函数多少次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>....;</span></span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//构造函数调用四次（单个参数才可以）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a中有空构造函数时,下面也可以</span></span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>];</span><br><span class="line">    c[<span class="number">1</span>]=a(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）对象数组的赋值可以使用多类构造函数赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    a();</span><br><span class="line">    a(<span class="keyword">int</span> i);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;<span class="comment">//多类构造函数，一个是a().一个是a(int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（3）定义数组时实参的个数不能超过数组元素的个数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）多参数构造函数对象数组的赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a c[<span class="number">4</span>]=&#123;a(<span class="number">1</span>,<span class="number">2</span>),a(<span class="number">2</span>,<span class="number">3</span>),a(<span class="number">3</span>,<span class="number">4</span>),a(<span class="number">3</span>,<span class="number">5</span>)&#125;;<span class="comment">//多参数的唯一赋值赋值方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（5）对象指针访问对象数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a *p,c[<span class="number">4</span>]..;</span><br><span class="line">    p=c;</span><br><span class="line">    p[<span class="number">0</span>]-&gt;show();</span><br><span class="line">    p++;<span class="comment">//c[1]</span></span><br><span class="line">    p-&gt;show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>对象的赋值和复制</p></li>
<li><p>拷贝复制函数（<font color='red'>这个函数没有返回值</font>）</p></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">p2</span><span class="params">(p1)</span><span class="comment">//使用拷贝复制函数构建p2,方式一</span></span></span><br><span class="line"><span class="function">Point p2</span>=p1 <span class="comment">//使用拷贝复制函数构建p2，方式二</span></span><br></pre></td></tr></table></figure>
<p>（1）与构造函数同名</p>
<p>（2）只有一个参数，参数类型是自身引用</p>
<p>（3）每个类有会有拷贝构造函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义拷贝复制函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    Point(<span class="keyword">const</span> Point &amp;p)&#123;</span><br><span class="line">        .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用拷贝构造函数的情况（<font color='red'>如果是在派生类中，会调用<code>base</code>析构函数，不一定调用<code>base</code>构造函数（除了自定义了拷贝构造函数外</font>））</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    B(<span class="keyword">const</span> B&amp;)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">B b1;<span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>;  <span class="comment">//这里b2的产生会调用A的构造</span></span><br><span class="line"><span class="comment">//默认拷贝构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="comment">// B(const B&amp;)&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">B b1;<span class="function">B <span class="title">b2</span><span class="params">(b1)</span></span>; <span class="comment">//这里b2的产生不会调用构造</span></span><br></pre></td></tr></table></figure>
<p>（1）用一个对象初始化一个对象</p>
<p>（2）<font color='red'>函数的形参是对象</font></p>
<p>（3）<font color='red'>函数的返回值是对象</font></p>
<p>这个返回值时对象的情况，实际上还调用了<font color='red'>赋值函数</font></p>
<p>静态成员（属于类，而不是对象）</p>
<p>静态数据成员（在类函数里可以直接访问,无需加上类名）<font color='red'>需要作用域初始化</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;<span class="comment">//类内声明</span></span><br><span class="line"><span class="comment">//初始化时需要int放在前面</span></span><br><span class="line"><span class="keyword">int</span> A::a=<span class="number">0</span>;<span class="comment">//main函数之前初始化,不用static前缀//需要作用域</span></span><br><span class="line">A::a; <span class="comment">//类访问方式</span></span><br><span class="line">A b;</span><br><span class="line">b.a;<span class="comment">//对象访问方式</span></span><br><span class="line">p-&gt;a;<span class="comment">//指针访问方式</span></span><br></pre></td></tr></table></figure>
<p>静态函数成员</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="comment">//访问方式同数据成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">A::f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;<span class="comment">//不用static前缀</span></span><br></pre></td></tr></table></figure>
<p>静态函数成员没有<code>this</code>指针,这是它和其它函数最大的区别，一般来说，<font color='red'>不访问非静态成员</font>，如果访问，则也是需要通过对象的引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dis</span><span class="params">(A &amp;w)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::dis</span><span class="params">(A &amp;w)</span></span>&#123;....&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拷贝构造函数的调用关系">拷贝构造函数的调用关系</h3>
<ul>
<li>当子类的拷贝构造函数没有自定义的时候，拷贝时默认会调用父类的拷贝构造函数（无论父类构造是否自定义）</li>
<li>当子类的拷贝构造函数自定义之后，拷贝时默认调用父类的构造函数，这时父类的数据成员达不到复制的目的，需要显式调用父类拷贝构造函数。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	B()&#123;&#125;;</span><br><span class="line">    	B(<span class="keyword">const</span> B &amp;ob):A(ob)&#123;...&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="友元">友元</h3>
<p>为什么要使用友元函数</p>
<p>（1）友元函数通过直接访问对象的私有成员，提高了程序运行的效率。</p>
<p>（2）在某些情况，如运算符被重载时，需要用到友元函数。</p>
<p>（3）一个函数可以是多个类的友元函数。当一个函数需要访问多个类时，友元函数非常有用</p>
<p>（1）友元关系是单向的，不具有交换性。若类X是类Y的友元，类Y是否是X的友元，要看在类中是否有相应的声明。</p>
<p>（2）友元关系也不具有传递性。若类X是类Y的友元，类Y是类z的友元，不定类X是类Z的友元。</p>
<h4 id="普通友元函数">普通友元函数</h4>
<p>（1）<font color='red'>友元一定不是当前类的成员函数</font></p>
<p>（2）只需要在声明的时候前面加上<code>friend</code>,可以定义在类的内部，也可以定义在类的外部</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">si</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">si</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//声明在类内，定义在类外，不是成员函数</span></span><br></pre></td></tr></table></figure>
<p>友元在访问的时候，必须传入<font color='red'>对象指针或者对象</font>的引用来进行访问</p>
<h4 id="友元函数是其它类的成员函数">友元函数是其它类的成员函数</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span><span class="comment">//这个很必要</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">si</span><span class="params">(Girl &amp;)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Boy::si</span><span class="params">(Girl &amp;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）一定要先定义友元函数所在的那个类，在定义声明为友元的那个类，需要提前声明类是存在的</p>
<h4 id="友元类">友元类</h4>
<p>（1）<font color='red'>友元类（友元函数所在的类）</font>必须在最开始定义，在其它类里面声明<code>friend 类名</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>&#123;</span></span><br><span class="line">    print(Girl &amp;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> (class) Boy; <span class="comment">//class 可以有，可以没有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要互相声明为友元，则需要在上面的类中加上声明下面的类为友元即可，声明友元类后，<font color='red'>友元内的成员函数不能够在类内定义，只能类外定义</font>.</p>
<h4 id="类的组合">类的组合</h4>
<p>在一个类中有其它类对象的变量</p>
<p>初始化的方法:初始化化表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    B b;</span><br><span class="line">    C c;</span><br><span class="line">    A(<span class="keyword">int</span> b1,<span class="keyword">int</span> c1):b(b1),c(c1)&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造顺序只与其在类中定义的顺序有关，与其在初始化表中的顺序无关，析构相反,<font color='red'>先调用A-&gt;调用B-&gt;调用c-&gt;执行A的函数体</font></p>
<h4 id="常类型">常类型</h4>
<ul>
<li>常引用</li>
</ul>
<p><code>const 类型 &amp; 引用名</code>作为形参</p>
<ul>
<li>常对象</li>
</ul>
<p><code>const 类名 对象名（参数表）</code>,或者<code>类名 const 对象名(参数表)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A <span class="keyword">const</span> a;</span><br><span class="line">a.changevalue();<span class="comment">//报错，常对象的数据成员不允许变更</span></span><br><span class="line">a.dis();<span class="comment">//常对象成员不可以调用普通函数</span></span><br></pre></td></tr></table></figure>
<ul>
<li>常函数</li>
</ul>
<p><code>返回类型 函数名（参数表）const</code>;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dis</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> A::dis <span class="title">const</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color='red'>常对象只能调用常函数，不能调用普通函数，但是常函数可以被任意调用</font>，常函数可以调用对象的数据成员，但是不能该对象的数据成员，可以改变参数表传进来的形式参数</p>
<p>【3.1】类声明的一般格式是什么？</p>
<p>【解】类声明的一般格式如下：class类名 private：私有数据成员和成员函数
public公有数据成员和成员函数
其中：class是声明类的关键字，类名是要声明的类的名字；后面的花括号表示类声明的范围；最后的分号表示类声明结束
除了 private和 public之外，类中的成员还可以用另一个关键字
protected来说明。这时类声明的格式可写成：</p>
<p>类名</p>
<p>[private:]私有数据成员和成员函数</p>
<p>public：公有数据成员和成员函数</p>
<p>protected：保护数据成员和成员函数</p>
<p>被
protected说明的数据成员和成员函数称为保护成员。保护成员可以由本类的成员函数访问，也可以由本类的派生类的成员函数访问，而类外的任何访问都是非法的，即它是半隐蔽的。</p>
<p>【3.2】构造函数和析构函数的主要作用是什么？它们各有什么特性？</p>
<p>【解】构造函数是一种特殊的成员函数，它主要用于为<font color='red'>对象分配空间，进行初始化</font>。构造函数的名字必须与类名相同，而不能由用户任意命名。<font color='red'>它可以有任意类型的参数，但不能具有返回值类型</font>。它<font color='red'>不需要用户来调用，而是在建立对象时自动执行</font>。</p>
<p>构造函数具有一些特性：</p>
<p>（1）构造函数的名字必须与类名相同，否则编译程序将把它当作一般的成员函数来处理。</p>
<p>（2）构造函数没有返回值，在定义构造函数时，是不能说明它的类型的，甚至说明为void类型也不行。</p>
<p>//（3）构造函数的函数体可写在类体内，也可写在类体外。</p>
<p>//（4）构造函数的作用主要是用来对对象进行初始化，用户根据初始化的要求设计函数体和函数参数。在构造函数的函数体中不仅可以对数据成员赋初值，而且可以包含其他语句，但是，为了保持构造函数的功能清晰，一般不提倡在构造函数中加入与初始化无关的内容。</p>
<p>（5）构造函数<font color='red'>一般声明为公有成员</font>，但它不需要也不能像其他成员函数那样被显式地调用，它是在定义对象的同时被自动调用的，而且只执行一次。</p>
<p>（6）在实际应用中，通常需要给每个类定义构造函数。如果没有给类定义构造函数，则编译系统自动地生成一个默认构造函数。</p>
<p>析构函数也是一种特殊的成员函数。它执行与构造函数相反的操作，<font color='red'>通常用于执行些清理任务，如释放分配给对象的内存空间等</font>。析构函数有以下一些特点：</p>
<p>（1）析构函数名与类名相同，但它前面必须加一个波浪号（~）。</p>
<p>（2）<font color='red'>析构函数不返回任何值</font>。在定义析构函数时，是不能说明它的类型的，甚至说明为void类型也不行。</p>
<p>（3）<font color='red'>析构函数没有参数，因此它不能被重载</font>。<font color='red'>一个类可以有多个构造函数，但是只能有一个析构函数</font>。</p>
<p>（4）<font color='red'>撤销对象时，编译系统会自动地调用析构函数</font>。</p>
<p>【3.3】什么是对象数组？</p>
<p>【解】所谓对象数组是指每一<font color='red'>数组元素都是对象的数组</font>，也就是说，若一个类有若干个对象，我们把这一系列的对象用一个数组来存放。对象数组的元素是对象，<font color='red'>不仅具有数据成员，而且还有函数成员</font>。</p>
<p>【3.4】什么是this指针？它的主要作用是什么？</p>
<p>【解】C++为成员函数提供了一个名字为this的指针，这个<font color='red'>指针称为自引用指针</font>。每当创建一个对象时，系统就把this指针初始化为指向该对象，即this指针的值是<font color='red'>当前被调用的成员函数所在的对象的起始地址</font>。每当调用一<font color='red'>个成员函数</font>时，系统就自动把<font color='red'>this指针作为一个隐含的参数传给该函数</font>。不同的<font color='red'>对象调用同一个成员函数</font>时，C++编译器将根据成员函数的<font color='red'>this指针所指向的对象来确定应该引用哪一个对象的数据成员</font></p>
<p>【3.5】友元函数有什么作用？</p>
<p>【解】<font color='red'>友元函数不是当前类的成员函数，而是独立于当前类的外部函数</font>，<font color='red'>但它可以访问该类所有的成员</font>font&gt;，包括私有成员、保护成员和公有成员。<font color='red'>当一个函数需要访问多个类时，友元函数非常有用</font>，普通的成员函数只能访问其所属的类，但是多个类的友元函数能够访问相应的所有类的数据。此外，<font color='red'>在某些情况，例如运算符被重载时，需要用到友元函数</font></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Point p1=p2;<span class="comment">//调用拷贝构造</span></span><br><span class="line">p3=p2  <span class="comment">//调用默认赋值</span></span><br></pre></td></tr></table></figure>
<p>杂项：</p>
<p>（1）不能在类声明中给数据成员赋值，但是可以通过构造函数等</p>
<p>（2）静态成员函数可以在类内或类外定义，但是静态成员只能在类内定义</p>
<p>（3）友元函数既可以在类内定义，也可以在类外定义</p>
<p>（4）<font color='red'>一定要记住，如果函数中使用了对象，那么在函数结束时一定会调用<strong>析构函数</strong>，作为函数参数时不调用构造函数，而是调用拷贝构造函数</font></p>
<p>（5）下面这种情况调用默认赋值函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A a1,a2;</span><br><span class="line">a1=a2 <span class="comment">//这时候是不调用拷贝构造函数的！！！</span></span><br></pre></td></tr></table></figure>
<p>（6）<font color='red'>数组传参的本质是地址，也就是说，只能用指针进行接收</font>，若是字符串，则可以这样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">90</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(b,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="派生与继承">派生与继承</h2>
<p>（1）派生类不继承基类的构造函数和析构函数</p>
<p>（2）调整基类的成员属性</p>
<ul>
<li><p>三种继承方式</p>
<p>访问声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    A::print <span class="comment">//记住，这里不用括号，不带返回类型，不带变量</span></span><br><span class="line">    A::a;<span class="comment">//调整成员数据，形式一致</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调整只能对应调整，即<font color='red'>基类中的公有-&gt;子类中的公有；基类中的保护-&gt;子类中的保护，私有成员不能调整(始终不可访问)</font>,对所有的基类重载函数都起作用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="keyword">int</span> x1;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    	<span class="keyword">int</span> x2;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">int</span> x3</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	A::x1;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    	A::x2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记住下面着这个例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,B&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><font color='red'>其中对A是公有继承，对B是私有继承。</font></p></li>
<li><p>同名成员（重定义）</p>
<p>（1）函数重定义（可以直接调整函数原来的属性）</p>
<p>要求：<font color='red'>函数名一样，<del>参数表一样</del>（参数可以不一样，这时候会直接隐藏父类的函数）：覆盖
，
如果不一样，则就是重载</font>覆盖不代表原来的函数没有了，它其实还是存在的，只是这时访问要加上作用域</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>;</span></span><br><span class="line">Y::m&#123;</span><br><span class="line">    f();<span class="comment">//访问y中的f（）</span></span><br><span class="line">    X::f();<span class="comment">//访问x中的f（）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）数据成员重写（<font color='red'>这种方式可以被直接无视父类中成员的权限，直接提升权限</font>）</p></li>
</ul>
<p>（3）基类中的私有成员。无论哪种继承方式，基类中的私有成员不允许派生类继承，即在派生类中是不可直接访问的。但是私有继承时，原来的<code>public \ protected</code>都是可以被内部访问的</p>
<p>（4）基类中的私有成员既不能被派生类的对象访问，也不能被派生类的成员函数访问，只能<font color='red'>被基类自己的成员函数（公有或者protected）访问</font>。</p>
<p>（5）通常情况下，当创建派生类对象时，首先执行基类的构造函数，随后再执行派生类的构造函数；当撤销派生类对象时，则先执行派生类的析构函数，随后再执行基类的析构函数。</p>
<p>（6）<font color='red'>当基类含有带参构造函数时，派生类必须定义构造函数给基类构造函数传参</font>.再多文件编程时，需要在类的内部写上函数声明（不包括哪些参数表），在类的外部写上调用基类构造函数，以及列表初始化等参数。</p>
<p>（7）指针定义的无名继承对象，如果是子类指针，则会调用子类、父类的析构函数，但是如果指针是父类指针，则在回收时会调用父类析构函数，并且，一旦定义了指针，一定是要有delete释放，即使main函数结束，指针变量依然不会释放。</p>
<p>派生类中的构造函数的调用顺序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B是A的子类</span></span><br><span class="line">B():A(...),a1(..),a2(..)&#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>调用基类构造函数</li>
<li>调用内嵌对象的构造函数</li>
<li>执行B的函数体</li>
<li><font color='red'>析构顺序相反</font></li>
</ul>
<p>对象成员的构造函数调用顺序是他们在派生类中的声明顺序，析构相反</p>
<h4 id="多重继承">多重继承</h4>
<p>形式:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">protected</span> B</span><br><span class="line">&#123;</span><br><span class="line">    ....<span class="comment">//先调用A的构造，再调用B的构造</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>构造函数的调用顺序与声明时的顺序有关，析构相反</p>
<h4 id="虚基类">虚基类</h4>
<p>（1）如果在<font color='red'>虚基类中定义有带形参的构造函数</font>，并且没有定义默认形式的构造函数，则整个继承结构中，<font color='red'>所有直接或间接的派生类都必须在构造函数的成员初始化表中列出对虚
基类构造函数的调用（不是虚基类不用调用。只用管自己的上一级）</font>，以初始化在虚基类中定义的数据成员。</p>
<p>（2）建立一个对象时，如果这个对象中含有从虚基类继承来的成员，<font color='red'>则虚基类的成员是由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的（构造函数只执行一次，普通继承调用多次）</font>。该派生类的其他基类
对虚基类构造函数的调用都自动被忽略。</p>
<p>（3）若同一层次中同时包含虚基类和非虚基类<font color='red'>，应先调用虚基类的构造函数，再调用非
虚基类的构造函数，最后调用派生类构造函数</font>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>:</span><span class="keyword">public</span> Y <span class="keyword">virtual</span> <span class="keyword">public</span> Z&#123;&#125;;</span><br><span class="line"><span class="comment">//先调用z，然后y，然后x</span></span><br></pre></td></tr></table></figure>
<p>（4）对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p>
<p>（5）对于非虚基类，构造函数的执行顺序仍是先左后右，自上而下。</p>
<p>（6）若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造</p>
<h4 id="兼容赋值">兼容赋值</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Base b;</span><br><span class="line">Derieve d;</span><br><span class="line">b=d;<span class="comment">//只能访问b具有的成员</span></span><br><span class="line">Base &amp;b=d;</span><br><span class="line">base *p=&amp;d;</span><br></pre></td></tr></table></figure>
<p>指向基类的指针只能指向他的<font color='red'>公有派生类</font>的对象，而不能指向他的私有和保护派生对象。</p>
<p>【4.3】保护成员有哪些特性？保护成员以公有方式或私有方式被继承后的访问特性
如何？</p>
<p>【解】当类的继承方式为公有继承时，基类中的所有保护成员在派生类中仍以保护成
员的身份出现，在派生类内可以访问这些成员，但派生类外部不能访问它们，而在下一层派
生类内可以访问它们。</p>
<p>当类的继承方式为私有继承时，基类中的所有保护成员在派生类中都以私有成员的身
份出现，在派生类内可以访问这些成员，但派生类外部不能访问它们。</p>
<p>【4.7】在类的派生中为何要引人虚基类？虚基类构造函数的调用顺序是如何规定的？</p>
<p>【解】当引用派生类的成员时，首先在派生类自身的作用域中寻找这个成员，如果没有
找到，则到它的基类中寻找。如果一个派生类是从多个基类派生出来的，而这些基类又有一
个共同的基类，则在这个派生类中访问这个共同的基类中的成员时，可能会产生二义性。为
了解决这种二义性，C++引入了虚基类的概念。
虚基类的初始化与一般的多继承的初始化在语法上是一样的，但构造函数的调用顺序不同。在使用虚基类机制时应该注意以下几点：</p>
<p>（1）如果在虚基类中定义有<font color='red'>带形参的构造函</font>数，并且没有定义默认形式的构造函数，则
整个继承结构中，所有直<font color='red'>接或间接的派生类都必须在构造函数的成员初始化表中列出对虚
基类构造函数的调用</font>，以初始化在虚基类中定义的数据成员。</p>
<p>（2）建立一个对象时，如果这个对象中含有从虚基类继承来的成员，则虚基类的成员是
由最远派生类的构造函数通过调用虚基类的构造函数进行初始化的。该派生类的其他基类
对虚基类构造函数的调用都自动被忽略。</p>
<p>（3）若同一层次中同时包含虚基类和非虚基类，应先调用虚基类的构造函数，再调用非
虚基类的构造函数，最后调用派生类构造函数。</p>
<p>（4）对于多个虚基类，构造函数的执行顺序仍然是先左后右，自上而下。</p>
<p>（5）对于非虚基类，构造函数的执行顺序仍是先左后右，自上而下。</p>
<p>（6）若虚基类由非虚基类派生而来，则仍然先调用基类构造函数，再调用派生类的构造
函数。</p>
<h2 id="多态">多态</h2>
<p>1、运算符重载(<font color='red'>所有的运算符重载都有返回值（除了转化构造函数外，一般为对象，但是=和[]返回的值对象的引用），一般都需要传入对象的引用，双目运算符函数的提供者是左边，单目运算符提供者默认是右边</font>)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">....</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span>+(Complex a,Complex b)</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	total1=com1+com2;	<span class="comment">//调用方式1</span></span><br><span class="line">	total2=<span class="keyword">operator</span>+(com1,com2);	<span class="comment">//调用方式2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不能重载的运算符有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">.*</span><br><span class="line">::</span><br><span class="line"><span class="keyword">sizeof</span></span><br><span class="line">?:</span><br></pre></td></tr></table></figure>
<p>C++不允许自己定义新的运算符，例如<code>**</code>不能重载，也不能定义，因为C++中无法通过这个进行乘方运算</p>
<ul>
<li>重载运算符不能改变操作数的个数（+）</li>
<li>重载不能改变优先级（+，<span
class="math inline">\(\times\)</span>）</li>
<li>重载不能改变结合特性</li>
<li>重载的参数至少一个是<u>类对象</u>（类引用），<u>不能全部是标准数据类型</u></li>
<li>=不用重载，除非类中有动态分配内存的指针成员</li>
</ul>
<h3 id="友元运算符函数重载">友元运算符函数重载</h3>
<ul>
<li>友元函数可以是不属于任何类的非成员函数，也可以是其他类的成员函数（一定不是自己的成员函数）</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元运算符重载</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> 函数类型 <span class="keyword">operator</span>运算符(形参表);</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">函数类型 <span class="keyword">operator</span>运算符（形参表）	<span class="comment">//无需加上类名</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在重载单目运算符，特别是++和--的时候，一定要记得使用<u>对象引用</u>，因为对象类型将无法改变它自身</li>
<li>有些的运算符不能定义为友元重载函数如<code>= 、[] 、()</code>，他们只能定为。。。</li>
</ul>
<h3 id="成员运算符重载">成员运算符重载</h3>
<ul>
<li>双目运算符：参数表为一个操作数</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试访问权限</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x</span>&#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">....</span><br><span class="line">		x <span class="keyword">operator</span>*(x ob);</span><br><span class="line">&#125;;</span><br><span class="line">x x::<span class="keyword">operator</span>*(x ob)</span><br><span class="line">&#123;</span><br><span class="line">	real=real*ob.real;</span><br><span class="line">	imag=imag*ob.imag;<span class="comment">//可以直接访问ob.imag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，即使<code>*</code>做为x的成员函数，但是<u>它还是可以访问同类型的ob的数据</u>，不存在权限不足的情况。实际调用左边对象的成员函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用方式</span></span><br><span class="line">a.<span class="keyword">operator</span>@(b)</span><br><span class="line">a@b</span><br></pre></td></tr></table></figure>
<ul>
<li>单目运算符：参数表为空,这是<u>适用于前缀</u></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">coord</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    coord <span class="keyword">operator</span>++()</span><br><span class="line">&#125;;</span><br><span class="line">coord coord::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    ++x;</span><br><span class="line">    ++y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>单目运算符：参数为<code>int</code>,适用于后缀</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ob.<span class="keyword">operator</span>++(<span class="keyword">int</span>)	<span class="comment">//成员函数重载</span></span><br><span class="line"><span class="keyword">operator</span>(x &amp;ob,<span class="keyword">int</span>) <span class="comment">//友元函数重载，一定要是引用</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前后缀对比</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">x <span class="keyword">operator</span>++();</span><br><span class="line"><span class="keyword">friend</span> x <span class="keyword">operator</span>++();</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">x <span class="keyword">operator</span>++(<span class="keyword">int</span>);	<span class="comment">//无需参数名，只需写类型</span></span><br><span class="line"><span class="keyword">friend</span> x <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line"><span class="comment">//定义区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">x x::<span class="keyword">operator</span>++()&#123;&#125;</span><br><span class="line">x <span class="keyword">operator</span>++()&#123;&#125;</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">x x::<span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;&#125;</span><br><span class="line">x <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//调用区别</span></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">ob.<span class="keyword">operator</span>++();<span class="comment">//显式调用，成员函数</span></span><br><span class="line"><span class="keyword">operator</span>++(ob);<span class="comment">//显示调用，友元函数</span></span><br><span class="line">++ob;	<span class="comment">//隐式调用:友元重载和成员函数重载一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">ob.<span class="keyword">operator</span>++(<span class="number">0</span>);<span class="comment">//显式调用，成员函数</span></span><br><span class="line"><span class="keyword">operator</span>++(ob,<span class="number">0</span>);<span class="comment">//显示调用，友元函数</span></span><br><span class="line">ob++;	<span class="comment">//隐式调用:友元重载和成员函数重载一样</span></span><br></pre></td></tr></table></figure>
<p>前缀<code>++x</code>是先自加，在进行下一步运算，<code>x=0,z=x++*4</code>,则最终<code>z=0</code>.</p>
<p>双目运算符一般可以被重载为友元运算符重载函数或成员运算符重载函数，但有一种情况，必须使用友元函数
例如，如果将一个复数与一个整数相加，可用成员运算符函数重载“+”运算符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Complex A::<span class="keyword">operator</span>+ (<span class="keyword">int</span> a)</span><br><span class="line">&#123; <span class="keyword">return</span> Complex(real+a ,imag);</span><br><span class="line">&#125;<span class="comment">// obj+100可以 100+obj不可以</span></span><br></pre></td></tr></table></figure>
<p>但是通过声明友元即可以解决这个问题，声明两个友元函数即可，即如果操作数希望有隐私类型转化，必须使用友元函数重载。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+（comp1 ex com，inta）/运算符+的左侧是类对象</span><br><span class="line">&#123;<span class="keyword">return</span> Complex（com.real+ a,com.imag）&#125;<span class="comment">//右侧是整数</span></span><br><span class="line"><span class="keyword">friend</span> Complex <span class="keyword">operator</span>+（inta，Complex com）<span class="comment">//运算符+的左侧是整数</span></span><br><span class="line">&#123;<span class="keyword">return</span> Complex（a+ com.real,com.imag）&#125;<span class="comment">//右侧是类对象</span></span><br></pre></td></tr></table></figure>
<ul>
<li>指针悬挂问题</li>
</ul>
<p>当使用自带的<code>=</code>的时候，指针赋值容易出现问题，那是因为，在使用析构函数进行回收内存的时候，会导致原来指针的空间被回收，<u><code>=</code>只能定义为成员函数</u></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    	<span class="keyword">char</span> *ptr;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	~a()&#123;</span><br><span class="line">           <span class="keyword">delete</span> ptr;		<span class="comment">//如果这里没有delete，则这一块空间不会被回收，即使是该对象已经消亡</span></span><br><span class="line">               ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">a <span class="title">a1</span><span class="params">(..)</span>,<span class="title">a2</span><span class="params">(..)</span></span>;</span><br><span class="line">    a2=a1;	<span class="comment">//a2.ptr=a1.ptr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;	<span class="comment">//a2先消失，a1后消失，一定要记住</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何解决,使用成员函数重载（深层赋值）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">String &amp;String::<span class="keyword">operator</span>=(<span class="keyword">const</span> String &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ptr;<span class="comment">//释放空间，但是没有删除变量</span></span><br><span class="line">	ptr=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(x.ptr)+<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(ptr,x.ptr);</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><u>下标运算符只能定义为成员函数</u></li>
</ul>
<h3 id="类型转化">类型转化</h3>
<ul>
<li>转化构造函数（<u>只能是类内构造函数</u>）,<font color='red'>没有说明返回类型</font></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">  a()&#123;&#125;;</span><br><span class="line">  a(<span class="keyword">double</span> r)&#123;	<span class="comment">//要转化的类型，转化构造函数</span></span><br><span class="line">      x=r,y=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>（1）转化构造函数只有一个参数，作用是将一个其他类型的数据转换成它所在类的对象</p>
<p>（2）转换构造函数不仅可以将一个系统预定义的标准类型数据转换成类的对象，也可以将另一个类的对象转换成转换构造函数所在的类对象。</p>
<ul>
<li>类型转化函数（<u>只能是类的成员函数</u>）<font color='red'>没有返回类型，只有<code>operator</code>关键字，无需参数表，但一定有<code>return</code>,记住了</font></li>
</ul>
<p>将类对象转化为另一类数据-&gt;类转化为其它数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span><span class="comment">//目标类型</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> real;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        ....</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span>(com) <span class="comment">//调用方式，注意这个和一般函数调用的区别</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（1）类型转换函数<u>只能定义为一个类的成员函数而不能定义为类的友元函数</u>。类型转换函数也可以在类体中声明函数原型，而将函数体定义在类的外部</p>
<p>（2）类型转换函数既没有参数，也不能在函数名前面指定函数类型</p>
<p>（3）类型函数中必须有<font color='red'>
<strong>return</strong></font>语句，即必须送回目标类型的数据作为函数的返回值。</p>
<p>（4）一个类可以定义多个类型转换函数。C++编译器将根据类型转换函数名自动地选择一个合适的类型转换函数予以调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型转化隐式调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>&#123;</span></span><br><span class="line">    Complex(<span class="keyword">int</span> i);</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">a2</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span>,a3</span>;</span><br><span class="line">    a3=a1+a2;<span class="comment">//先调用类型转化函数，在调用转化构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="虚函数">虚函数</h3>
<p>虚函数是重载的另一种表现形式。这是一种动态的重载方式，它提供了一种更为灵活的运行时的多态性机制。属于动态联编</p>
<p>原来，在C++中规定：<u>基类的对象指针</u>可以指向它的公有派生的对象，但是当其指向公有派生类对象时，它<u><font color='red'>只能访问派生类中从基类继承来的成员</font></u>，而<u>不能访问公有派生类中定义的成</u>员。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    print1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>:</span><span class="keyword">public</span> a&#123;</span><br><span class="line">    print2()</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p=&amp;b;</span><br><span class="line">    p-&gt;print1();<span class="comment">//正确</span></span><br><span class="line">    p-&gt;print2();<span class="comment">//错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过基类的<font color='red'>指针</font>或者<font color='red'>引用</font>来访问同名函数，在派生类中重新定义时，其函数原型，包括函数类型、函数名、参数个数、参数类型的顺序，都必须与基类中的原型完全相同。不一样的话将直接调用基类的虚函数</p>
<p>（1）若在基类中，只声明虚函数原型（需加上
virtual），而在类外定义虚函数时，则不必再加 virtual</p>
<p>（2）<code>virtual</code>可写可不写，在子类中</p>
<p>（3）如果虚函数没有被重新定义，则自接继承父类虚函数</p>
<p>（3）虚函数<font color='red'>必须是类的成员函数</font>，<font color='red'>不能是友元函数</font>，不能是静态函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用调用虚函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>：<span class="title">public</span> <span class="title">a</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a &amp;qq=b;</span><br><span class="line">    a.print();<span class="comment">//具有虚函数的特点，调用class b的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>虚析构函数</li>
</ul>
<p>不能声明虚构造函数，但是可以声明虚析构函数，若是按照上面的a，b两个类</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    b obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//即调用先调用b的析构，在调用a的析构</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p;</span><br><span class="line">    p=<span class="keyword">new</span> b;</span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//只调用a的析构，不调用b的析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果使用虚析构函数，则可以达到先调用b的析构，再调用a的析构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">a&#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~a()&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    a *p;</span><br><span class="line">    p=<span class="keyword">new</span> b;</span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//先调用b的析构，在调用a的析构</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虚函数是函数重载的另一种形式，但它不同于一般的函数重载。</p>
<p>普通的函数重载：其函数的参数或参数类型必须有所不同，函数的返回类型也可以不同。</p>
<p>虚函数：要求函数名、<font color='red'>返回类型</font>、参数个数、参数的类型和顺序与基类中的虚函数原型完全相同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ab</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function">class b:<span class="keyword">public</span> a</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ab</span><span class="params">()</span><span class="comment">//普通函数重载，相当于函数重写</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>纯虚函数与抽象类</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">area</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>（1）不能建立抽象类对象，只能作为基类</p>
<p>（2）可以定义指针，指向子类，<font color='red'>不能作为参数类型，函数返回类型</font></p>
<h3 id="问题">问题</h3>
<p>1、什么是动态联编和静态联编？</p>
<p>​
静态联编是指<font color='red'>系统在编译时就决定如何实现某一动作</font>。静态联编要求在程序编译时就知道调用函数的全部信息，因此，这种联编类型的<font color='red'>函数调用速度很快。效率高</font>是静态联编的主要优点。
​
动态联编是指<font color='red'>系统在运行时动态实现某一动作</font>。采用这种联编方式，一直要到程序运行时才能确定调用哪个函数。动态联编的主要优点是：<font color='red'>提供了更好的灵活性、问题抽象性和程序易维护性</font>。</p>
<p>2、编译时的多态性与运行时的多态性有什么区别？它们的实现方法有什么不同？</p>
<p>【解】<font color='red'>静态联编支持的多态性称为编译时多态性</font>，也称静态多态性。在C++中，<font color='red'>编译时多态性是通过函数重载（包括运算符重载）和模板实现的</font>。利用函数重载机制，在调用同名的函数时，编译系统可根据实参的具体情况确立所要调用的是哪个函数</p>
<p>​
<font color='red'>动态联编所支持的多态性称为运行时多态性</font>，也称动态多态性。在C++中，运行时<font color='red'>多态性是通过虚函数</font>来实现的。</p>
<p>3、简述运算符重载的规则。</p>
<p>【解】C++语言对运算符重载制定了以下一些规则：</p>
<p>（1）C++中绝大部分的运算符允许重载，不能重载的运算符只有少数几个。</p>
<p>（2）C++语言中只能对已有的C++运算符进行重载，不允许用户自己定义新的运算符。</p>
<p>（3）运算符重载是针对新类型数据的实际需要，对原有运算符进行适当的改造完成的。一般来讲，重载的功能应当与原有的功能相类似（如用“+”实现加法，用“-”实现减法）</p>
<p>（4）重载不能改变运算符的操作对象（即操作数）的个数。</p>
<p>（5）重载不能改变运算符原有的优先级。</p>
<p>（6）重载不能改变运算符原有的结合特性。</p>
<p>（7）运算符重载函数的<font color='red'>参数至少应有一个是类对象</font>（或类对象的引用）。</p>
<p>（8）运算符重载函数可以是普通函数，也可以是类的成员函数，还可以是类的友元函数。</p>
<p>（9）一般而言，用于类对象的运算符必须重载，但是赋值运算符“=”例外，不必用户进行重载。但在某些情况下，例如数据成员中包含指向动态分配内存的指针成员时，使用系统提供的对象赋值运算符函数就不能满足程序的要求，在赋值时可能出现错误。在这种情况下，就需要用户自己编写赋值运算符重载函数。</p>
<p>【5.4】友元运算符重载函数和成员运算符重载函数有什么不同</p>
<p>【解】友元运算符重载函数和成员运算符重载函数的不同有以下几点：
（1）对双目运算符而言，成员运算符重载函数参数表中含有一个参数，而友元运算符重载函数参数表中含有两个参数；对单目运算符而言，成员运算符重载函数参数表中没有参数，而友元运算符重载函数参数表中含有一个参数
（2）双目运算符一般可以被重载为友元运算符重载函数或成员运算符重载函数，但有些情况，必须使用友元运算符重载函数，例如一个常数与一个对象相加。有的运算符（如=等）只能使用成员运算符重载函数</p>
<p>（3）成员运算符函数和友元运算符函数都可以用习惯方式调用，也可以用它们专用的方式调用。</p>
<p>【5.5】什么是虚函数？虚函数与函数重载有哪些相同点与不同点？</p>
<p>【解】虚函数就是在基类中被关键字
virtual说明，并在派生类中重新定义的函数。虚函数的作用是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数。</p>
<p>​
在一个派生类中重新定义基类的虚函数是函数重载的另一种形式，但它不同于一般的函数重载。当普通的函数重载时，其函数的参数或参数类型必须有所不同，函数的返回类型也可以不同。但是，当重载一个虚函数时，也就是说在派生类中重新定义虚函数时，要求函数名、返回类型、参数个数、参数的类型和顺序与基类中的虚函数原型完全相同。如果仅仅返回类型不同，其余均相同，系统会给出错误信息；若仅仅函数名相同，而参数的个数、类型或顺序不同，系统将它作为普通的函数重载，这时虚函数的特性将丢失</p>
<p>【5.6】什么是纯虚函数？什么是抽象类？</p>
<p>【解】纯虚函数是一个在基类中说明的虚函数，它在该基类中没有定义，但要求在它的派生类中定义自己的版本，或重新说明为纯虚函数。</p>
<p>​
声明纯虚函数的一般形式如下：<code>virtual 函数类型 函数名（参数表）=0</code>；纯虚函数的作用是在基类中为其派生类保留一个函数的名字，以便派生类根据需要对它进行重新定义。纯虚函数没有函数体，它最后面的“=0”并不表示函数的返回值为0，而只起形式上的作用，告诉编译系统“这是纯虚函数”。纯虚函数不具备函数的功能，不能被调用。</p>
<ul>
<li>当父类的构造函数为空时，可以不用在子类构造中调用父类构造函数，实际上系统会默认调用。</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>今日校园</title>
    <url>/2021/01/22/todaycomplus/</url>
    <content><![CDATA[<p>讨厌签到？动个歪脑筋吧😂</p>
<span id="more"></span>
<h2 id="前言">前言</h2>
<p>​
总的来说，我已经是第二次疫情在家了，本人的记性一直都不太好，去年寒假的时候，每天还有一位热心的姐姐每天打电话问候我，我到现在都十分感谢那位给我打了一个寒假+一个学期电话的姐姐，但是现在，由于姐姐不能再继续提醒我了，但是这个记性依然还是很烂呀，而且我们学校每天需要填写的信息都是一样的，没办法，只能在网上搜索了一下教程，终于找到了一个与之相关的GitHub项目——<a
href="https://github.com/ZimoLoveShuang/auto-submit">auto-submit</a></p>
<!-- more -->
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122211835.png" /></p>
<p>从上传的时间来看，这个项目已经有了大半年了，而且有400
star，毫不犹豫选择这个，这篇文章将会分为两个目的来给大家介绍，一个是小白上手，另一部分则是分享我整个的经历</p>
<h2 id="小白上手">小白上手</h2>
<p>​ 首先注册搜索并注册腾讯云</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213427.png" /></p>
<p>然后进入云函数</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213505.png" /></p>
<p>进入函数服务并且新建建云函数，自定义并且选择python 3.6</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122213924.png" /></p>
<p>鼠标继续往下滑，将这里执行超时改成60s</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122214259.png" /></p>
<p>完成即可，如法炮制，新建一个层，随便输入一个名称，提交方法为默认（本地上传zip）并且将<a
href="https://ninglang.lanzous.com/i6nL3kpg1kh">dependency</a>
(点击即可下载)，添加 python3.6 的运行环境</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215107.png" /></p>
<p>找到刚才的函数服务，进入刚刚创建的创建函数，清空其中的代码并且将下面的代码复制到其中并且保存</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215436.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> formataddr</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug模式</span></span><br><span class="line">debug = <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> debug:</span><br><span class="line">    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取yml配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getYmlConfig</span>(<span class="params">yaml_file=<span class="string">&#x27;config.yml&#x27;</span></span>):</span></span><br><span class="line">    file = <span class="built_in">open</span>(yaml_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    file_data = file.read()</span><br><span class="line">    file.close()</span><br><span class="line">    config = yaml.load(file_data, Loader=yaml.FullLoader)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">config = getYmlConfig(yaml_file=<span class="string">&#x27;config.yml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取今日校园api</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">        url=<span class="string">&#x27;https://static.campushoy.com/apicache/tenantListSort&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">        new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br><span class="line">            <span class="comment">#print(one)</span></span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                params = &#123;</span><br><span class="line">                    <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                res = requests.get(url=<span class="string">&#x27;https://mobile.campushoy.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                                   verify=<span class="keyword">not</span> debug)</span><br><span class="line">                data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">                idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">                ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                    parse = urlparse(ampUrl)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">                ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                    parse = urlparse(ampUrl2)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前utc时间，并格式化为北京时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTimeStr</span>():</span></span><br><span class="line">    utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line">    bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line">    <span class="keyword">return</span> bj_dt.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出调试信息，并及时刷新缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(getTimeStr() + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(content))</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆并返回session</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSession</span>(<span class="params">user, loginUrl</span>):</span></span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;login_url&#x27;</span>: loginUrl,</span><br><span class="line">        <span class="comment"># 保证学工号和密码正确下面两项就不需要配置</span></span><br><span class="line">        <span class="string">&#x27;needcaptcha_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;captcha_url&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: user[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: user[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cookies = &#123;&#125;</span><br><span class="line">    <span class="comment"># 借助上一个项目开放出来的登陆API，模拟登陆</span></span><br><span class="line">    res = requests.post(config[<span class="string">&#x27;login&#x27;</span>][<span class="string">&#x27;api&#x27;</span>], params, verify=<span class="keyword">not</span> debug)</span><br><span class="line">    cookieStr = <span class="built_in">str</span>(res.json()[<span class="string">&#x27;cookies&#x27;</span>])</span><br><span class="line">    log(cookieStr)</span><br><span class="line">    <span class="keyword">if</span> cookieStr == <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">        log(res.json())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解析cookie</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> cookieStr.split(<span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">        name, value = line.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        cookies[name] = value</span><br><span class="line">    session = requests.session()</span><br><span class="line">    session.cookies = requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">    <span class="keyword">return</span> session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询表单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">queryForm</span>(<span class="params">session, apis</span>):</span></span><br><span class="line">    host = apis[<span class="string">&#x27;host&#x27;</span>]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 4.4.4; OPPO R11 Plus Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Safari/537.36 yiban/8.1.11 cpdaily/8.1.11 wisedu/8.1.11&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,en-US;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    queryCollectWidUrl = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/queryCollectorProcessingList&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&#x27;pageNumber&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = session.post(queryCollectWidUrl, headers=headers,</span><br><span class="line">                       data=json.dumps(params), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>]) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    collectWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;wid&#x27;</span>]</span><br><span class="line">    formWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;formWid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    detailCollector = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/detailCollector&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=detailCollector, headers=headers,</span><br><span class="line">                       data=json.dumps(&#123;<span class="string">&quot;collectorWid&quot;</span>: collectWid&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    schoolTaskWid = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;collector&#x27;</span>][<span class="string">&#x27;schoolTaskWid&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    getFormFields = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/getFormFields&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=getFormFields, headers=headers, data=json.dumps(</span><br><span class="line">        &#123;<span class="string">&quot;pageSize&quot;</span>: <span class="number">100</span>, <span class="string">&quot;pageNumber&quot;</span>: <span class="number">1</span>, <span class="string">&quot;formWid&quot;</span>: formWid, <span class="string">&quot;collectorWid&quot;</span>: collectWid&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line"></span><br><span class="line">    form = res.json()[<span class="string">&#x27;datas&#x27;</span>][<span class="string">&#x27;rows&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;collectWid&#x27;</span>: collectWid, <span class="string">&#x27;formWid&#x27;</span>: formWid, <span class="string">&#x27;schoolTaskWid&#x27;</span>: schoolTaskWid, <span class="string">&#x27;form&#x27;</span>: form&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写form</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillForm</span>(<span class="params">session, form, host</span>):</span></span><br><span class="line">    sort = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> formItem <span class="keyword">in</span> form[:]:</span><br><span class="line">        <span class="comment"># 只处理必填项</span></span><br><span class="line">        <span class="keyword">if</span> formItem[<span class="string">&#x27;isRequired&#x27;</span>] == <span class="number">1</span>:</span><br><span class="line">            default = config[<span class="string">&#x27;cpdaily&#x27;</span>][<span class="string">&#x27;defaults&#x27;</span>][sort - <span class="number">1</span>][<span class="string">&#x27;default&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;title&#x27;</span>] != default[<span class="string">&#x27;title&#x27;</span>]:</span><br><span class="line">                log(<span class="string">&#x27;第%d个默认配置不正确，请检查&#x27;</span> % sort)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 文本直接赋值</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">1</span> <span class="keyword">or</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">5</span>:</span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = default[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">            <span class="comment"># 单选框需要删掉多余的选项</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">2</span>:</span><br><span class="line">                <span class="comment"># 填充默认值</span></span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = default[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">                fieldItems = formItem[<span class="string">&#x27;fieldItems&#x27;</span>]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(fieldItems))[::-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">if</span> fieldItems[i][<span class="string">&#x27;content&#x27;</span>] != default[<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">                        <span class="keyword">del</span> fieldItems[i]</span><br><span class="line">            <span class="comment"># 多选需要分割默认选项值，并且删掉无用的其他选项</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">3</span>:</span><br><span class="line">                fieldItems = formItem[<span class="string">&#x27;fieldItems&#x27;</span>]</span><br><span class="line">                defaultValues = default[<span class="string">&#x27;value&#x27;</span>].split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(fieldItems))[::-<span class="number">1</span>]:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(defaultValues))[::-<span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">if</span> fieldItems[i][<span class="string">&#x27;content&#x27;</span>] == defaultValues[j]:</span><br><span class="line">                            <span class="comment"># 填充默认值</span></span><br><span class="line">                            formItem[<span class="string">&#x27;value&#x27;</span>] += defaultValues[j] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">                            flag = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">del</span> fieldItems[i]</span><br><span class="line">            <span class="comment"># 图片需要上传到阿里云oss</span></span><br><span class="line">            <span class="keyword">if</span> formItem[<span class="string">&#x27;fieldType&#x27;</span>] == <span class="number">4</span>:</span><br><span class="line">                fileName = uploadPicture(session, default[<span class="string">&#x27;value&#x27;</span>], host)</span><br><span class="line">                formItem[<span class="string">&#x27;value&#x27;</span>] = getPictureUrl(session, fileName, host)</span><br><span class="line">            log(<span class="string">&#x27;必填问题%d：&#x27;</span> % sort + formItem[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">            log(<span class="string">&#x27;答案%d：&#x27;</span> % sort + formItem[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line">            sort += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            form.remove(formItem)</span><br><span class="line">    <span class="comment"># print(form)</span></span><br><span class="line">    <span class="keyword">return</span> form</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传图片到阿里云oss</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadPicture</span>(<span class="params">session, image, host</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/getStsAccess&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    res = session.post(url=url, headers=&#123;</span><br><span class="line">                       <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;, data=json.dumps(&#123;&#125;), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    datas = res.json().get(<span class="string">&#x27;datas&#x27;</span>)</span><br><span class="line">    fileName = datas.get(<span class="string">&#x27;fileName&#x27;</span>)</span><br><span class="line">    accessKeyId = datas.get(<span class="string">&#x27;accessKeyId&#x27;</span>)</span><br><span class="line">    accessSecret = datas.get(<span class="string">&#x27;accessKeySecret&#x27;</span>)</span><br><span class="line">    securityToken = datas.get(<span class="string">&#x27;securityToken&#x27;</span>)</span><br><span class="line">    endPoint = datas.get(<span class="string">&#x27;endPoint&#x27;</span>)</span><br><span class="line">    bucket = datas.get(<span class="string">&#x27;bucket&#x27;</span>)</span><br><span class="line">    bucket = oss2.Bucket(oss2.Auth(access_key_id=accessKeyId,</span><br><span class="line">                                   access_key_secret=accessSecret), endPoint, bucket)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(image, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    bucket.put_object(key=fileName, headers=&#123;</span><br><span class="line">                      <span class="string">&#x27;x-oss-security-token&#x27;</span>: securityToken&#125;, data=data)</span><br><span class="line">    res = bucket.sign_url(<span class="string">&#x27;PUT&#x27;</span>, fileName, <span class="number">60</span>)</span><br><span class="line">    <span class="comment"># log(res)</span></span><br><span class="line">    <span class="keyword">return</span> fileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片上传位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPictureUrl</span>(<span class="params">session, fileName, host</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/previewAttachment&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;ossKey&#x27;</span>: fileName</span><br><span class="line">    &#125;</span><br><span class="line">    res = session.post(url=url, headers=&#123;</span><br><span class="line">                       <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;, data=json.dumps(data), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    photoUrl = res.json().get(<span class="string">&#x27;datas&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> photoUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交表单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submitForm</span>(<span class="params">formWid, address, collectWid, schoolTaskWid, form, session, host</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 4.4.4; OPPO R11 Plus Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Safari/537.36 okhttp/3.12.4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CpdailyStandAlone&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;extension&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cpdaily-Extension&#x27;</span>: <span class="string">&#x27;Ew9uONYq03Siz+VLCzZ4RiWRaXXBubIGc1d7ecaS2YmSDf1+elDL0gdwAw977HbPzvgR3pkeyW3djmnPOMxYro3Tps7PNmLoqfNTAECZqcM1LAyx+2zTfDExNa4yDWs83AyTnSKXs7oHQvFOfXhKNY1OXVzIdnwOkgaNw7XxzM1+2efCWAJgUBoHNV3n3MayLqOwPvSCvBke+SHC/Hy/53+ehU9A1lst6JlpGiFhlEOUybo5s5/o+b/XLUexuEE50IQgdPL4Hi4vPe4yVzA8QLpIMKSFIaRm&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=utf-8&#x27;</span>,</span><br><span class="line">        <span class="comment"># 请注意这个应该和配置文件中的host保持一致</span></span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: host,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认正常的提交参数json</span></span><br><span class="line">    params = &#123;<span class="string">&quot;formWid&quot;</span>: formWid, <span class="string">&quot;address&quot;</span>: address, <span class="string">&quot;collectWid&quot;</span>: collectWid, <span class="string">&quot;schoolTaskWid&quot;</span>: schoolTaskWid,</span><br><span class="line">              <span class="string">&quot;form&quot;</span>: form,<span class="string">&quot;uaIsCpadaily&quot;</span>: <span class="literal">True</span>,<span class="string">&quot;appVersion&quot;</span>: <span class="string">&quot;8.2.14&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># print(params)</span></span><br><span class="line">    submitForm = <span class="string">&#x27;https://&#123;host&#125;/wec-counselor-collector-apps/stu/collector/submitForm&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        host=host)</span><br><span class="line">    r = session.post(url=submitForm, headers=headers,</span><br><span class="line">                     data=json.dumps(params), verify=<span class="keyword">not</span> debug)</span><br><span class="line">    msg = r.json()[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">title_text = <span class="string">&#x27;今日校园疫结果通知&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMessage</span>(<span class="params">send, msg</span>):</span></span><br><span class="line">    <span class="keyword">if</span> send != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        log(<span class="string">&#x27;正在发送邮件通知。。。&#x27;</span>)</span><br><span class="line">        res = requests.post(url=<span class="string">&#x27;http://www.zimo.wiki:8080/mail-sender/sendMail&#x27;</span>,</span><br><span class="line">                            data=&#123;<span class="string">&#x27;title&#x27;</span>: title_text, <span class="string">&#x27;content&#x27;</span>: getTimeStr() + <span class="built_in">str</span>(msg), <span class="string">&#x27;to&#x27;</span>: send&#125;)</span><br><span class="line"></span><br><span class="line">        code = res.json()[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> code == <span class="number">0</span>:</span><br><span class="line">            log(<span class="string">&#x27;发送邮件通知成功。。。&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log(<span class="string">&#x27;发送邮件通知失败。。。&#x27;</span>)</span><br><span class="line">            log(res.json())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendEmail</span>(<span class="params">send,msg</span>):</span></span><br><span class="line">    my_sender= config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;account&#x27;</span>]   <span class="comment"># 发件人邮箱账号</span></span><br><span class="line">    my_pass = config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]         <span class="comment"># 发件人邮箱密码</span></span><br><span class="line">    my_user = send      <span class="comment"># 收件人邮箱账号，我这边发送给自己</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg=MIMEText(getTimeStr() + <span class="built_in">str</span>(msg),<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        msg[<span class="string">&#x27;From&#x27;</span>]=formataddr([<span class="string">&quot;FromRunoob&quot;</span>,my_sender])  <span class="comment"># 括号里的对应发件人邮箱昵称、发件人邮箱账号</span></span><br><span class="line">        msg[<span class="string">&#x27;To&#x27;</span>]=formataddr([<span class="string">&quot;FK&quot;</span>,my_user])              <span class="comment"># 括号里的对应收件人邮箱昵称、收件人邮箱账号</span></span><br><span class="line">        msg[<span class="string">&#x27;Subject&#x27;</span>]=title_text               <span class="comment"># 邮件的主题，也可以说是标题</span></span><br><span class="line"></span><br><span class="line">        server=smtplib.SMTP_SSL(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;server&#x27;</span>], config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;port&#x27;</span>])  <span class="comment"># 发件人邮箱中的SMTP服务器，端口是25</span></span><br><span class="line">        server.login(my_sender, my_pass)  <span class="comment"># 括号中对应的是发件人邮箱账号、邮箱密码</span></span><br><span class="line">        server.sendmail(my_sender,[my_user,],msg.as_string())  <span class="comment"># 括号中对应的是发件人邮箱账号、收件人邮箱账号、发送邮件</span></span><br><span class="line">        server.quit()  <span class="comment"># 关闭连接</span></span><br><span class="line">    <span class="keyword">except</span> Exception:  <span class="comment"># 如果 try 中的语句没有执行，则会执行下面的 ret=False</span></span><br><span class="line">        log(<span class="string">&quot;邮件发送失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>: <span class="built_in">print</span>(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># server酱通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendServerChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    log(<span class="string">&#x27;正在发送Server酱。。。&#x27;</span>)</span><br><span class="line">    res = requests.post(url=<span class="string">&#x27;https://sc.ftqq.com/&#123;0&#125;.send&#x27;</span>.<span class="built_in">format</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;ServerChan&#x27;</span>]),</span><br><span class="line">                            data=&#123;<span class="string">&#x27;text&#x27;</span>: title_text, <span class="string">&#x27;desp&#x27;</span>: getTimeStr() + <span class="string">&quot;\n&quot;</span> + <span class="built_in">str</span>(msg)&#125;)</span><br><span class="line">    code = res.json()[<span class="string">&#x27;errmsg&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> code == <span class="string">&#x27;success&#x27;</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Server酱通知成功。。。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Server酱通知失败。。。&#x27;</span>)</span><br><span class="line">        log(<span class="string">&#x27;Server酱返回结果&#x27;</span>+code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qmsg酱通知</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendQmsgChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    log(<span class="string">&#x27;正在发送Qmsg酱。。。&#x27;</span>)</span><br><span class="line">    res = requests.post(url=<span class="string">&#x27;https://qmsg.zendee.cn:443/send/&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Qsmg&#x27;</span>]),</span><br><span class="line">                            data=&#123;<span class="string">&#x27;msg&#x27;</span>: title_text + <span class="string">&#x27;\n时间：&#x27;</span> + getTimeStr() + <span class="string">&quot;\n 返回结果：&quot;</span> + <span class="built_in">str</span>(msg)&#125;)</span><br><span class="line">    code = res.json()[<span class="string">&#x27;success&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">        log(<span class="string">&#x27;发送Qmsg酱通知成功。。。&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log(<span class="string">&#x27;发送Qmsg酱通知失败。。。&#x27;</span>)</span><br><span class="line">        log(<span class="string">&#x27;Qmsg酱返回结果&#x27;</span>+code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 综合提交</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">InfoSubmit</span>(<span class="params">msg, send=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">None</span> != send):</span><br><span class="line">        <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Email&#x27;</span>][<span class="string">&#x27;enable&#x27;</span>]): sendEmail(send,msg)</span><br><span class="line">        <span class="keyword">else</span>: sendMessage(send, msg)</span><br><span class="line">    <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;ServerChan&#x27;</span>]): sendServerChan(msg)</span><br><span class="line">    <span class="keyword">if</span>(config[<span class="string">&#x27;Info&#x27;</span>][<span class="string">&#x27;Qsmg&#x27;</span>]): sendQmsgChan(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> config[<span class="string">&#x27;users&#x27;</span>]:</span><br><span class="line">            log(<span class="string">&#x27;当前用户：&#x27;</span> + <span class="built_in">str</span>(user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;username&#x27;</span>]))</span><br><span class="line">            apis = getCpdailyApis(user)</span><br><span class="line">            log(<span class="string">&#x27;脚本开始执行。。。&#x27;</span>)</span><br><span class="line">            log(<span class="string">&#x27;开始模拟登陆。。。&#x27;</span>)</span><br><span class="line">            session = getSession(user, apis[<span class="string">&#x27;login-url&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> session != <span class="literal">None</span>:</span><br><span class="line">                log(<span class="string">&#x27;模拟登陆成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在查询最新待填写问卷。。。&#x27;</span>)</span><br><span class="line">                params = queryForm(session, apis)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">str</span>(params) == <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;获取最新待填写问卷失败，可能是辅导员还没有发布。。。&#x27;</span>)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;没有新问卷&#x27;</span>)</span><br><span class="line">                    exit(-<span class="number">1</span>)</span><br><span class="line">                log(<span class="string">&#x27;查询最新待填写问卷成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在自动填写问卷。。。&#x27;</span>)</span><br><span class="line">                form = fillForm(session, params[<span class="string">&#x27;form&#x27;</span>], apis[<span class="string">&#x27;host&#x27;</span>])</span><br><span class="line">                log(<span class="string">&#x27;填写问卷成功。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;正在自动提交。。。&#x27;</span>)</span><br><span class="line">                msg = submitForm(params[<span class="string">&#x27;formWid&#x27;</span>], user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;address&#x27;</span>], params[<span class="string">&#x27;collectWid&#x27;</span>],</span><br><span class="line">                                 params[<span class="string">&#x27;schoolTaskWid&#x27;</span>], form, session, apis[<span class="string">&#x27;host&#x27;</span>])</span><br><span class="line">                <span class="keyword">if</span> msg == <span class="string">&#x27;SUCCESS&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;自动提交成功！&#x27;</span>)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;自动提交成功！&#x27;</span>, user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">                <span class="keyword">elif</span> msg == <span class="string">&#x27;该收集已填写无需再次填写&#x27;</span>:</span><br><span class="line">                    log(<span class="string">&#x27;今日已提交！&#x27;</span>)</span><br><span class="line">                    <span class="comment"># InfoSubmit(&#x27;今日已提交！&#x27;, user[&#x27;user&#x27;][&#x27;email&#x27;])</span></span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;今日已提交！&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    log(<span class="string">&#x27;自动提交失败。。。&#x27;</span>)</span><br><span class="line">                    log(<span class="string">&#x27;错误是&#x27;</span> + msg)</span><br><span class="line">                    InfoSubmit(<span class="string">&#x27;自动提交失败！错误是&#x27;</span> + msg, user[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">                    exit(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log(<span class="string">&#x27;模拟登陆失败。。。&#x27;</span>)</span><br><span class="line">                log(<span class="string">&#x27;原因可能是学号或密码错误，请检查配置后，重启脚本。。。&#x27;</span>)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        InfoSubmit(<span class="string">&quot;出现问题了！&quot;</span>+<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合Windows计划任务等使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(main_handler(&#123;&#125;, &#123;&#125;))</span><br><span class="line">    <span class="comment"># for user in config[&#x27;users&#x27;]:</span></span><br><span class="line">    <span class="comment">#     log(getCpdailyApis(user))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后在这个src目录新建一个文件，并且将它命名为<del>config.yaml</del>，这里写错了哈，图片上也错了（表现出我对yaml文件不熟悉😜）应该新建<code>config.yml</code></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122215924.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/image-20210122220210760.png" /></p>
<p>将下面的<code>yaml</code>代码复制粘贴进去,并且将学号改为你自己的学号，密码改为你用学号登录的密码，地址改为你家的地址，如果你想需要<code>server酱</code>微信提醒，请点击<a
href="http://sc.ftqq.com/3.version">server 酱</a>,绑定微信和GitHub</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122220916.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122221753.png" /></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登陆相关配置</span></span><br><span class="line"><span class="attr">login:</span></span><br><span class="line">  <span class="comment">#开放的模拟登陆api服务器地址</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">&quot;http://www.zimo.wiki:8080/wisedu-unified-login-api-v1.0/api/login&quot;</span></span><br><span class="line"><span class="comment">#用户组配置</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="comment">#单个用户配置</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">      <span class="comment">#username 学号或者工号</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">#password 密码</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> </span><br><span class="line">      <span class="comment">#address 地址，定位信息</span></span><br><span class="line">      <span class="attr">address:</span> <span class="comment">#</span></span><br><span class="line">      <span class="comment">#email 接受通知消息的邮箱</span></span><br><span class="line">      <span class="attr">email:</span> <span class="comment">#</span></span><br><span class="line">      <span class="comment">#school 学校全称</span></span><br><span class="line">      <span class="attr">school:</span> <span class="string">燕山大学</span></span><br><span class="line"><span class="attr">cpdaily:</span></span><br><span class="line">  <span class="comment">#表单组默认选项配置</span></span><br><span class="line">  <span class="attr">defaults:</span></span><br><span class="line">    <span class="comment">#表单默认选项配置，按顺序，注意，只有标必填项的才处理</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#表单项类型，对应今日校园接口返回的fieldType字段，1代表文本，2代表单选，3代表多选，4代表图片</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">#表单项标题</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">晨检体温℃</span></span><br><span class="line">        <span class="comment">#表单项默认值</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">36.5</span><span class="string">度</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">午检体温℃</span></span><br><span class="line">        <span class="attr">value:</span> <span class="number">36.5</span><span class="string">度</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">本人身体状况</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">健康</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">家庭成员身体状况</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">健康</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)有城际移动</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)去医院就诊</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">近十四天(是/否)接触过来自疫情高风险、中风险地区、境外或者去过疫情高风险、中风险地区、境外的亲友</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">(是/否)有新型冠状病毒感染的肺炎确诊或疑似病例接触史</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">是否被集中隔离</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">寒假离校返家后是否已经做过核酸检测</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">是</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">核酸检测结果如何</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">阴性</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">title:</span> <span class="string">未完成核酸检测的原因</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">已完成核酸检测</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Info:</span></span><br><span class="line">  <span class="attr">ServerChan:</span> <span class="comment">#</span></span><br><span class="line"><span class="comment"># 填写Server酱的SCKEY</span></span><br><span class="line">  <span class="attr">Qsmg:</span> <span class="comment"># 填写Qsmg酱的SCKEY</span></span><br><span class="line">  <span class="attr">Email:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">smtp.exmail.qq.com</span> <span class="comment"># 填写邮件的smtp服务器</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span> <span class="comment"># 填写邮件服务器的端口号</span></span><br><span class="line">    <span class="attr">account:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 邮件服务器登录用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 邮件服务器登录密码</span></span><br></pre></td></tr></table></figure>
<p>上面代码需要修改的地方有这几点（<code>注意</code>
：1.<code>yaml</code>语法格式的原因，修改内容时应该从冒号后面空一格开始，如下面举的例子
2.填写学号和密码应该填在单引号的里面
3.不同学院的收集内容可能不同，因此需要修改上面的问题）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">school:</span> <span class="string">燕山大学</span> <span class="comment">#这里冒号和燕山大学之间有一个空格</span></span><br></pre></td></tr></table></figure>
<p><code>type</code>的值为2时，说明这道题是一道单选题，为1时，说明这是一道填空题;注意，在设置温度时，一定要带上度，这样它就是一个<code>string</code>类型，不是一个<code>int</code>类型</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">default:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="number">2</span></span><br><span class="line">	<span class="attr">title:</span> <span class="string">(是/否)去医院就诊</span></span><br><span class="line">	<span class="attr">value:</span> <span class="string">否</span></span><br></pre></td></tr></table></figure>
<p>改好这个<code>config.yml</code>后，保存，并且部署，点击上面的层管理，再点击绑定选择刚才<code>nihao</code>(我的是<code>nihao</code>，你的取决于你当时取得名字啦)确定即可</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122225608.png" /></p>
<p>然后选择左边的触发管理-&gt;创建触发器，配置如下图，如果想要选其他时间(每个学院发布收集的时间不一致嘛)，请您观察规律，自行修改😂，不建议选整点，因为其实这是GitHub上那位大佬的服务器，选整点的人多了，自然服务器也累😂，效果也不好，做完这些提交就行啦！</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122224510.png" /></p>
<p>好的，现在我们可以回到刚刚修改代码的的地方，点击一下测试</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122225929.png" /></p>
<p>您得到的日志可能是这样子的，这表示您可能成功了，也可能没成功，因此，真正是否成功，还是要等到导员发了信息采集才可以，令人满意的效果应该像这种样子</p>
<figure>
<img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122230439.png"
alt="这是我第一次通过本地成功时的截图" />
<figcaption
aria-hidden="true">这是我第一次通过本地成功时的截图</figcaption>
</figure>
<p>OK，如果您已经完成这些，那么您就应该成功（当然，希望您还是再观察几天，以免出错），如果没有成功，欢迎在下方留言(留言无需注册，留个mail就行，留言支持图片，直接将图片拖拽进去就行)，如果你想要感谢这个项目，请点击这里:<a
href="https://github.com/ZimoLoveShuang/auto-submit">auto-submit</a>赞助它的原作者即可,下面我分享一下的我在将这个项目修改的时遇到的一些bug（小白直接跳过）</p>
<h2 id="过程分享">过程分享</h2>
<p>我本来在了解这个项目时，我对腾讯云函数并不了解，于是首先我尝试在本地先测试一下，在安装python的第三方库时，各种报错，这里我十分建议将源换成清华源，然后关掉所有代理，如果wifi下载失败，建议改用流量。我本以为只要改<code>config.yml</code>里的内容就行，但无奈又报错了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122233526.png" /></p>
<p>观察日志最后，发现是requests超时<code>Max retries exceeded with url: /v6/config/guest/tenant/list</code>
又由上面的位置可知，这个url在<code>index.py</code>里，于是我找到了这一行，复制了url在chrome里访问了一下</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210122234002.png" /></p>
<p>显然url失效了，上网搜了一下，原来由于作者更新过时，最后在csdn里面找到了两个新的网址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://static.campushoy.com/apicache/tenantListSort</span><br><span class="line">https://mobile.campushoy.com/v6/config/guest/tenant/info?ids=ysu</span><br></pre></td></tr></table></figure>
<p>但是很不幸，网址一返回的json文件是字典里data的<code>value</code>是列表，而且列表里还有字典，字典里有datas，而这里<code>requests.get</code>的schools的遍历无法满足下面的判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取今日校园api</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">        url=<span class="string">&#x27;https://www.cpdaily.com/v6/config/guest/tenant/list&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> schools:</span><br><span class="line">        <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;joinType&#x27;</span>] == <span class="string">&#x27;NONE&#x27;</span>:</span><br><span class="line">                log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未加入今日校园&#x27;</span>)</span><br><span class="line">                exit(-<span class="number">1</span>)</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            res = requests.get(url=<span class="string">&#x27;https://www.cpdaily.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                               verify=<span class="keyword">not</span> debug)</span><br><span class="line">            data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">            joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">            idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">            ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                parse = urlparse(ampUrl)</span><br><span class="line">                host = parse.netloc</span><br><span class="line">                res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                parse = urlparse(res.url)</span><br><span class="line">                apis[</span><br><span class="line">                    <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">            ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                parse = urlparse(ampUrl2)</span><br><span class="line">                host = parse.netloc</span><br><span class="line">                res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                parse = urlparse(res.url)</span><br><span class="line">                apis[</span><br><span class="line">                    <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是我就想着给它剥洋葱了😂，搜了一些剥洋葱的教程后，代码这样了（其实很简单，大家也不要随便放弃哟！）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCpdailyApis</span>(<span class="params">user</span>):</span></span><br><span class="line">    apis = &#123;&#125;</span><br><span class="line">    user = user[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">    schools = requests.get(</span><br><span class="line">    url=<span class="string">&#x27;https://static.campushoy.com/apicache/tenantListSort&#x27;</span>, verify=<span class="keyword">not</span> debug).json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">        new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br><span class="line">            <span class="comment">#print(one)</span></span><br><span class="line">            <span class="keyword">if</span> one[<span class="string">&#x27;name&#x27;</span>] == user[<span class="string">&#x27;school&#x27;</span>]:</span><br><span class="line">                flag = <span class="literal">False</span></span><br><span class="line">                params = &#123;</span><br><span class="line">                    <span class="string">&#x27;ids&#x27;</span>: one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                res = requests.get(url=<span class="string">&#x27;https://mobile.campushoy.com/v6/config/guest/tenant/info&#x27;</span>, params=params,</span><br><span class="line">                                   verify=<span class="keyword">not</span> debug)</span><br><span class="line">                data = res.json()[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                joinType = data[<span class="string">&#x27;joinType&#x27;</span>]</span><br><span class="line">                idsUrl = data[<span class="string">&#x27;idsUrl&#x27;</span>]</span><br><span class="line">                ampUrl = data[<span class="string">&#x27;ampUrl&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl:</span><br><span class="line">                    parse = urlparse(ampUrl)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line"></span><br><span class="line">                ampUrl2 = data[<span class="string">&#x27;ampUrl2&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;campusphere&#x27;</span> <span class="keyword">in</span> ampUrl2 <span class="keyword">or</span> <span class="string">&#x27;cpdaily&#x27;</span> <span class="keyword">in</span> ampUrl2:</span><br><span class="line">                    parse = urlparse(ampUrl2)</span><br><span class="line">                    host = parse.netloc</span><br><span class="line">                    res = requests.get(parse.scheme + <span class="string">&#x27;://&#x27;</span> + host)</span><br><span class="line">                    parse = urlparse(res.url)</span><br><span class="line">                    apis[</span><br><span class="line">                        <span class="string">&#x27;login-url&#x27;</span>] = idsUrl + <span class="string">&#x27;/login?service=&#x27;</span> + parse.scheme + <span class="string">r&quot;%3A%2F%2F&quot;</span> + host + <span class="string">r&#x27;%2Fportal%2Flogin&#x27;</span></span><br><span class="line">                    apis[<span class="string">&#x27;host&#x27;</span>] = host</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        log(user[<span class="string">&#x27;school&#x27;</span>] + <span class="string">&#x27; 未找到该院校信息，请检查是否是学校全称错误&#x27;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    log(apis)</span><br><span class="line">    <span class="keyword">return</span> apis</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改的其实只是这里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> schools:</span><br><span class="line">       new=item[<span class="string">&#x27;datas&#x27;</span>]</span><br><span class="line">       <span class="keyword">for</span> one <span class="keyword">in</span> new:</span><br></pre></td></tr></table></figure>
<p>遇到的第二个大问题首先是我以为原作者采用的是findall直接找出关键字，但是当我偷懒只写了一些字符时，又报错了</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123000529.png" /></p>
<p>我只好乖乖将那个问题都填完整（您知道的，有的问题真的好长，打字也容易错），后来改完上传时，表是填完了，但是上传失败。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123000835.png" /></p>
<p>这时候我有点绝望了，我看到GitHub作者上issue的问题，可惜大家大多数用的都是通用方法：cookie登录，电脑安装逍遥模拟器，然后装
xposed
，电脑fiddler抓包（但是我以前下载过逍遥，体验不好，不想再下载了），issue里面大多数都是说那个加密问题，但是我上文的这种方式其实不完全是模拟app，刚开始我以为是<code>post</code>时没有加上咋们的那个地址没有经纬度的原因，但是我加上去没有效果，于是我打算将通用方法的<code>user</code>移植过来（下面为通用的<code>config.yml</code>）,但是加了还是不行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="comment">#username 学号或者工号</span></span><br><span class="line">  <span class="attr">username:</span> </span><br><span class="line">  <span class="comment">#tellphone 电话号码</span></span><br><span class="line">  <span class="attr">tellphone:</span> </span><br><span class="line">  <span class="comment">#address 地址，定位信息</span></span><br><span class="line">  <span class="attr">address:</span> </span><br><span class="line">  <span class="comment">#email 接受通知消息的邮箱</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">  <span class="comment">#lon 当前位置经度，可以访问http://zuobiao.ay800.com/s/27/index.php获取</span></span><br><span class="line">  <span class="attr">lon:</span> <span class="string">&#x27;14.300060&#x27;</span></span><br><span class="line">  <span class="comment">#lat 当前位置纬度</span></span><br><span class="line">  <span class="attr">lat:</span> <span class="string">&#x27;332.880656&#x27;</span></span><br><span class="line">  <span class="comment">#school 学校全称</span></span><br><span class="line">  <span class="attr">school:</span> <span class="string">燕山大学</span></span><br><span class="line"><span class="comment">#今日校园相关配置</span></span><br></pre></td></tr></table></figure>
<p>所以没有那么那一步后来再那个issue里看到了一位大佬分享的版本密钥，于是我抱着侥幸的心理，修改了一下index.py，成功了。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123001629.png" /></p>
<hr />
<h2 id="server-酱">Server 酱</h2>
<p>​
不知道是我的设置问题还是别的什么问题，在写完这篇教程后的一天，我的server
酱就<code>post</code>成功不了了，但是我在本地测试，也就是用我电脑自带的<code>python3.9</code>却可以成功,我原以为是第三方库的问题，因为我同学也向我反映过这个问题，但是我还是认为它报错存在问题，因为整个<code>index.py</code>中依赖了许多库，如果不能够引入那些库，就不可能完成整个填报，而我只是出现了无法让Server
酱通知</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125161400.png" /></p>
<p>​
我最近在家里尝试很多次，但是都没有结果，甚至出现了一件让我感到很amazing的事情，就是我点击运行，它能够post成功，但是我点击测试，他就无法成功。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162100.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162127.png" /></p>
<p>这让我百思不得其解，也让我忧心忡忡，因为如果某一天失败了（或者老师改了问卷），但我却不知道，那岂不是糟糕了，通知还是必要的呀，我想过用短信api来代替，但是又要注册啥的，我就算了，恰好今天看到了一个可以代替Server
酱——<a
href="https://work.weixin.qq.com/">企业微信</a>(点击跳转注册)，注册完成后在app
management里新建一个app</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125162732.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125164912.png" /></p>
<p>记住下面这两个参数然后点击<code>My Company</code>
记住<code>Company ID</code></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125165120.png" /></p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125170105.png" /></p>
<p>点击<code>wechat workplace</code>然后微信扫描这个二维码即可绑定应用。</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125170149.png" /></p>
<p>然后在<code>config.yml</code>最后一行里面加上这个三个参数格式如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">AgentId:</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">Secret:</span> <span class="comment">#</span></span><br><span class="line"><span class="attr">CompanyId:</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>在<code>index.py</code>中找到<code>sendServerChan</code>将这个函数替换为下面代码，配置即可成功，</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210125165818.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendServeChan</span>(<span class="params">msg</span>):</span></span><br><span class="line">    url=<span class="string">&#x27;https://api.htm.fun/api/Wechat/text_card/&#x27;</span></span><br><span class="line">    data=&#123;</span><br><span class="line">        <span class="string">&#x27;corpid&#x27;</span>:config[<span class="string">&#x27;CompanyId&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;corpsecret&quot;</span>:config[<span class="string">&#x27;Secret&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;agentid&quot;</span>:config[<span class="string">&#x27;AgentId&#x27;</span>],</span><br><span class="line">        <span class="string">&quot;title&quot;</span>:<span class="string">&quot;今日校园&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>:<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>:<span class="string">&quot;/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url=url,data=data)</span><br></pre></td></tr></table></figure>
<p>OK，如果这些都配置好了，那么你的wechat应该就可以收到信息了</p>
<h2 id="总结">总结</h2>
<p>​
至此，这个有趣的项目就弄完了，虽然在一天半时间，这个过程中我曾想过放弃很多次，但是考虑到每天填那个表，还是坚持了下载，但终究还是我运气好，就成功了，欢迎大家有问题啥的留言呀😂，最后分享一下喜悦</p>
<p><img
src="https://picturnl.oss-cn-shanghai.aliyuncs.com/20210123003023.png" /></p>
<p>如果还想实现其他的功能建议自己去探索哟，比如拍照签到，因为我没有相关的条件（没有拍照签到的任务，无法测试😂）</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
</search>
